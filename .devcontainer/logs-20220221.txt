commit 1c2d0dddcec1bbf637b82e3948e3169241147aa1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 18 09:28:05 2022 -0700

    build(deps): bump tj-actions/changed-files from 15.1 to 16 (#1507)
    
    Bumps [tj-actions/changed-files](https://github.com/tj-actions/changed-files) from 15.1 to 16.
    - [Release notes](https://github.com/tj-actions/changed-files/releases)
    - [Changelog](https://github.com/tj-actions/changed-files/blob/main/HISTORY.md)
    - [Commits](https://github.com/tj-actions/changed-files/compare/4b1f26aed507a21569666773e1c753dfe409d806...4daffbaee17b34b8ae544990906277485819cc16)
    
    ---
    updated-dependencies:
    - dependency-name: tj-actions/changed-files
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 451c10dd349860d300643b6cb369d279db50b076
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 18 09:27:45 2022 -0700

    build(deps): bump tracing from 0.1.30 to 0.1.31 (#1508)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.30 to 0.1.31.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.30...tracing-0.1.31)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2ee42810800d89cdb317d68ef08f3cf1f998ec83
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 18 09:27:25 2022 -0700

    build(deps): bump tracing-subscriber from 0.3.8 to 0.3.9 (#1509)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.8 to 0.3.9.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.8...tracing-subscriber-0.3.9)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 61eb780f6b1bcf7adfff71537884e770703088a3
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 17 11:55:43 2022 -0800

    cargo: Omit patch versions from Cargo.toml files (#1504)
    
    There's no need for us to specify patch versions in Cargo.toml files,
    since we commit our Cargo.lock file. These versions mean that dependency
    changes touch unnecessary files, requiring "shotgun surgery" for routine
    dependency bumps (and also triggering CI workflows for these subcrates).
    
    Let's omit patch versions from Cargo.toml.
    
    This change adds a `check-all` workflow that runs a faster `check --workspace`
    when `Cargo.lock` changes.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 5c45609cc9ce8f64e9097dc4d42cc6dba99c82d4
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Feb 17 07:45:12 2022 -0800

    build(deps): bump cc from 1.0.72 to 1.0.73 (#1506)
    
    Bumps [cc](https://github.com/alexcrichton/cc-rs) from 1.0.72 to 1.0.73.
    - [Release notes](https://github.com/alexcrichton/cc-rs/releases)
    - [Commits](https://github.com/alexcrichton/cc-rs/compare/1.0.72...1.0.73)
    
    ---
    updated-dependencies:
    - dependency-name: cc
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 510b1f866db648d4880e8c9cf9294ce0d8e018fe
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Feb 17 07:44:12 2022 -0800

    build(deps): bump tj-actions/changed-files (#1505)
    
    Bumps [tj-actions/changed-files](https://github.com/tj-actions/changed-files) from b3b79dbb9cf4fd390105963b48346e14b4842cc1 to 15.1. This release includes the previously tagged commit.
    - [Release notes](https://github.com/tj-actions/changed-files/releases)
    - [Changelog](https://github.com/tj-actions/changed-files/blob/main/HISTORY.md)
    - [Commits](https://github.com/tj-actions/changed-files/compare/b3b79dbb9cf4fd390105963b48346e14b4842cc1...4b1f26aed507a21569666773e1c753dfe409d806)
    
    ---
    updated-dependencies:
    - dependency-name: tj-actions/changed-files
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit c876fe1216e37d22839b73b26effcee1ffb6f17d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Feb 16 22:59:55 2022 -0800

    deps: update to `tokio` 1.17.0 and `tower` 0.4.12, and unpatch (#1503)
    
    This branch updates the proxy's dependencies on Tokio and Tower to
    1.17.0 and 0.4.12, respectively. These releases contain fixes for panics
    when `std::time::Instant` fails to be properly monotonic.
    
    Previously, we were using Git dependencies to ensure we got these fixes.
    Now, we can remove those patches, as the released versions of these
    crates have the necessary changes.

commit 120aea0ce30c64772dbcf5b2349d07963b3e64b4
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 16 17:11:16 2022 -0800

    ci: Run fuzzing only on related changes (#1501)
    
    We previously always built fuzzers. This change updates the fuzzers
    workflow as follows:
    
    * the workflow is only invoked when a fuzz crate changes (or when the
      workflow itself changes).
    * fuzzer builds are only executed for changed crate directories
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit b83b2516e0cab740662674424d8cddcaf6d208cd
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Feb 16 07:28:00 2022 -0800

    build(deps): bump libc from 0.2.117 to 0.2.118 (#1502)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.117 to 0.2.118.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.117...0.2.118)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b3d1236b2ae3e9de49a37bea7ebb31f3f4582c8a
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 15 16:12:53 2022 -0800

    ci: Only run checks on changed crates (#1498)
    
    Currently we check all crates on all source and manifest changes. This
    change updates the `check-each` workflow to use the
    `tj-actions/changed-files` action to limit checks to modified crates.
    All checks are run when the action itself chnages.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 82c1f61b11244b358a9da96676b20d859fa41dcc
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 15 10:04:38 2022 -0800

    Pin git deps for dependencies that have `Instant` workarounds (#1497)
    
    tokio & tower have been patched to avoid issues described in
    linkerd/linkerd2#7748, but they have not yet been released. This change
    pins these dependencies to Git to pickup the workarounds.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 71f08a8b09a0693d3271fa204d730099266cf492
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 15 10:04:02 2022 -0800

    Fix dockerfile (#1500)
    
    PR #1479 changed the docker base image to not include a shell, which
    broke the dockerfile's logic for skipping the identity wrapper. It's no
    longer possible to run the proxy without identity, so this functionality
    isn't needed in any case.
    
    This change fixes the Dockerfile and adds a CI workflow to test docker
    builds on Dockerfile changes.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 87adcdaa77aa38bf2ffe3e58b53e3ea04176ff1f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Feb 15 07:53:57 2022 -0800

    build(deps): bump EmbarkStudios/cargo-deny-action from 1.2.11 to 1.2.12 (#1499)
    
    Bumps [EmbarkStudios/cargo-deny-action](https://github.com/EmbarkStudios/cargo-deny-action) from 1.2.11 to 1.2.12.
    - [Release notes](https://github.com/EmbarkStudios/cargo-deny-action/releases)
    - [Commits](https://github.com/EmbarkStudios/cargo-deny-action/compare/4340bbf5bc9e7034fae7c4857e9ab87cab35c905...8acbae97b5d01b0481ae14cee8fcd8f5aa9e374d)
    
    ---
    updated-dependencies:
    - dependency-name: EmbarkStudios/cargo-deny-action
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b80af37497eae86fe55480e281c1c382ee63ec83
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Mon Feb 14 12:27:10 2022 -0700

    Do not error when `LINKERD2_PROXY_INBOUND_PORTS` is empty (#1478)
    
    When the `LINKERD2_PROXY_INBOUND_PORTS` environment is set
    and empty, we should not log an error message.
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 70eceb8a9bdcc2d588cda095051ee69475fb0ef7
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 14 11:17:53 2022 -0800

    ci: Use cargo-action-fmt to annotate PRs (#1492)
    
    `cargo-action-fmt` reads `cargo` output and generates GitHub action
    errors that properly annotate source locations.
    
    This change updates our CI workflows to use `cargo-action-fmt` so that
    errors are more clearly annotated.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit c3ab2568b0725ad5e1feeefee3cd6114036aeb15
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 14 08:18:59 2022 -0800

    build(deps): bump hdrhistogram from 7.4.0 to 7.5.0 (#1493)
    
    Bumps [hdrhistogram](https://github.com/HdrHistogram/HdrHistogram_rust) from 7.4.0 to 7.5.0.
    - [Release notes](https://github.com/HdrHistogram/HdrHistogram_rust/releases)
    - [Changelog](https://github.com/HdrHistogram/HdrHistogram_rust/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/HdrHistogram/HdrHistogram_rust/compare/v7.4.0...v7.5.0)
    
    ---
    updated-dependencies:
    - dependency-name: hdrhistogram
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 1a52030cd090adcfba1e765061edab99d3f8fb29
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 14 08:18:28 2022 -0800

    build(deps): bump serde_json from 1.0.78 to 1.0.79 (#1494)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.78 to 1.0.79.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.78...v1.0.79)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7a8ccd8ef4beb37f11a10dfdbb9b5db4c7dc7b1b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 14 08:18:02 2022 -0800

    build(deps): bump rustls from 0.20.2 to 0.20.3 (#1495)
    
    Bumps [rustls](https://github.com/rustls/rustls) from 0.20.2 to 0.20.3.
    - [Release notes](https://github.com/rustls/rustls/releases)
    - [Changelog](https://github.com/rustls/rustls/blob/main/RELEASE_NOTES.md)
    - [Commits](https://github.com/rustls/rustls/compare/v/0.20.2...v/0.20.3)
    
    ---
    updated-dependencies:
    - dependency-name: rustls
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0ee68463284b601c06c001c6bbeeb375b3d0a691
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 14 06:59:35 2022 -0800

    build(deps): bump rand from 0.8.4 to 0.8.5 (#1496)
    
    Bumps [rand](https://github.com/rust-random/rand) from 0.8.4 to 0.8.5.
    - [Release notes](https://github.com/rust-random/rand/releases)
    - [Changelog](https://github.com/rust-random/rand/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-random/rand/compare/0.8.4...0.8.5)
    
    ---
    updated-dependencies:
    - dependency-name: rand
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0e2cda9bc0e4f6ab027670fb4d36bb1de914daef
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 11 12:03:38 2022 -0800

    ci: Only run checks on Cargo.toml changes (#1491)
    
    The point of this job is to check that each crate can be built
    independently (i.e., that it doesn't depend on features pulled in by
    another crate).
    
    This change also updates the workflow to check linkerd-meshtls-boring by
    installing its build deps.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 7f173183b9941252901f67b44db151c9124fe146
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Feb 11 11:35:03 2022 -0800

    build(deps): update tokio-util to v0.7 (#1490)
    
    This branch updates `tokio-util` to v0.7.0.
    
    The dependabot-generated PR for this update doesn't work, because this
    is a breaking API change. The only update that was necessary here was
    changing the use of `tokio_util::sync::PollSender` in
    `linkerd-proxy-discover` to use the updated method names.
    
    Closes #240
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3d26ad7e2c511a7ad3db6bacd0d7d244bc962641
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 11 11:13:55 2022 -0800

    ci: Split out worflows (#1485)
    
    This change splits out our GitHub workflows to run conditionally,
    depending on which files change in a pull request.
    
    * `build`: builds the proxy in release mode wh
    * `check-each`: checks that each Cargo.toml checks cleanly on its own.
      This used to be a serial task, but has been converted to a matrix job.
    * `deps`: Only runs on dependency changes to check cargo-deny
    * `integration`: Runs integration tests on code & dependency changes.
    * `lint`: Runs clippy, fmt, and doc on all source changes. Not run on
      dependency changes.
    * `test`: Runs unit tests on code and dependency changes
    
    This prevents doing needless work on dependency changes (as these are
    extremely common) and makes it easier to rerun narrower workflows, if
    necessary. The best part of this, though, is that we've made
    `check-each` a matrix job so that its tests can be parallelized.
    
    We'll update the github settings to make none of these checks strictly
    required.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 170762f018773ee86ccc4b1e55d84e0c4c384606
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 11 11:04:16 2022 -0800

    ci: Add workflows to run beta, nightly builds (#1483)
    
    We currently only really catch Rust regressions as they hit stable. This
    change adds workflows to build the proxy daily against `nightly` and
    weekly against `beta`.
    
    These workflows are separated so that they can run on different
    schedules and so that a failure on one toolchain does not interfere with
    the other.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit d46c26344a9058fad9bffe0dd6f070ba403a8746
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 11 10:35:02 2022 -0800

    Change CODEOWNERS to @linkerd/maintainers (#1489)
    
    It seems fine to broaden the review pool to all maintainers. As always,
    good judgement about merging is expected :)
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 2ca9b28a21e3576a4e9152a9c222a46e55714d96
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 11 08:22:17 2022 -0800

    build(deps): bump hyper from 0.14.16 to 0.14.17 (#1486)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.16 to 0.14.17.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.16...v0.14.17)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0b1b7b49042d18d9db45fbaddb95a97e4c94107e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 11 08:22:01 2022 -0800

    build(deps): bump ntapi from 0.3.6 to 0.3.7 (#1488)
    
    Bumps [ntapi](https://github.com/MSxDOS/ntapi) from 0.3.6 to 0.3.7.
    - [Release notes](https://github.com/MSxDOS/ntapi/releases)
    - [Commits](https://github.com/MSxDOS/ntapi/commits)
    
    ---
    updated-dependencies:
    - dependency-name: ntapi
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 6661ad0df0c27a06eebfff96923d9198f3acc448
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 11 07:19:13 2022 -0800

    ci: Add a toolchain workflow (#1484)

commit 0530c0032bd2263777eef9041dfa101940bd49a2
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Thu Feb 10 16:35:38 2022 -0700

    Bump runtime image so that linkerd-await 0.2.5 is used (#1479)
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit e4e1525d4f2a8267b87d1b950a0a56cc44156c6c
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Feb 10 15:35:10 2022 -0800

    build(deps): bump EmbarkStudios/cargo-deny-action from 1.2.10 to 1.2.11 (#1480)
    
    Bumps [EmbarkStudios/cargo-deny-action](https://github.com/EmbarkStudios/cargo-deny-action) from 1.2.10 to 1.2.11.
    - [Release notes](https://github.com/EmbarkStudios/cargo-deny-action/releases)
    - [Commits](https://github.com/EmbarkStudios/cargo-deny-action/compare/2a55392931cddc0ae1d7397515fd0951d39ebaf2...4340bbf5bc9e7034fae7c4857e9ab87cab35c905)
    
    ---
    updated-dependencies:
    - dependency-name: EmbarkStudios/cargo-deny-action
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 4eaf8d641f0fb9b0f4a871b60c2ff4a1b1db33ec
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Feb 10 15:34:33 2022 -0800

    build(deps): bump derive_arbitrary from 1.0.2 to 1.1.0 (#1481)
    
    Bumps [derive_arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.2 to 1.1.0.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/commits)
    
    ---
    updated-dependencies:
    - dependency-name: derive_arbitrary
      dependency-type: indirect
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 121c441bbd85145e2b5f75f3b3693cc8dfe8ea8f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Feb 10 15:32:52 2022 -0800

    build(deps): bump arbitrary from 1.0.3 to 1.1.0 (#1482)
    
    Bumps [arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.3 to 1.1.0.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/commits)
    
    ---
    updated-dependencies:
    - dependency-name: arbitrary
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit cff3f398d7df974a37d4b747a934637d5575a815
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Feb 9 09:05:11 2022 -0800

    build(deps): bump trust-dns-resolver from 0.21.0-alpha.4 to 0.21.0-alpha.5 (#1475)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from 0.21.0-alpha.4 to 0.21.0-alpha.5.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Changelog](https://github.com/bluejekyll/trust-dns/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/v0.21.0-alpha.4...v0.21.0-alpha.5)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Signed-off-by: Oliver Gould <ver@buoyant.io>
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 500a5cfa193f6ede386c4a9aab29f7d77d6b6fde
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Feb 9 08:55:41 2022 -0800

    build(deps): bump httparse from 1.5.1 to 1.6.0 (#1477)
    
    Bumps [httparse](https://github.com/seanmonstar/httparse) from 1.5.1 to 1.6.0.
    - [Release notes](https://github.com/seanmonstar/httparse/releases)
    - [Commits](https://github.com/seanmonstar/httparse/compare/v1.5.1...v1.6.0)
    
    ---
    updated-dependencies:
    - dependency-name: httparse
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 1eb18f45e3aa5d5d9d5049261416cec628ce9163
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 9 08:06:48 2022 -0800

    Update the devcontainer (#1474)
    
    * Set a default locale (en_US.UTF-8)
    * Use multi-stage docker builds and install tools into /usr/local/bin
    * Drop needless extensions
    * Use a `RUST_VERSION` build-arg instead of inline version strings

commit 5960ad8429285a1232cded2eba7fe5f1a16d709a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Feb 8 07:22:44 2022 -0800

    build(deps): bump autocfg from 1.0.1 to 1.1.0 (#1472)
    
    Bumps [autocfg](https://github.com/cuviper/autocfg) from 1.0.1 to 1.1.0.
    - [Release notes](https://github.com/cuviper/autocfg/releases)
    - [Commits](https://github.com/cuviper/autocfg/compare/1.0.1...1.1.0)
    
    ---
    updated-dependencies:
    - dependency-name: autocfg
      dependency-type: indirect
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 281942e362369a467eb7ce9a35ee061055f6240a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Feb 8 07:21:51 2022 -0800

    build(deps): bump crc32fast from 1.3.1 to 1.3.2 (#1473)
    
    Bumps [crc32fast](https://github.com/srijs/rust-crc32fast) from 1.3.1 to 1.3.2.
    - [Release notes](https://github.com/srijs/rust-crc32fast/releases)
    - [Commits](https://github.com/srijs/rust-crc32fast/compare/v1.3.1...v1.3.2)
    
    ---
    updated-dependencies:
    - dependency-name: crc32fast
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8bec58a4ad9d45aefb3debc2742d9c854176698a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 7 12:11:43 2022 -0800

    build(deps): bump unicode-segmentation from 1.8.0 to 1.9.0 (#1471)
    
    Bumps [unicode-segmentation](https://github.com/unicode-rs/unicode-segmentation) from 1.8.0 to 1.9.0.
    - [Release notes](https://github.com/unicode-rs/unicode-segmentation/releases)
    - [Commits](https://github.com/unicode-rs/unicode-segmentation/commits)
    
    ---
    updated-dependencies:
    - dependency-name: unicode-segmentation
      dependency-type: indirect
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 045bb68b4efc5f157cd9bfbc530f3dc324015833
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 7 12:11:33 2022 -0800

    build(deps): bump rustls-pemfile from 0.2.1 to 0.3.0 (#1470)
    
    Bumps [rustls-pemfile](https://github.com/rustls/pemfile) from 0.2.1 to 0.3.0.
    - [Release notes](https://github.com/rustls/pemfile/releases)
    - [Commits](https://github.com/rustls/pemfile/compare/v/0.2.1...v/0.3.0)
    
    ---
    updated-dependencies:
    - dependency-name: rustls-pemfile
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit bf8916d7404926899fa56b4424696bc3b28551bd
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 7 12:11:16 2022 -0800

    dependabot: Ignore leaf updates (#1464)
    
    `futures`, `prost, and `tracing` release top level crates, so there's no
    need to be notified of leaf crate updates.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 3bfb885f5995c051db718835d9c4f34bc4a8eb02
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 7 11:30:03 2022 -0800

    build(deps): bump tracing-subscriber from 0.3.7 to 0.3.8 (#1465)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.7 to 0.3.8.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.7...tracing-subscriber-0.3.8)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f318397db36b0c7a957d5666997df395c07602e2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Feb 7 11:28:51 2022 -0800

    build(deps): bump futures from 0.3.19 to 0.3.21 (#1468)
    
    Bumps [futures](https://github.com/rust-lang/futures-rs) from 0.3.19 to 0.3.21.
    - [Release notes](https://github.com/rust-lang/futures-rs/releases)
    - [Changelog](https://github.com/rust-lang/futures-rs/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/futures-rs/compare/0.3.19...0.3.21)
    
    ---
    updated-dependencies:
    - dependency-name: futures
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5c1ec4f5dc41964bc37b22b3987f378c786c4f3b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 4 07:32:07 2022 -0800

    build(deps): bump clang-sys from 1.3.0 to 1.3.1 (#1461)
    
    Bumps [clang-sys](https://github.com/KyleMayes/clang-sys) from 1.3.0 to 1.3.1.
    - [Release notes](https://github.com/KyleMayes/clang-sys/releases)
    - [Changelog](https://github.com/KyleMayes/clang-sys/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/KyleMayes/clang-sys/compare/v1.3.0...v1.3.1)
    
    ---
    updated-dependencies:
    - dependency-name: clang-sys
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5e472e733c7d67ff4223714d6abb10602dd35b96
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Feb 4 06:42:32 2022 -0800

    build(deps): bump tracing from 0.1.29 to 0.1.30 (#1462)

commit 7708b09de3ee7897e51b87ea615d5dc9f23f5b6f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Feb 3 08:20:12 2022 -0800

    build(deps): bump libc from 0.2.116 to 0.2.117 (#1459)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.116 to 0.2.117.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.116...0.2.117)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8aa474ea4170c207822c629aa7fc004cf8879fe6
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 2 11:59:03 2022 -0800

    clippy: Disallow lock and instant types from `std` (#1458)
    
    We use `parking_lot` locks throughout our code. This change disallows the
    introduction of std::sync's locks.
    
    This change also enforces the use of `tokio::time::Instant`, which
    allows for a mockable time source in tests.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit bffdb1aad8bb5479316a401de148a290b001dd44
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 1 12:03:45 2022 -0800

    Ban uses of `Instant` operations that can panic (#1456)
    
    When comparing instances, we should use saturating varieties to help
    ensure that we can't hit panics.
    
    This change bans uses of `std::time::Instant::{duration_since, elapsed,
    sub}` via clippy. Uses are ported to using `Instant::saturating_duration_since`.
    
    Related to linkerd/linkerd2#7748
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit d9dbdece1edf765b6c8d9ccdd16ca611c70c8669
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 31 11:03:54 2022 -0800

    build(deps): bump parking_lot from 0.11.2 to 0.12.0 (#1452)
    
    Bumps [parking_lot](https://github.com/Amanieu/parking_lot) from 0.11.2 to 0.12.0.
    - [Release notes](https://github.com/Amanieu/parking_lot/releases)
    - [Changelog](https://github.com/Amanieu/parking_lot/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/Amanieu/parking_lot/compare/0.11.2...0.12.0)
    
    ---
    updated-dependencies:
    - dependency-name: parking_lot
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Signed-off-by: Oliver Gould <ver@buoyant.io>
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit b297560afdbfd72bd910af9ab17402f554e53972
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 31 10:19:04 2022 -0800

    build(deps): bump lock_api from 0.4.5 to 0.4.6 (#1454)
    
    Bumps [lock_api](https://github.com/Amanieu/parking_lot) from 0.4.5 to 0.4.6.
    - [Release notes](https://github.com/Amanieu/parking_lot/releases)
    - [Changelog](https://github.com/Amanieu/parking_lot/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/Amanieu/parking_lot/compare/lock_api-0.4.5...lock_api-0.4.6)
    
    ---
    updated-dependencies:
    - dependency-name: lock_api
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 62340fb9f9c208c7a55d0aefd3bfa8c76383cc00
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 31 10:18:28 2022 -0800

    build(deps): bump libc from 0.2.115 to 0.2.116 (#1453)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.115 to 0.2.116.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.115...0.2.116)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ae4aaafe776682f62a910d2a9914ec05147b350b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 31 10:17:02 2022 -0800

    deny: Don't skip everything in hyper's tree (#1455)
    
    When we skip-tree hyper, we miss out on all dupes that may impact tokio,
    etc.
    
    Thsi change narrowly exempts the use of iota v4.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit ccf84e6d4b88d6aa9c1c5df85109daaa350606da
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 31 09:58:20 2022 -0800

    build(deps): bump EmbarkStudios/cargo-deny-action from 1.2.9 to 1.2.10 (#1451)
    
    Bumps [EmbarkStudios/cargo-deny-action](https://github.com/EmbarkStudios/cargo-deny-action) from 1.2.9 to 1.2.10.
    - [Release notes](https://github.com/EmbarkStudios/cargo-deny-action/releases)
    - [Commits](https://github.com/EmbarkStudios/cargo-deny-action/compare/f2d2f98857d524436b31aa639bac5edc10863b08...2a55392931cddc0ae1d7397515fd0951d39ebaf2)
    
    ---
    updated-dependencies:
    - dependency-name: EmbarkStudios/cargo-deny-action
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 6ea3c620b41c110cdbf8ceeceb8de3c2bff08846
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jan 28 08:19:33 2022 -0800

    build(deps): bump libc from 0.2.114 to 0.2.115 (#1449)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.114 to 0.2.115.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.114...0.2.115)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5ed9d496910a52f6a9db2f48ba6a2c324aedee87
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jan 28 08:16:17 2022 -0800

    build(deps): bump tokio from 1.15.0 to 1.16.1 (#1450)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.15.0 to 1.16.1.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.15.0...tokio-1.16.1)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 1129ea9a393bf43fa5d0797e81a79bd102047cb7
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jan 27 07:20:46 2022 -0800

    build(deps): bump socket2 from 0.4.3 to 0.4.4 (#1447)

commit e3ecd50a6b98c3f25c15aa0f37ce16c77028b85b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jan 27 07:19:42 2022 -0800

    build(deps): bump h2 from 0.3.10 to 0.3.11 (#1448)

commit b8b1fa9162d592f3b1ffbb5df9e52662a53a67a0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jan 26 08:52:06 2022 -0800

    build(deps): bump tracing-subscriber from 0.3.6 to 0.3.7 (#1446)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.6 to 0.3.7.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.6...tracing-subscriber-0.3.7)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 502c3af343e87b32211f02cfa74c9cff1273fdef
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jan 26 08:28:27 2022 -0800

    build(deps): bump serde from 1.0.135 to 1.0.136 (#1445)
    
    Bumps [serde](https://github.com/serde-rs/serde) from 1.0.135 to 1.0.136.
    - [Release notes](https://github.com/serde-rs/serde/releases)
    - [Commits](https://github.com/serde-rs/serde/compare/v1.0.135...v1.0.136)
    
    ---
    updated-dependencies:
    - dependency-name: serde
      dependency-type: indirect
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8f38eb31aa8374941e3b82182ba33b5604ad368e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 25 15:00:30 2022 -0800

    devcontainer: Fix kubectl path (#1441)
    
    * Adds `jq`.
    * Adds a _devcontainer_ CI workflow
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit e498f0d5606e35bc9c1344a97931f7da2904abd9
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jan 25 12:03:09 2022 -0800

    build(deps): bump libc from 0.2.113 to 0.2.114 (#1444)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.113 to 0.2.114.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.113...0.2.114)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ea376ff58de2ef2cf18e3a6380fae80a50b68dd7
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 25 11:31:05 2022 -0800

    dependabot: Allow updates for transitive dependencies (#1443)
    
    Dependabot seems to only create updates for direct dependencies. This
    change ensures we receive updates for all dependencies.
    
        Updating git repository `https://github.com/linkerd/webpki`
        Updating crates.io index
        Updating anyhow v1.0.45 -> v1.0.53
        Updating bumpalo v3.8.0 -> v3.9.1
        Updating cmake v0.1.46 -> v0.1.48
        Updating crc32fast v1.2.1 -> v1.3.1
          Adding fastrand v1.7.0
        Updating fixedbitset v0.4.0 -> v0.4.1
        Updating getrandom v0.2.3 -> v0.2.4
        Updating httpdate v1.0.1 -> v1.0.2
        Updating itertools v0.10.1 -> v0.10.3
        Updating js-sys v0.3.55 -> v0.3.56
        Updating libloading v0.7.1 -> v0.7.3
        Updating once_cell v1.8.0 -> v1.9.0
        Updating pin-project-lite v0.2.7 -> v0.2.8
        Updating ppv-lite86 v0.2.15 -> v0.2.16
        Updating proc-macro2 v1.0.32 -> v1.0.36
        Updating quote v1.0.10 -> v1.0.15
        Updating rustls v0.20.1 -> v0.20.2
        Updating ryu v1.0.5 -> v1.0.9
        Updating serde v1.0.130 -> v1.0.135
        Updating smallvec v1.7.0 -> v1.8.0
        Updating syn v1.0.84 -> v1.0.86
        Updating tempfile v3.2.0 -> v3.3.0
        Updating thread_local v1.1.3 -> v1.1.4
        Updating tokio-io-timeout v1.1.1 -> v1.2.0
        Updating version_check v0.9.3 -> v0.9.4
        Updating wasm-bindgen v0.2.78 -> v0.2.79
        Updating wasm-bindgen-backend v0.2.78 -> v0.2.79
        Updating wasm-bindgen-macro v0.2.78 -> v0.2.79
        Updating wasm-bindgen-macro-support v0.2.78 -> v0.2.79
        Updating wasm-bindgen-shared v0.2.78 -> v0.2.79
        Updating web-sys v0.3.55 -> v0.3.56
        Updating which v4.2.2 -> v4.2.4
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit d69aa907c264cf6bead294e4e55c7b31d6a49b05
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 24 07:01:04 2022 -0800

    build(deps): bump serde_json from 1.0.75 to 1.0.78 (#1440)

commit 1d62fd52ed9b708a831d3c437a6a068560ebfffb
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jan 21 11:22:29 2022 -0800

    access-log: Add JSON support (#1350)
    
    This change adds the option to configure the access logging layer to
    output JSON rather than the Apache Common access log format.
    This is configured by the `LINKERD2_PROXY_ACCESS_LOG`
    environment variable. When set to `json`, JSON-formatted logs are
    emitted; and it must be set to `apache` for apache-formatted
    logging.

commit d4dfe9125d8470f843e603596f41815f8e0ae33d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jan 21 10:28:57 2022 -0800

    build(deps): bump socket2 from 0.4.2 to 0.4.3 (#1439)

commit 3f86e7326befb9dfc2c333c66916390285d1631f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jan 21 08:20:13 2022 -0800

    build(deps): bump libc from 0.2.112 to 0.2.113 (#1438)

commit f5e9cea4698cd4cf74f791b74168cda161f70552
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 20 13:55:24 2022 -0800

    trace: Apache Common Log Format access logging (#1319)
    
    This branch builds on @tustvold's work in #601. The original PR
    description from that branch:
    
    > Access logging is very important functionality for my team as we wish
    > to maintain feature-parity with our existing AWS ALB-based approach.
    > This functionality was requested
    > [here](https://github.com/linkerd/linkerd2/issues/1913) and was marked
    > as help wanted, so thought I'd take a stab at implementing it.
    >
    > Creating as a draft as still needs more testing and benchmarking, and
    > I'm new to tower and so might have made some rookie errors. However, I
    > wanted to create a draft as an opportunity to get some early feedback.
    >
    > The basic design consists of an AccessLogLayer that instruments both
    > requests and responses that flow through it, in a similar manner to
    > how handle_time is already computed. I'm not a massive fan of this,
    > but it was the only way I could easily see to get accurate processing
    > time metrics. I've tried to avoid any memory allocation on the hot
    > path, although there are possibly more atomic increments than I would
    > like. The performance impact with the feature disabled, i.e.
    > LINKERD2_PROXY_ACCESS_LOG_FILE, not set should be minimal.
    >
    > The results of this instrumentation are then sent over a mpsc channel
    > to an AccessLogCollector that writes them in a space-delimited format
    > to a file specified as an environment variable. It buffers in memory
    > and flushes on termination and on write if more than
    > FLUSH_TIMEOUT_SECS since the last flush. This makes the access logging
    > best effort much like AWS ALBs.
    >
    > An example deployment scenario using this functionality might deploy a
    > fluent-bit sidecar to ship the logs, or write to /dev/stderr and use a
    > log shipper deployed as a DaemonSet.
    
    The additional changes in this branch are:
    
     - Updated against the latest state of the `main` branch.
     - Changed the `tracing` configuration to use per-layer filtering, so that
       the access log layer _only_ sees access log spans, while the stdout
       logging layer does not see the access log spans (although, it _could_
       if we wanted it to...)
     - Changed the format for outputting the access log to the Apache Common
       Log Format. Note that this format does *not* include all the data that
       the access log spans currently collect; I excluded that data so that
       the output is compatible with tools that ingest the Apache log format.
       In a follow-up PR, we can add the ability to control what format the
       access log is written in, and add an alternative format that includes
       all the access log data that Linkerd's spans can collect (I suggest
       newline-delimited JSON for this).
    
    Of course, a huge thank you to @tustvold for all their work on this; I
    only updated the branch with the latest changes and made some minor
    improvements. :)
    
    Co-authored-by: Raphael Taylor-Davies <r.taylordavies@googlemail.com>

commit 8f7be6f52c7a18326ff2be94f7613ba9d8252b6d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 20 10:11:07 2022 -0800

    test: remove `env::set_var` call in test logging initialization  (#1437)
    
    Per rust-lang/rust#90308, this is potentially a data race. In practice,
    I don't think it was actually problematic here, but it also wasn't doing
    anything of value, so we should remove it.
    
    This is currently the only `env::set_var` or `env::remove_var` call in
    the proxy.
    
    To prevent uses of these functions in the future, I also added a
    `disallowed-methods` configuration in `.clippy.toml` to emit a
    warning for any uses of `std::env::set_var` and
    `std::env::remove_var`. Unfortunately, this required adding a
    `deny` attribute basically everywhere, which is why this diff touches
    so many files.
    
    Closes linkerd/linkerd2#7651

commit d3cf6a0fda808bfc8950cddd3797d164d9958dd8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 17 10:01:31 2022 -0800

    build(deps): bump tracing-subscriber from 0.3.5 to 0.3.6 (#1435)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.5 to 0.3.6.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.5...tracing-subscriber-0.3.6)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f9f6111d18536dc912c880355c93ac1e2203f444
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 17 10:01:01 2022 -0800

    build(deps): bump serde_json from 1.0.74 to 1.0.75 (#1436)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.74 to 1.0.75.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.74...v1.0.75)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 85a02f1d0a3f4c1cecb4a74279302ff6a849cdcc
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 12 11:41:54 2022 -0800

    Add a devcontainer config (#1432)
    
    GitHub supports [dev containers][dc] to describe reproducible
    development environments (e.g. for use from VS code). This change
    introduces a devcontainer.json and Dockerfile to support container-based
    development. This setup configures docker-in-docker so that docker and
    k3d can be run inside the dev container.
    
    This base configuration can be amended with per-user personalizations
    via a [dotfiles][df] repo. For example: github.com/olix0r/dotfiles.
    
    [dc]: https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/configuring-codespaces-for-your-project
    [df]: https://docs.github.com/en/codespaces/customizing-your-codespace/personalizing-codespaces-for-your-account
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 809d4d30b4ea3cf1373d3bae6ee527ae87a1a37a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 10 08:51:13 2022 -0800

    build(deps): bump indexmap from 1.7.0 to 1.8.0 (#1433)
    
    Bumps [indexmap](https://github.com/bluss/indexmap) from 1.7.0 to 1.8.0.
    - [Release notes](https://github.com/bluss/indexmap/releases)
    - [Changelog](https://github.com/bluss/indexmap/blob/master/RELEASES.rst)
    - [Commits](https://github.com/bluss/indexmap/compare/1.7.0...1.8.0)
    
    ---
    updated-dependencies:
    - dependency-name: indexmap
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 526c0dfa164aa7b99a873384a2b9ba7a7137c201
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 7 15:40:42 2022 -0800

    Update Rust to v1.56.1 (#1431)
    
    Some development tooling (like recent versions of cargo-deny) depends on
    Rust v1.56.1. This change updates proxy build/CI to use this version for
    consistency.

commit a5ba9e086daa04893968e695e6f7afe8b29b4f88
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jan 7 08:04:54 2022 -0800

    build(deps): bump h2 from 0.3.9 to 0.3.10 (#1430)

commit 98e8b2e23ec8fc88236f5faa4b9505a798ef1d4d
Author: Aaron Friel <mayreply@aaronfriel.com>
Date:   Tue Jan 4 10:58:28 2022 -0800

    tests: rename 'metrics' addr to 'admin' (#1429)
    
    This change renames the address in integration tests to be consistent
    with the name used in the proxy.
    
    Signed-off-by: Aaron Friel <mayreply@aaronfriel.com>

commit f1df316ec45a725d5ed8022cb75207a36195247d
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 3 13:13:16 2022 -0800

    Decouple client connection metadata from the I/O type (#1426)
    
    Some information about client connections may not be known a priori. For
    example, the local socket address is only known after the connection is
    established and the TLS handshake may negotiate additional information
    (like the ALPN protocol).
    
    We can use traits on the I/O type, but this means that all wrappers
    types need implement all of these traits. This is cumbersome.
    
    This change replaces the `tower::make::MakeConnection` helper trait with
    a new `linkerd_stack::MakeConnection` trait that explicity returns a
    `Metadata` instance so that connectors can return arbitrary information.
    
    Now, the TCP connector returns a `Local<ClientAddr>` and the TLS
    connector conditionally includes the negotiated protocol.
    
    This change sets up the ability for the HTTP client to negotiate
    protocol upgrading via ALPN instead of using per-request headers.

commit 56a4511cb46f053c1302fc1401f0db1dd49c80c4
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jan 3 08:37:17 2022 -0800

    build(deps): bump serde_json from 1.0.73 to 1.0.74 (#1427)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.73 to 1.0.74.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.73...v1.0.74)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 97fbeab59c3d6a123defe6a38f198451102be6a8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat Jan 1 09:24:11 2022 -0800

    build(deps): bump http from 0.2.5 to 0.2.6 (#1424)
    
    Bumps [http](https://github.com/hyperium/http) from 0.2.5 to 0.2.6.
    - [Release notes](https://github.com/hyperium/http/releases)
    - [Changelog](https://github.com/hyperium/http/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/http/compare/v0.2.5...v0.2.6)
    
    ---
    updated-dependencies:
    - dependency-name: http
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>

commit ea65b730c6b3b8a7bc5f6247dfe250c755b03bdd
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat Jan 1 08:56:49 2022 -0800

    build(deps): bump pin-project from 1.0.9 to 1.0.10 (#1425)
    
    Bumps [pin-project](https://github.com/taiki-e/pin-project) from 1.0.9 to 1.0.10.
    - [Release notes](https://github.com/taiki-e/pin-project/releases)
    - [Changelog](https://github.com/taiki-e/pin-project/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/taiki-e/pin-project/compare/v1.0.9...v1.0.10)
    
    ---
    updated-dependencies:
    - dependency-name: pin-project
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 925789cba130ed0e531c069f84bb86e126135242
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Dec 30 07:34:51 2021 -0800

    build(deps): bump tracing-subscriber from 0.3.4 to 0.3.5 (#1423)

commit 02943cf198e66f4f16c94557a0270bd3643aca57
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Dec 27 09:01:31 2021 -0800

    build(deps): bump pin-project from 1.0.8 to 1.0.9 (#1422)
    
    Bumps [pin-project](https://github.com/taiki-e/pin-project) from 1.0.8 to 1.0.9.
    - [Release notes](https://github.com/taiki-e/pin-project/releases)
    - [Changelog](https://github.com/taiki-e/pin-project/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/taiki-e/pin-project/compare/v1.0.8...v1.0.9)
    
    ---
    updated-dependencies:
    - dependency-name: pin-project
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f0bd122307e54a3e1c4513cc312bc7f7d5f74f10
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sun Dec 26 09:40:03 2021 -0800

    build(deps): bump tracing-subscriber from 0.3.3 to 0.3.4 (#1421)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.3 to 0.3.4.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.3...tracing-subscriber-0.3.4)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 08060eeb44122083bdad9e613c68546993934a97
Author: Matei David <matei@buoyant.io>
Date:   Thu Dec 23 18:55:46 2021 +0200

    Handle HTTP traffic over opaque transport connections (#1416)
    
    If an endpoint is set as opaque, but its logical service is not marked
    as opaque, clients may transport HTTP connections with an opaque
    transport header. Inbound proxies currently fail to proxy these connections.
    
    Through this change, when an inbound proxy receives a direct connection
    with an opaque transport header--and that header includes a protocol and
    no target service name--the connection will now be properly handled by the
    HTTP stack.

commit de885baaeb700fc72a8aeb809b3748122534d5d7
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Dec 21 11:32:29 2021 -0800

    build(deps): bump linkerd2-proxy-api from 0.3.0 to 0.3.1 (#1419)
    
    Bumps linkerd2-proxy-api from 0.3.0 to 0.3.1.
    
    ---
    updated-dependencies:
    - dependency-name: linkerd2-proxy-api
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ff98286c5501283ee6a5a5eac1434171ca22a282
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Dec 21 10:46:43 2021 -0800

    build(deps): bump num_cpus from 1.13.0 to 1.13.1 (#1418)
    
    Bumps [num_cpus](https://github.com/seanmonstar/num_cpus) from 1.13.0 to 1.13.1.
    - [Release notes](https://github.com/seanmonstar/num_cpus/releases)
    - [Changelog](https://github.com/seanmonstar/num_cpus/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/seanmonstar/num_cpus/compare/v1.13.0...v1.13.1)
    
    ---
    updated-dependencies:
    - dependency-name: num_cpus
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a43d4c7b60028f95a4df1390bb6af195b8c1d327
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Dec 20 11:44:46 2021 -0800

    build(deps): bump serde_json from 1.0.72 to 1.0.73 (#1407)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.72 to 1.0.73.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.72...v1.0.73)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 3940c5b3554aadad8bae3b0cfabadf878ca2559c
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Dec 20 08:05:45 2021 -0800

    build(deps): bump futures from 0.3.18 to 0.3.19 (#1415)
    
    Bumps [futures](https://github.com/rust-lang/futures-rs) from 0.3.18 to 0.3.19.
    - [Release notes](https://github.com/rust-lang/futures-rs/releases)
    - [Changelog](https://github.com/rust-lang/futures-rs/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/futures-rs/compare/0.3.18...0.3.19)
    
    ---
    updated-dependencies:
    - dependency-name: futures
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit c92b3a2bef237ecb15f060f6fd372140ed19d3b8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 17 14:38:37 2021 -0800

    build(deps): bump libc from 0.2.110 to 0.2.112 (#1408)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.110 to 0.2.112.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.110...0.2.112)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 556e07bd7611399311f5e6f0dcdd302f6f38b805
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 17 13:02:32 2021 -0800

    build(deps): bump tokio-rustls from 0.23.1 to 0.23.2 (#1412)
    
    Bumps [tokio-rustls](https://github.com/tokio-rs/tls) from 0.23.1 to 0.23.2.
    - [Release notes](https://github.com/tokio-rs/tls/releases)
    - [Commits](https://github.com/tokio-rs/tls/commits)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-rustls
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 6cab4bba111d924f9fa3e2383c689133980a849d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 17 13:01:54 2021 -0800

    build(deps): bump boring from 1.1.6 to 2.0.0 (#1413)
    
    Bumps [boring](https://github.com/cloudflare/boring) from 1.1.6 to 2.0.0.
    - [Release notes](https://github.com/cloudflare/boring/releases)
    - [Changelog](https://github.com/cloudflare/boring/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/cloudflare/boring/commits)
    
    ---
    updated-dependencies:
    - dependency-name: boring
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit dba2c735a191afc704139e9497dc8df32929da8b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 17 11:15:17 2021 -0800

    build(deps): bump actions/upload-artifact from 2.3.0 to 2.3.1 (#1409)
    
    Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2.3.0 to 2.3.1.
    - [Release notes](https://github.com/actions/upload-artifact/releases)
    - [Commits](https://github.com/actions/upload-artifact/compare/da838ae9595ac94171fa2d4de5a2f117b3e7ac32...82c141cc518b40d92cc801eee768e7aafc9c2fa2)
    
    ---
    updated-dependencies:
    - dependency-name: actions/upload-artifact
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5614aeeb020f34e7cd6d4e84e116a26176a0186e
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Dec 17 11:13:29 2021 -0800

    inbound: Simplify GatewayIo type (#1414)
    
    Since the legacy gateway mode has been removed from the proxy, we no
    longer need to support multiple I/O types for the gateway. This change
    drops the unused I/O variant from the GatewayIo type.

commit 9b3c968c78361f954bbcc32cbc233edc37422a63
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 17 09:25:55 2021 -0800

    build(deps): bump tokio from 1.14.0 to 1.15.0 (#1410)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.14.0 to 1.15.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.14.0...tokio-1.15.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit d365aa3398aab8d700a2fd99d74f937c3e3c4718
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 10 07:23:03 2021 -0800

    build(deps): bump async-trait from 0.1.51 to 0.1.52 (#1402)

commit 3b7ce83b589234904b0525fb68a3de8d89156609
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 10 07:22:09 2021 -0800

    build(deps): bump libc from 0.2.109 to 0.2.110 (#1403)

commit 39f17eb40e4d2eb5ef479d8ebf2d9e5599c5791e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 10 07:21:47 2021 -0800

    build(deps): bump hyper from 0.14.15 to 0.14.16 (#1404)

commit 6ab8f1dc6430f4d4c052cb0cac9a0f49ec82dcba
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Dec 10 07:21:01 2021 -0800

    build(deps): bump h2 from 0.3.8 to 0.3.9 (#1405)

commit 35c6cfc1d09e9b432dc326db38efbb263580974e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Dec 9 10:25:23 2021 -0800

    build(deps): bump tonic from 0.6.1 to 0.6.2 (#1400)
    
    Bumps [tonic](https://github.com/hyperium/tonic) from 0.6.1 to 0.6.2.
    - [Release notes](https://github.com/hyperium/tonic/releases)
    - [Changelog](https://github.com/hyperium/tonic/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/tonic/compare/v0.6.1...v0.6.2)
    
    ---
    updated-dependencies:
    - dependency-name: tonic
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f6db5c647bd2e0420d4bf1564cb8ed9195ad3ee7
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Dec 9 10:25:12 2021 -0800

    build(deps): bump tonic-build from 0.6.0 to 0.6.2 (#1399)
    
    Bumps [tonic-build](https://github.com/hyperium/tonic) from 0.6.0 to 0.6.2.
    - [Release notes](https://github.com/hyperium/tonic/releases)
    - [Changelog](https://github.com/hyperium/tonic/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/tonic/compare/v0.6.0...v0.6.2)
    
    ---
    updated-dependencies:
    - dependency-name: tonic-build
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 70923f3fcde94f3ffc028085e35b8e15f7577c94
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Dec 9 10:24:33 2021 -0800

    build(deps): bump h2 from 0.3.7 to 0.3.8 (#1401)
    
    Bumps [h2](https://github.com/hyperium/h2) from 0.3.7 to 0.3.8.
    - [Release notes](https://github.com/hyperium/h2/releases)
    - [Changelog](https://github.com/hyperium/h2/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/h2/compare/v0.3.7...v0.3.8)
    
    ---
    updated-dependencies:
    - dependency-name: h2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 832be29f21cb8b4d6b0e7029b65fa306dcdea54d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Dec 8 13:07:55 2021 -0800

    build(deps): bump actions/upload-artifact from 2.2.4 to 2.3.0 (#1397)
    
    Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2.2.4 to 2.3.0.
    - [Release notes](https://github.com/actions/upload-artifact/releases)
    - [Commits](https://github.com/actions/upload-artifact/compare/27121b0bdffd731efa15d66772be8dc71245d074...da838ae9595ac94171fa2d4de5a2f117b3e7ac32)
    
    ---
    updated-dependencies:
    - dependency-name: actions/upload-artifact
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e4c7c01d43f0ecc99e5d6e9e23e5e201603e418d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Dec 8 13:07:06 2021 -0800

    build(deps): bump actions/download-artifact from 2.0.10 to 2.1.0 (#1398)
    
    Bumps [actions/download-artifact](https://github.com/actions/download-artifact) from 2.0.10 to 2.1.0.
    - [Release notes](https://github.com/actions/download-artifact/releases)
    - [Commits](https://github.com/actions/download-artifact/compare/3be87be14a055c47b01d3bd88f8fe02320a9bb60...f023be2c48cc18debc3bacd34cb396e0295e2869)
    
    ---
    updated-dependencies:
    - dependency-name: actions/download-artifact
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 919289425ad7220007647ab53ee9e1d35165d844
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 6 14:35:31 2021 -0800

    Remove macOS-specific transport label tests (#1396)
    
    The proxy doesn't actually run on macOS, so there's not a lot of value
    in having macOS-specific tests, especially as these tests aren't
    executed as a part of CI.
    
    This change removes two macOS-specific transport label tests.

commit cf721013d2cad49f80a08980bf69b259b1f241ea
Author: jem <jem-xyz@pm.me>
Date:   Mon Dec 6 11:48:21 2021 -0800

    Fixes for compiling on macOS (#1392)
    
    Several tests failed to compile, as they are not exercised in CI.
    
    Signed-off-by: Jem McElwain <jmcelwain@gmail.com>

commit 66130a3e98a95b1e70ec13738795d78d1037b01b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Dec 6 10:29:16 2021 -0800

    build(deps): bump EmbarkStudios/cargo-deny-action from 1.2.6 to 1.2.9 (#1394)
    
    Bumps [EmbarkStudios/cargo-deny-action](https://github.com/EmbarkStudios/cargo-deny-action) from 1.2.6 to 1.2.9.
    - [Release notes](https://github.com/EmbarkStudios/cargo-deny-action/releases)
    - [Commits](https://github.com/EmbarkStudios/cargo-deny-action/compare/0ca727bbae7b7b578b9a5f98186caac35aa2a00d...f2d2f98857d524436b31aa639bac5edc10863b08)
    
    ---
    updated-dependencies:
    - dependency-name: EmbarkStudios/cargo-deny-action
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 15090a4607ef8021a62bf03ec47324569711bd03
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Dec 6 10:14:25 2021 -0800

    build(deps): bump libc from 0.2.108 to 0.2.109 (#1395)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.108 to 0.2.109.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.108...0.2.109)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8df696d00296af595f707c42df4b8f1c84dbb108
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 30 14:06:01 2021 -0800

    ci: Skip unit tests in coverage report (#1390)
    
    The coverage workflow is misconfigured so that it fails to run:
    `cargo-tarpaulin` has command line arguments that don't match other
    cargo commands (`--packages` instead of `--package`, which cannot be
    mixed with `--workspace`). Furthermore, it doesn't seem that we actually
    benefit from running tarpaulin over our non-integration tests, since the
    coverage reports are not merged.

commit 8a5659f17823fd30fca3847a1a8dfbc713523eda
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Nov 30 07:58:32 2021 -0800

    build(deps): bump tracing-subscriber from 0.3.2 to 0.3.3 (#1391)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.2 to 0.3.3.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.2...tracing-subscriber-0.3.3)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a92da63c1cf237b6c4ada8e94e2c8eb22110bd6e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat Nov 27 21:06:10 2021 -0800

    build(deps): bump serde_json from 1.0.71 to 1.0.72 (#1389)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.71 to 1.0.72.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.71...v1.0.72)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 4d3f3475a66b5fbdf3a98c7614b095f4dc22cb93
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Nov 23 08:19:01 2021 -0800

    build(deps): bump futures from 0.3.17 to 0.3.18 (#1388)
    
    Bumps [futures](https://github.com/rust-lang/futures-rs) from 0.3.17 to 0.3.18.
    - [Release notes](https://github.com/rust-lang/futures-rs/releases)
    - [Changelog](https://github.com/rust-lang/futures-rs/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/futures-rs/compare/0.3.17...0.3.18)
    
    ---
    updated-dependencies:
    - dependency-name: futures
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e85c872e3c1bc6f39ae9394b363364fac1a36b42
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 22 15:00:33 2021 -0800

    build(deps): bump libc from 0.2.107 to 0.2.108 (#1386)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.107 to 0.2.108.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.107...0.2.108)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit df808f17d44378410f566625291b5793975055d1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 22 15:00:07 2021 -0800

    build(deps): bump tracing-subscriber from 0.3.1 to 0.3.2 (#1387)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.3.1 to 0.3.2.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.3.1...tracing-subscriber-0.3.2)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5a97236a96520e3ffe570021756d926692253ee1
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 18 15:11:16 2021 -0800

    outbound: Use per-route services in routing stack (#1380)
    
    The outbound proxy currently maintains a `Proxy` instance for each
    profile-defined `Route`. This allows the router to use a single
    underlying logical service, but this prevents per-route logic from
    influencing the logical target to which the request is dispatched.
    
    This change modifies the outbound stack to use an alternate profile
    router that dispatches over per-route `Service`s instead of per-route
    `Proxy`s. This is possible because the outbound logical stack is
    buffered (and implements `Clone`), while the inbound stack is not.
    
    To support this, the following changes have been made:
    
    * The `linkerd_app_core::dst` module has been eliminated in favor of
      inbound- and outbound-specific Route target types;
    * `linkerd_http_classify::Classify` now implements `Service` in addition
      to `Proxy`;
    * `linkerd_retry::Retry` now implements `Service` instead of `Proxy`;
    * `linkerd_service_profiles`now implements two caching routers:
      `NewServiceRouter` for `Service`s and `NewProxyRouter` for `Proxy`s;
    * The `linkerd_stack::ProxyService` helper has been removed, as it's not
      used; and
    * Various unneeded `http::BoxResponse` layers have been removed from the
      outound stack.

commit 2f19d9c7ce0e7d367f6384e31fd3b9bc4aea6567
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 18 14:51:09 2021 -0800

    ci: Fix coverage workflow (#1382)
    
    * Avoid building the binary target, since it slows down the build
    * Use --skip-clean to use the cached build
    * Fetch a pre-build tarpaulin binary (saves ~5m)
    * Rename `flaky_tests` feature to `flakey-in-ci`
    * Add a `flakey-in-coverage` feature
    * Mark broken tests with `ignore` (not feature-gated)
    * Enable all tests by default

commit a62181abe2db1f3fe995ebb6e124fa8de5f39c85
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Nov 18 13:46:47 2021 -0800

    build(deps): bump tower from 0.4.10 to 0.4.11 (#1385)
    
    Bumps [tower](https://github.com/tower-rs/tower) from 0.4.10 to 0.4.11.
    - [Release notes](https://github.com/tower-rs/tower/releases)
    - [Commits](https://github.com/tower-rs/tower/compare/tower-0.4.10...tower-0.4.11)
    
    ---
    updated-dependencies:
    - dependency-name: tower
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 38240b13c7e126cb2ff16d2a2c28942fc1a244bf
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 18 13:15:09 2021 -0800

    ci: Run dependabot updates at 2AM PST (#1384)
    
    In order to prevent dependabot updates from consuming CI resources
    during working hours, this change schedules dependabot updates to run at
    10:00 UTC.

commit fff150a39ddc7fbcd2c77570ba352466a5c2f0a2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Nov 18 12:25:50 2021 -0800

    build(deps): bump serde_json from 1.0.70 to 1.0.71 (#1383)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.70 to 1.0.71.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.70...v1.0.71)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit c92ef3e8c0775eb97bdba446d49a99e031454238
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Nov 17 12:32:56 2021 -0800

    build(deps): bump hyper from 0.14.14 to 0.14.15 (#1381)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.14 to 0.14.15.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.14...v0.14.15)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 4422c6d1f93233901a2c9a6108301acd2f75d069
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 16 14:49:35 2021 -0800

    app: Move retry types into the app-outbound crate (#1378)
    
    The retry crate is hardcoded to use the `linkerd_app_core::dst::Route`
    type as its target. This is inflexible, especially if we want to
    reorganize the outbound stack to support things like header-based
    overrides.
    
    This change movers the retry layer into the outbound crate so that it
    can be changed to use outbound-specific types.
    
    No functional changes.

commit 660289c538f8f30deb7cb16c40960595c81ea372
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Nov 16 14:49:24 2021 -0800

    build(deps): bump tokio from 1.13.0 to 1.14.0 (#1379)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.13.0 to 1.14.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/commits)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit bfc4af68714c0ce2ebd8b287caecfd8241641912
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 15 13:36:29 2021 -0800

    build(deps): bump various dependencies (#1377)
    
        Updating anyhow v1.0.44 -> v1.0.45
        Updating cc v1.0.71 -> v1.0.72
        Updating proc-macro2 v1.0.30 -> v1.0.32
        Updating rustls v0.20.0 -> v0.20.1
        Updating syn v1.0.80 -> v1.0.81
        Updating tinyvec v1.5.0 -> v1.5.1
        Updating tokio-macros v1.5.0 -> v1.5.1
        Updating tonic v0.6.0 -> v0.6.1

commit 3de5c7a00a451432ac72c01bfd199deb0b00b3dc
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 15 11:29:58 2021 -0800

    ci: Fix coverage workflow (#1373)
    
    The coverage workflow has been failing since boring was added as a
    dependency.
    
    This change updates the coverage workflow to include the proper build
    dependencies and splits the build and test running phases into distinct
    steps.
    
    The tests are now run daily instead of weekly so we can more readily
    detect and recover from regressions.

commit 8404c684c16d6af476b37c6e7c7029513357f934
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 15 11:29:29 2021 -0800

    build(deps): bump arbitrary from 1.0.2 to 1.0.3 (#1376)
    
    Bumps [arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.2 to 1.0.3.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/compare/1.0.2...1.0.3)
    
    ---
    updated-dependencies:
    - dependency-name: arbitrary
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 87e776eab99997001befa9a0fa72d01ca8803ec8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 15 11:29:14 2021 -0800

    build(deps): bump serde_json from 1.0.69 to 1.0.70 (#1375)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.69 to 1.0.70.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.69...v1.0.70)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 611d0ae24bf74d974083d1fcecb19d0aa58c5a27
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 15 11:28:59 2021 -0800

    build(deps): bump softprops/action-gh-release from 0.1.13 to 1 (#1374)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 0.1.13 to 1.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/6034af24fba4e5a8e975aaa6056554efe4c794d0...1e07f4398721186383de40550babbdf2b84acfc5)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 6dd16e9914a56e61cb6b0955b202d40d97da7ac8
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 12 10:23:10 2021 -0800

    transport: Improve TCP server error messages (#1372)
    
    The TCP server can fail connections in a few situations:
    
    * `accept(2)` can fail
    * setting thte TCP keepalive can fail
    * getting the client peer address can fail
    
    It's not easy to differentiate these errors when inspecting proxy logs.
    
    This change adds wrapper error types with custom error messages that
    disambiguate the error cause and updates the `Bind` trait to use boxed
    error types (instead of `io::Error`).
    
    Additionally, this change includes the client address when logging
    information/warnings about connection errors in general. This is
    redundant when logging is set at debug, but will be helpful when logging
    is set at the normal level.

commit 611b8eddffb1f8b3f796edc344967feede3f7e27
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 11 13:01:27 2021 -0800

    Eliminate needless compiler directives (#1371)
    
    We've accrued various compiler directives and clippy exceptions that are
    no longer necesary. This change removes these unnecessary settings.
    
    This change also addresses a lint in our integration tests.

commit 6b69261a38bd11f380451da91d52c46bdf222b55
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Nov 10 13:56:03 2021 -0800

    build(deps): bump deflate from 0.9.1 to 1.0.0 (#1370)
    
    Bumps [deflate](https://github.com/image-rs/deflate-rs) from 0.9.1 to 1.0.0.
    - [Release notes](https://github.com/image-rs/deflate-rs/releases)
    - [Changelog](https://github.com/image-rs/deflate-rs/blob/dev/changelog.md)
    - [Commits](https://github.com/image-rs/deflate-rs/commits)
    
    ---
    updated-dependencies:
    - dependency-name: deflate
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 500dc3a1279a0be92a912136a4c54e213236b7a7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Nov 8 16:17:50 2021 -0800

    meshtls-rustls: update to `rustls` 0.20 and `tokio-rustls` 0.23 (#1362)
    
    This branch updates linkerd-meshtls-rustls to use rustls version
    0.20, tokio-rustls 0.23, and webpki 0.22.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 50003a42434def9a6cbc5cac8b5a2eb8d9079e4f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 8 13:44:27 2021 -0800

    meshtls: Add a `boring` backend (#1351)
    
    This change adds a `meshtls-boring` proxy feature that can be used to
    compile the proxy with an alternate TLS implementation. The
    `meshtls-rustls` feature should be disabled to take advantage of this
    alternate backend.
    
    In its current mode, the boring backend is compatible with the existing
    identity credentials and algorithms (specifically TLSv1.3 and
    ECDSA-P256-SHA256 with CHACHA20-POLY1305-SHA256).
    
    In future changes--once `boring` has been updated--we can:
    - Improve error handling, especially for SSL errors
    - Relax deny.toml changes needed by bindgen features
    - Add a FIPS mode
    
    Co-authored-by: Arnar Páll <arnar@netapp.com>

commit 7ae1a217ebb72895c24d43e847181e869108e1fa
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 8 12:40:20 2021 -0800

    build(deps): bump libc from 0.2.106 to 0.2.107 (#1369)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.106 to 0.2.107.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.106...0.2.107)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e992e1db66f15d5efd80332a70107229b44b805f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 8 12:38:41 2021 -0800

    build(deps): bump serde_json from 1.0.68 to 1.0.69 (#1368)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.68 to 1.0.69.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.68...v1.0.69)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7c0612f04aa1ad9570093febe4c9746fda8dfe9b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 8 10:58:47 2021 -0800

    rustls: Tidy std::task imports (#1367)
    
    We use needlessly verbose references to std::task types in the
    `linkerd-meshtls-rustls` crate. This change simplifies these imports.

commit bad5e577cf7089dfe2d16358691255a86f569fbc
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 8 10:05:02 2021 -0800

    meshtls: Move TLS e2e tests into the meshtls crate (#1366)
    
    We'll want to run the same end-to-end tests against all meshtls
    backends. This change moves the rustls `tls_accept` tests into meshtls
    crate.

commit 78df81f7af4624563ec45c5b46f85b03843c8d74
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 8 09:51:52 2021 -0800

    ci: Split jobs into 'fast' and 'slow' workflows (#1365)
    
    This change sets up CI to add support for the boring meshtls backend. We
    put most of the fast jobs into a single workflow and move slower jobs
    into another workflow.
    
    Unit tests are updated to exclude all app-level crates, which take a
    while to compile; and the integration test job now runs all of these app
    tests.

commit 696e7311fcab7ee840c4b82f01660a848c39b0ab
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 8 09:46:24 2021 -0800

    build(deps): bump hex from 0.3 to 0.4 (#1364)

commit e1d7619d5a22e51920b3ae4798eeea7844accddc
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Nov 7 00:16:23 2021 -0700

    Restore rustls credential tests (#1363)
    
    In a prior change, the rustls credential-loading tests were accidentally
    disabled. This change restores these tests and updates them to use the
    newer API.

commit fa2f9989a2a0337de24578523d165f7dbcbaa221
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Nov 5 15:41:34 2021 -0700

    `app-core` should not enable `meshtls-rustls` (#1360)
    
    PR #1359 changed how `linkerd-meshtls`' TLS implementation feature flags
    are enabled. After merging this PR, they should only be enabled by the
    top level `linkerd2-proxy` crate, `linkerd-app-integration`, and any dev
    dependencies that require a working TLS impl to be enabled for tests.
    However, the `linkerd-app-core` crate already had a default-on feature
    flag that enabled `meshtls-rustls`. I hadn't noticed this when working
    on #1359, so I forgot to remove it.
    
    This branch removes it.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit d2b17dee9e494c5d278eec9239b279ff863f2877
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Nov 5 14:08:40 2021 -0700

    meshtls: allow building without any TLS impls enabled (#1359)
    
    Currently, the `linkerd-meshtls` crate cannot be compiled when no TLS
    implementation feature flags are enabled. This is an issue, since it
    means the `rustls` implementation must be enabled by default, requiring
    all crates that depend on `meshtls`, or on a crate that depends on it,
    to expose feature flags for controlling what TLS implementation(s) are
    enabled. This is not ideal.
    
    This branch changes the `meshtls` so that it can compile even when no
    TLS implementations are enabled. The crates which actually need TLS
    implementations to be enabled (the `linkerd2-proxy` application crate,
    and `linkerd-app-integration`) now depend on the `linkerd-meshtls` crate
    for the purposes of enabling feature flags. Other crates that depend on
    `meshtls` can do so without having to propagate its feature flags.
    
    The compile error when no TLS implementations are enabled is moved to
    the `linkerd2-proxy` crate. `linkerd-meshtls` will now panic at runtime
    (rather than failing to compile) if built with all TLS features disabled
    (so that dependent crates don't have to enable its features), but the
    proxy crate statically ensures that this cannot happen when building a
    proxy.

commit 2cc76167423d821ae30a2a9799eac3b4c4e0c456
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 5 10:52:43 2021 -0700

    ci: Make job names uniform (#1358)
    
    It turns out that the github UI doesn't always scope a job's name to a
    workflow (especially in the required checks UI). This change adds
    prefixes to each job name so that jobs end up grouped by workflow in any
    lexical ordering.

commit c0f8fddee7e857cc6769a6f086e72111093ffebf
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 5 10:42:25 2021 -0700

    ci: Split actions into several workflows (#1356)
    
    This change splits our CI workflows into smaller groups so that when
    we need to retry a workflow (i.e. due to CI flakiness), it has a smaller
    blast radius. It also splits out integration tests from other (unit) tests
    which should hopefully get us quicker feedback on crate-level tests.

commit b452971ce84d9deefc20bb507cd7209c0d778e67
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Nov 5 10:00:43 2021 -0700

    meshtls: replace build script with `compile_error!` macro (#1357)
    
    Currently, the `linkerd-meshtls` crate uses a build script to ensure
    that at least one TLS implementation feature flag is enabled when
    compiling the crate. This can be done much more simply using the
    `compile_error!` macro.
    
    Removing the build script may make compilation (very slightly) faster,
    because the build script no longer needs to be compiled. Also, the error
    message is a bit nicer, since it just prints the error, rather than
    "failed to run custom build command".

commit 824d7844c1f6d01c49f5aeef98dad8d4ce423dfe
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 5 08:49:08 2021 -0700

    rustls: Configure the initial TLS client with trust roots (#1355)
    
    2dd7bb8ff changed how rustls configurations are constructed; but it
    didn't properly configure the default client configuration with the
    proxy's trust root. This enables the identity client to establish TLS
    connections with the identity controller during startup.

commit bb26cdc8c9a96161c493ae9b467370dc8c47431e
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 3 15:48:35 2021 -0700

    Introduce `meshtls` facade to hide rustls crate (#1353)
    
    In #1351, we add an alternate identity/mtls implementation that uses
    `boring`. To setup for that, this change introduces a new `meshtls`
    crate that serves as a facade for application crates to depend on,
    independently of the actual crypto implementation.
    
    This change does not change any runtime logic and sets up for #1351 to
    enable an alternate TLS implementation as a build-time configuration.

commit 6e51c64a0245f11e4c376c2485505c154d2de943
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Nov 2 18:45:25 2021 -0700

    build(deps): bump actions/checkout from 2.3.5 to 2.4.0 (#1352)
    
    Bumps [actions/checkout](https://github.com/actions/checkout) from 2.3.5 to 2.4.0.
    - [Release notes](https://github.com/actions/checkout/releases)
    - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/actions/checkout/compare/1e204e9a9253d643386038d443f96446fa156a97...ec3a7ce113134d7a93b817d10a8272cb61118579)
    
    ---
    updated-dependencies:
    - dependency-name: actions/checkout
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 731d12de43ef651d6d9c07e449cae27be5fbc47c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 1 21:59:38 2021 -0700

    reorg: Decouple TLS implementation from proxy client (#1349)
    
    Currently the TLS implementation in `proxy-identity-default` depends on
    `proxy-identity`, which depends on the proxy API to implement its
    refreshing identity client.
    
    This change updates these crates so that the TLS implementation only
    depends on the core identity crate as follows:
    
    * Move `proxy_identity::Credentials` to `identity::Credentials`;
    * Move `proxy/identity/default` to `identity/default`;
    * Rename `proxy/identity` to `proxy/identity-client` to help
      disambiguate it from the core identity crate.

commit ab7dfa8ce2deec22c5e6137e12c74a6396a9b813
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Nov 1 12:42:57 2021 -0700

    build(deps): bump libc from 0.2.105 to 0.2.106 (#1348)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.105 to 0.2.106.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.105...0.2.106)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 97ae022c29e61c4744a38810d39af942e44a0918
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 1 12:20:34 2021 -0700

    retry: Simplify ReplayBody::poll_data for readability (#1346)
    
    `ReplayBody::poll_data includes some deeply nested logic that can be
    avoided with early returns. This restructures `ReplayBody::poll_data` so
    that the control flow is easier to follow.

commit bfc1e2c05207694ae588dad4f4eb0d9b28358ed7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Nov 1 11:06:17 2021 -0700

    retry: allow retrying requests without content-length headers  (#1341)
    
    Currently, the proxy will retry requests with bodies if and only if they
    have a `content-length` header with a value <= 64 KB. If the request has
    a body but no `content-length` header, we currently assume that its body
    will exceed the maximum buffered size, and skip trying to retry it.
    However, this means gRPC requests will never be retried, because it
    turns out gRPC requests don't include a `content-length` header (see
    linkerd/linkerd2#7141). Whoops!
    
    This PR fixes this by changing the retry logic to use `Body::size_hint` to
    determine if buffering should be attempted. This value will be set from
    `content-length` when it is set and may be set in additional situations
    where the body length is known before the request is processed.
    
    We are still protected against unbounded buffering because the buffering
    body will stop buffering and discard any previously buffered data if the
    buffered length ever exceeds the maximum.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 1c1e0abb774962ea4ab891cd080c12676908ab89
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Oct 29 12:44:23 2021 -0700

    build(deps): bump tokio-stream from 0.1.7 to 0.1.8 (#1344)
    
    Bumps [tokio-stream](https://github.com/tokio-rs/tokio) from 0.1.7 to 0.1.8.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-stream-0.1.7...tokio-stream-0.1.8)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-stream
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit d7b4f36d18dfbceca7ef1ba6d4c33e0ee10fdf1c
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Oct 29 12:44:12 2021 -0700

    build(deps): bump tokio from 1.12.0 to 1.13.0 (#1343)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.12.0 to 1.13.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.12.0...tokio-1.13.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 271f79f292df326110b5b9169a486fc82c839571
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Oct 29 12:44:01 2021 -0700

    build(deps): bump tokio-util from 0.6.8 to 0.6.9 (#1342)
    
    Bumps [tokio-util](https://github.com/tokio-rs/tokio) from 0.6.8 to 0.6.9.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-util-0.6.8...tokio-util-0.6.9)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-util
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ded8c6c3e7381138fca732d3cb2378ada9d0a022
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 29 11:06:59 2021 -0700

    Log discovery changes at DEBUG (#1340)
    
    It seems that we no longer log specific discovery changes at DEBUG
    anywhere. We probably ought to revisit the discovery pipeline more
    holistically and ensure that we're logging in strategic places, but for
    now this will help users diagnose discovery updates without subscribing
    to the much noisier TRACE stream.
    
    Relates to linkerd/linkerd2#6842

commit 2dd7bb8ff68f8fa3337727064cc6644a32fef784
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 27 15:36:37 2021 -0700

    Refactor mTLS & identity crates (#1333)
    
    The `linkerd-proxy-identity` crate, which is responsible for obtaining
    certificates from the identity service, currently has a hard dependency
    on our `linkerd-tls-rustls` crate.
    
    This change introduces  trait
    so that the identity API client can be generic over the TLS
    implementation that receives certificate updates.
    
    To accomodate this, the identity/mtls crates are refactored as follows:
    
    * `linkerd-proxy-identity` gets a new `Credentials` trait so that the
      `certify` module is responsible for refreshing certificates from the
      API without hardcoding a TLS implementation.
    * The `linkerd-tls-rustls` crate is moved to
      `linkerd-proxy-identity-default` and compltely encapsulates the
      ring/rustls/webpki dependencies. This module provides an
      implementation of `Credentials` that validates and publishes rustls
      configurations to receivers--either `NewClient` or `Server`.
    * The _app_ crates currently have a hard dependency on the
      `identity-default` crate, but this will be made configurable in
      follow-up changes.
    
    There are no functional changes.

commit 917797a499f53b841873d1d771b7f35bc1bd4fe0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Oct 27 12:28:38 2021 -0700

    update `tonic`, `prost`, and `linkerd2-proxy-api` (#1339)
    
    This branch updates the proxy's `tonic` dependencies to `tonic` 0.6,
    `prost` to 0.9, and `linkerd2-proxy-api` to 0.3 (which updates the
    proxy-api crate's `prost` and `tonic` dependencies).
    
    Closes #1329.
    Closes #1337.
    Closes #1338.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a4175b83697d38d1a40829d9cdf216ba382e85f3
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Oct 27 09:51:16 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.25 to 0.3.1 (#1328)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.25 to 0.3.1.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.25...tracing-subscriber-0.3.1)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e7369b4c2b640ea45599adf5ef7a3c28a6af60b8
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 26 12:13:12 2021 -0700

    Fix misspecified dependencies (#1335)
    
    Some of our crates have unused dependencies or do not properly enumerate
    all required features.
    
    Found via
    
        for f in $(find . -mindepth 2 -name Cargo.toml |sort -rn ) ; do
          (cd ${f%%/Cargo.toml} && cargo +nightly udeps)
        done

commit 968361d6fd210d7a0b45765ea2953d31815ad6f4
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 26 11:10:34 2021 -0700

    tls: Avoid circular dependencies (#1334)
    
    The `linkerd-tls` crate has a test dependency on `linkerd-tls-rustls`,
    which itself depends on `linkerd-tls`. This is an avoidable circular
    dependency.
    
    This change moves all of the TLS testdata from the `linkerd-tls-rustls`
    crate to the new `linkerd-tls-test-util` crate. The `tls_accept` test is
    moved from `linkerd-tls` to `linkerd-tls-rustls` so that `linkerd-tls`
    no longer depends on `linkerd-tls-rustls`.

commit 1a762f592498e91c2a17e50ffaf333a2c534d358
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Oct 26 07:41:42 2021 -0700

    tracing: update `tracing-subscriber` to v0.3.x (#1327)
    
    This branch updates `tracing-subscriber` to v0.3.x. Among other things,
    this should resolve the security advisory for the `chrono` crate.
    
    Turns out the upgrade was pretty mechanical!

commit c6e89859616d35ef003faba2df1d5d4e55aa3a0c
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Oct 25 20:35:34 2021 -0700

    build(deps): bump libc from 0.2.104 to 0.2.105 (#1332)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.104 to 0.2.105.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.104...0.2.105)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 84c9070ec038a300e78af0d5252bc3369025376f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Oct 25 20:34:45 2021 -0700

    build(deps): bump hdrhistogram from 7.3.0 to 7.4.0 (#1330)
    
    Bumps [hdrhistogram](https://github.com/HdrHistogram/HdrHistogram_rust) from 7.3.0 to 7.4.0.
    - [Release notes](https://github.com/HdrHistogram/HdrHistogram_rust/releases)
    - [Changelog](https://github.com/HdrHistogram/HdrHistogram_rust/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/HdrHistogram/HdrHistogram_rust/compare/v7.3.0...v7.4.0)
    
    ---
    updated-dependencies:
    - dependency-name: hdrhistogram
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5c5b620e31d9cd314ecb659144a9a91a30b1ca53
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Oct 22 12:57:26 2021 -0700

    build(deps): bump hyper from 0.14.13 to 0.14.14 (#1326)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.13 to 0.14.14.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.13...v0.14.14)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 4904560f6ac9892192c748b839d94ffc6e1fe159
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Oct 22 12:32:34 2021 -0700

    build(deps): bump http-body from 0.4.3 to 0.4.4 (#1325)
    
    Bumps [http-body](https://github.com/hyperium/http-body) from 0.4.3 to 0.4.4.
    - [Release notes](https://github.com/hyperium/http-body/releases)
    - [Changelog](https://github.com/hyperium/http-body/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/http-body/commits)
    
    ---
    updated-dependencies:
    - dependency-name: http-body
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit cda9473bb041d14068e15571259300c5dd41beba
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Oct 22 12:32:12 2021 -0700

    build(deps): bump h2 from 0.3.6 to 0.3.7 (#1324)
    
    Bumps [h2](https://github.com/hyperium/h2) from 0.3.6 to 0.3.7.
    - [Release notes](https://github.com/hyperium/h2/releases)
    - [Changelog](https://github.com/hyperium/h2/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/h2/compare/v0.3.6...v0.3.7)
    
    ---
    updated-dependencies:
    - dependency-name: h2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f7651a30d8e18f2f402a168a7f93b27bab7649e9
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 22 09:58:17 2021 -0700

    Disable incremental compilation in CI (#1322)
    
    There's no reason to use Rust's incremental compilation in CI. According
    to matklad's blog post on [fast Rust builds][fastbuilds]:
    
    > CI builds often are closer to from-scratch builds, as changes are
    > typically much bigger than from a local edit-compile cycle. For
    > from-scratch builds, incremental adds an extra dependency-tracking
    > overhead. It also significantly increases the amount of IO and the
    > size of ./target, which make caching less effective.
    
    [fastbuilds]: https://matklad.github.io/2021/09/04/fast-rust-builds.html

commit 0ac4f3f0a45e6ad64794b61994a41973ff494221
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 21 20:17:53 2021 -0700

    Use jemalloc (#1321)
    
    In load tests, it appears that jemalloc is--perhaps unsurprisingly--more efficient
    than the alternatives. Specifically, jemalloc uses less memory and is more responsive
    to memory being released without substantially impacting latency or CPU usage.
    
    This is only enabled on `x86_64-unknown-linux-gnu`, as this is the only platform
    on which all tests pass, etc (per [gnzlbg/jemallocator][readme]).
    
    [readme]: https://github.com/gnzlbg/jemallocator/tree/c27a859e98e3cb790dc269773d9da71a1e918458#platform-support

commit 23be602cd8c0bcb3d0952e737bf54061b63c4974
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 21 17:18:30 2021 -0700

    Adopt Rust edition 2021 (#1295)
    
    Update to Rust 1.56.0 and adopt the 2021 edition

commit 7a8836628c7e528452c407537c8cf5c076bc575e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Oct 20 12:59:41 2021 -0700

    build(deps): bump tower from 0.4.9 to 0.4.10 (#1320)
    
    Bumps [tower](https://github.com/tower-rs/tower) from 0.4.9 to 0.4.10.
    - [Release notes](https://github.com/tower-rs/tower/releases)
    - [Commits](https://github.com/tower-rs/tower/compare/tower-0.4.9...tower-0.4.10)
    
    ---
    updated-dependencies:
    - dependency-name: tower
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ec441e5819eeb187dc6da2907fbdabb72c753c87
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 19 15:29:53 2021 -0700

    Fix an infinite loop when downgrading HTTP/2 errors (#1318)
    
    578d979 introduced a bug: when the proxy handles errors on
    HTTP/2-upgraded connections, it can get stuck in an infinite loop when
    searching the error chain for an HTTP/2 error.
    
    This change fixes this inifite loop and adds a test that exercises this
    behavior to ensure that `downgrade_h2_error` behaves as expected.
    
    Fixes linkerd/linkerd2#7103

commit 384aa21eded8dd139b9b943e1f76f1beb8a6b12b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 18 15:22:57 2021 -0700

    Split cryptographic dependencies into a dedicated crate (#1307)
    
    The `ring`/`rustls`/`webpki` crates provide the cryptographic primitives
    that we use for the proxy's mTLS functionality. But there's a desire to
    support other cryptographic implementations (i.e. openssl/boringssl),
    especially for FIPS 140-2.
    
    This change introduces a new crate, `linkerd-tls-rustls`, into which all
    types that depend on `ring`/`rustls`/`webpki` are moved. Specifically,
    `Key`, `Crt`, and `CrtKey` are moved from `linkerd-identity` into
    `rustls`. The `linkerd-tls` crate becomes generic over its TLS
    implementation by using a `NewService` to build client connectors and a
    `Service` to terminate server-side TLS connections.

commit 66f2f0398dbb17d5c3a19ee03a747078e077200c
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Oct 17 17:56:39 2021 -0700

    inbound: Add a box layer to reduce compile times (#1317)
    
    The inbound proxy builds in 30-40 minutes on recent nightlies. This can
    be reduced to 3-4 minutes with a boxing layer. This change adds such a
    layer so that fuzzing builds can complete in a timely fashion.

commit 504d8bea2f46a1d6fcfeef2a6e7edd468167e9a1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sun Oct 17 15:12:24 2021 -0700

    build(deps): bump libc from 0.2.103 to 0.2.104 (#1315)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.103 to 0.2.104.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.103...0.2.104)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 27587f5ec181ae62a00356893ae31c341c1715bc
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Oct 17 12:25:49 2021 -0700

    dns-name: Remove `webpki` dependency (#1316)
    
    The `dns::Name` type is backed by `webpki::DNSName`; and the `webpki`
    crate has a dependency on `ring`. As we setup to support alternate
    cryptographic implementations, we don't want to incur this dependency
    for such a simple type that only validates DNS-like names.
    
    This change copies the `webpki::DNSName` and `webpki::DNSNameRef` types
    as `dns::Name` and `dns::NameRef` (preserving copyright information).
    Name parsing is simplified, as we don't need to handle wildcards with
    these types.
    
    Furthermore, this change updates the various identity-type wrapper types
    to implement `Deref` so that `dns::Name::as_str` and
    `dns::Name::as_bytes` are available implicitly.

commit 82d2c4029d9af3e326463984a18d78a8e38dbcb1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat Oct 16 12:37:09 2021 -0700

    build(deps): bump actions/checkout from 2.3.4 to 2.3.5 (#1313)
    
    Bumps [actions/checkout](https://github.com/actions/checkout) from 2.3.4 to 2.3.5.
    - [Release notes](https://github.com/actions/checkout/releases)
    - [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/actions/checkout/compare/5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f...1e204e9a9253d643386038d443f96446fa156a97)
    
    ---
    updated-dependencies:
    - dependency-name: actions/checkout
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 24ddbc34ef7581e384178b19ec7e6af7eea2252f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat Oct 16 12:33:22 2021 -0700

    build(deps): bump trust-dns-resolver (#1311)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from 0.21.0-alpha.3 to 0.21.0-alpha.4.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Changelog](https://github.com/bluejekyll/trust-dns/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/v0.21.0-alpha.3...v0.21.0-alpha.4)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 30db9dab186d641c369dcfb07a56480fcdfd012d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Sat Oct 16 12:30:08 2021 -0700

    build(deps): bump tower from 0.4.8 to 0.4.9 (#1308)
    
    Bumps [tower](https://github.com/tower-rs/tower) from 0.4.8 to 0.4.9.
    - [Release notes](https://github.com/tower-rs/tower/releases)
    - [Commits](https://github.com/tower-rs/tower/compare/tower-0.4.8...tower-0.4.9)
    
    ---
    updated-dependencies:
    - dependency-name: tower
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7b9dc5daaa54629799563960b2c0385a62d1f237
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Oct 11 20:21:38 2021 -0700

    build(deps): bump thiserror from 1.0.29 to 1.0.30 (#1306)
    
    Bumps [thiserror](https://github.com/dtolnay/thiserror) from 1.0.29 to 1.0.30.
    - [Release notes](https://github.com/dtolnay/thiserror/releases)
    - [Commits](https://github.com/dtolnay/thiserror/compare/1.0.29...1.0.30)
    
    ---
    updated-dependencies:
    - dependency-name: thiserror
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 49227febfddd436ad9cc72f67100b48429738fcf
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 8 15:18:36 2021 -0700

    Require identity configuration (#1305)
    
    The proxy currently supports a mode where identity is disabled. This
    proliferates complexity that isn't really needed: there doesn't appear
    to be a real use case where disabling identity is necessary. And, if it
    is really necessary, we should reintroduce it after decoupling TLS and
    identity.
    
    This change causes the proxy to error during startup if identity is
    disabled by configuration.
    
    Furthermore, the `linkerd-proxy-identity` crate now has a `test-util`
    feature that makes it possible to build a `LocalCrtKey` identity from
    credentials provided by the `linkerd-identity/test-util` feature. A
    default set of credentials are used in inbound and outbound tests.

commit 3bb7ec4dcf487bf17036f6fe747d800be6b74e7b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Oct 8 09:59:04 2021 -0700

    tracing: simplify subscriber construction with `Box`ed layers (#1304)
    
    Currently, the way the `tracing` subscriber is constructed is somewhat
    convoluted, due to potentially constructing formatting layers with
    different types (either plaintext logging or JSON). Because of this, we
    can't simply have methods that return the `fmt` layer. Instead, we have
    to pass the `Registry` into the methods that construct the `fmt` layers
    and return a type-erased `Dispatch` after adding the `fmt` layers. This
    is kind of not great. In particular, it makes adding additional layers
    difficult, such as access logging (#601) and (eventually)
    `tokio-console` support.
    
    This branch refactors the subscriber construction to use the
    (recently-added) `impl Layer<S> for Box<dyn Layer<S>>` in
    `tracing-subscriber`. Now, we can erase the types of the JSON and
    plaintext `fmt` layers and return them from the methods that construct
    them, and layer them onto the `Registry` in
    `tracing::Settings::build()`. This makes the `tracing` setup
    significantly easier, and will enable changes I want to make in #601.
    
    Boxing these layers does add slight overhead of dynamic dispatch + a
    pointer dereference. However, I doubt this has a huge performance impact
    in practice...

commit 2c5b9e5bb14262d1240a90433d0cbf7b4e065a30
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 7 15:22:49 2021 -0700

    metrics: Implement FmtMetrics for Option (#1302)
    
    Some metrics are globally enabled/disabled from being emitted. In this
    case, it's useful to simply return an optional implementnation of
    `FmtMetrics`. This change implements `FmtMetrics` for `Option` so
    implementations (like identity metrics) need not encode this state
    internally.
    
    To accomodate this `FmtMetrics::and_then` has been renamed to
    `FmtMetrics::and_report` to avoid conflicting with `Option::and_then`.

commit b1abc25ac91bda2c7bb88c4687a2852d23371042
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 7 14:52:16 2021 -0700

    dns: Avoid allocating in `Name::is_localhost` (#1303)
    
    `Name::is_localhost` implements comparison by parsing the string
    `localhost.` as a Name. This requires constructing a `String` as well as
    performing name parsing. We can avoid this work by obtaining a reference
    to the inner name string and using [`str::eq_ignore_ascii_case`][1].
    
    [1]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.eq_ignore_ascii_case

commit fd446254d6c185bc1378d2a8a9adcf4c21937f1b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Oct 6 15:00:41 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.24 to 0.2.25 (#1300)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.24 to 0.2.25.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.24...tracing-subscriber-0.2.25)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>

commit 87434bc6c3d6d844306639401bbcd8e12ed767ce
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Oct 6 13:35:15 2021 -0700

    tracing: use `Option`s as `tracing` values (#1299)
    
    Tracing 0.1.29 added a `tracing::field::Value` implementation for
    `Option<T> where T: Value`. This means that `Option`s can now be used as
    structured field values, rather than recording them with `fmt::Debug`.
    When the `Option` is `None`, the field will simply be skipped.
    
    This allows us to make a bunch of existing code simpler. There are a
    number of places where we create one span or event if some value is
    `Some`, and a different span/event without that field if the value is
    `None`. This can be changed to just use the `Option` as a field value
    directly.
    
    I'm almost certain I missed some of those places, but I changed the ones
    I could find.
    
    This also updates `tracing` to 0.1.29, of course.

commit 4b3d4b8ae035b822e6504481fd04198e337988d5
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 5 08:35:06 2021 -0700

    Always enable identity in integration tests (#1298)
    
    In preparation of making identity mandatory, this change adds
    a default identity that is used in all integration tests (unless
    overridden by the test itself).
    
    This change also regenerates existing TLS credentials used in tests.

commit 90dcb212447e4a4536454b01aca8b39e2b004944
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 1 08:21:03 2021 -0700

    gateway: Require ALPN on gateway connections (#1297)
    
    In Linkerd stable-2.10.0, the proxy started using a specialized protocol
    header for multicluster gateway connections (`transport.l5d.io`). Now
    that stable-2.11.0 has been released, we can drop support for gateway
    connections that do not use this protocol.

commit 7d76096faca34f2fd75f55f51f7dd32bd8e981d8
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 1 08:20:03 2021 -0700

    Remove use of TLS 1.2 (#1296)
    
    Now that stable-2.11.0 is out and TLSv1.3 has been supported since
    2.10.0, this change removes TLSv1.2 from the set of TLS versions that
    can be used by the proxy.

commit 93a1f29dd2a5966f171a0884ce1cb05c7bdc5cd2
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 30 14:26:15 2021 -0700

    admin: Remove unused types (#1294)
    
    Rust nightly catches a few unused types that are apparently not caught
    on the most recent stable releases.

commit afcfc34f68856a1e27feb3a5571f4350f5894cbf
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Sep 30 13:22:18 2021 -0700

    build(deps): bump h2 from 0.3.4 to 0.3.6 (#1293)
    
    Bumps [h2](https://github.com/hyperium/h2) from 0.3.4 to 0.3.6.
    - [Release notes](https://github.com/hyperium/h2/releases)
    - [Changelog](https://github.com/hyperium/h2/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/h2/compare/v0.3.4...v0.3.6)
    
    ---
    updated-dependencies:
    - dependency-name: h2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a0efa6bd88c568ab4a2f9f4f9fef36272eab350f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Sep 29 20:31:33 2021 -0700

    build(deps): bump trust-dns-resolver (#1291)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from 0.21.0-alpha.2 to 0.21.0-alpha.3.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Changelog](https://github.com/bluejekyll/trust-dns/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/v0.21.0-alpha.2...v0.21.0-alpha.3)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8aecbc491d85d35a5c6116ecd41394a538ba9795
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Sep 29 20:31:24 2021 -0700

    build(deps): bump libc from 0.2.102 to 0.2.103 (#1290)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.102 to 0.2.103.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.102...0.2.103)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit d10ed8fe1b4ccb074a10cfea1db65afea37f5e8d
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 23 16:08:46 2021 -0700

    Avoid attempting to reconnect to defunct endpoints (#1289)
    
    Load balanced clients can get stuck continually trying to reconnect to
    defunct endpoints in situations like the following:
    
    1. A balancer has an existing endpoint but it is pending;
    2. A new ready endpoint is added to the balancer;
    3. Requests are sent to the new endpoint and the balancer ends up with
       the new endpoint being ready.
    4. Service discovery issues an update indicating that we should no
       longer use the old endpoint, which has now shutdown.
    
    This discovery update won't be processed by the balancer until we
    attempt to issue a request on the balancer. But, because each endpoint
    uses `SpawnReady` to attempt reconnection on a background task, we
    continually attempt to reconnect to the defunct endpoint even though
    we'll never actually issue requests to it (because it will be removed as
    soon as the balancer is polled again).
    
    There's a simple fix to this: we shouldn't put reconnection inside of
    `SpawnReady`. Instead, we use a `SpawnReady` to drive each individual
    connection attempt to readiness, but we don't drive reconnect to drive a
    failed connection to be retried until the balancer has a chance to be
    updated.
    
    This may address linkerd/linkerd2#6842 and should fix another issue
    reported in Slack where controller pods would continually log connection
    failures after the destination controller was rescheduled.

commit 6393c8364e0d0df742abacaea05da4dfb1bef0bc
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 23 14:56:23 2021 -0700

    Add tracing spans to controller clients (#1288)
    
    It can be difficult to identify when log messages are emitted from
    controller clients. This change adds tracing spans to identify the
    client and its endpoints.

commit 04992e947ca777e3b16a68863b7bf1e01e115f70
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 23 14:56:13 2021 -0700

    Add trace-level logging around discovery updates (#1287)
    
    It's helpful to have more insight into what's going on during endpoint
    resolution. This change adds trace-level logging messages to various
    resolver modules.

commit 67de0c123c99d672f4a4351d4bbcef2a9f931d1c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 23 14:54:24 2021 -0700

    stack-tracing: Log when services are dropped (#1286)
    
    This change modifies `stack-tracing`'s `Instrument` service type to log
    a message as instances are dropped, which can be useful for diagnosing
    stack retention issues.
    
    This change also modifies this type to stop using `pin-project` (since
    it wasn't actually using it).

commit 3f89e1b74a7ec92698cd8460acb416fd86de5904
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 22 17:39:04 2021 -0700

    outbound: Strip peer-sent `l5d-proxy-error` headers (#1285)
    
    If the outbound proxy is not configured to emit headers, then we
    shouldn't surface `l5d-proxy-error` headers sent by peer proxies.
    
    This change adds a module to the outbound HTTP endpoint stack to strip
    these headers when appropriate.

commit 0e0e47a8749d6b56979f46049d2140c3a511de5d
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 22 15:28:17 2021 -0700

    outbound: Disable informational headers by config (#1284)
    
    The proxy may set error messages in the outbound proxy's response
    headers; but sometimes this isn't desirable, especially on ingresses
    where the repsonses may be sent to external clients.
    
    This change introduces a new configuration,
    `LINKERD2_PROXY_OUTBOUND_DISABLE_INFORMATIONAL_HEADERS` that can be set
    to `false` to disable these headers from being included in responses
    from the outbound proxy. These headers are also disabled by default when
    ingress mode is enabled.

commit 09ee8f5cfabd1be221ffa474ab650bd01f8aca74
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 22 13:44:33 2021 -0700

    outbound: Only honor the `l5d-proxy-connection` header when meshed (#1283)
    
    The proxy uses the `l5d-proxy-connection` header to determine when
    it should close proxied connections. This header must only be set by a
    peer inbound proxy.
    
    This change modifies the outbound proxy so that this connection is only
    honored when the peer is actually meshed. If this header is set by an
    unmeshed peer, the header is ignored.
    
    This change also modifies the outbound proxy to always _clear_ this
    header so that it can't be sent to the application.

commit 7b3014b2f9917bf5b4d058280a7dcbc54b322207
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 22 13:25:34 2021 -0700

    Avoid emitting informational headers to untrusted clients (#1282)
    
    The inbound proxy sets the `l5d-proxy-error` and `l5d-proxy-connection`
    headers when an error is encountered. This leaks information about the
    proxy to potentially untrusted clients.
    
    This change modifies the error handling behavior to only emit these
    headers from the inbound proxy when the client uses mesh identity.
    
    In doing so, we modify the `inbound::NewSetIdentiyHeader` layer to use
    `ExtractParam<tls::ConditionalServerTls, _>` to parameterize the server
    connection's identity to be consistent with the rescue parameters. This
    precipitated modifying the default impls for `ExtractParam` so that we
    can provide an impl for `()` that simply uses the target type. A new
    `CloneParam` type is introduced to replicate the former behavior.

commit b5cdadaa31214d29feda6b2abb4417210bbeeada
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 21 15:48:43 2021 -0700

    Support a `l5d-proxy-connection: close` header (#1281)
    
    In 6cf1b2851, we updated the outbound proxy to automatically teardown
    connections when the peer proxy sets the `l5d-proxy-error` response
    header; but this header may be set in some situations when disconnecting
    isn't appropriate and will only generate more load on the system.
    
    This change introduces a `l5d-proxy-connection` header (like the
    `connection` and `proxy-connection` headers) that the proxy can use to
    signal that the proxied connection should be closed, independently of
    the informational `l5d-proxy-error` message.
    
    Some TODOs have been marked for followup improvements.

commit d18481abc5b15ce38382bdb1b2ceeb11ee53512a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Sep 21 11:48:58 2021 -0700

    build(deps): bump http from 0.2.4 to 0.2.5 (#1280)
    
    Bumps [http](https://github.com/hyperium/http) from 0.2.4 to 0.2.5.
    - [Release notes](https://github.com/hyperium/http/releases)
    - [Changelog](https://github.com/hyperium/http/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/http/compare/v0.2.4...v0.2.5)
    
    ---
    updated-dependencies:
    - dependency-name: http
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7eb6551e5f022ebf6b82f7f5ba279ed2bd2667cd
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Sep 21 11:48:44 2021 -0700

    build(deps): bump tokio from 1.11.0 to 1.12.0 (#1279)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.11.0 to 1.12.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.11.0...tokio-1.12.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0239712ca2d45bafdaee5d9e9cd9d43cf9a3e716
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Sep 21 11:48:32 2021 -0700

    build(deps): bump tracing from 0.1.27 to 0.1.28 (#1278)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.27 to 0.1.28.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.27...tracing-0.1.28)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e58d31a45e909fe5546e65faf32ba2c30792986d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Sep 21 07:53:30 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.23 to 0.2.24 (#1277)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.23 to 0.2.24.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.23...tracing-subscriber-0.2.24)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 50ea1e715ee6e5a25191afa1b77edfabd620be56
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 21 07:53:17 2021 -0700

    error-respond: Support stack target configuration (#1276)
    
    The error responder is currently a `Service` and not a `NewService`
    meaning there's no means to configure the responder using the stack
    target.
    
    This change introduces a `NewRespondService` type that implements
    `NewService` to instrument the error responder. This will be used in
    follow-up changes to configure the error responder to only emit headers
    in certain conditions.

commit 6d7f50e2365e37459bdcadd34738d67349f8c1d2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 17 11:36:42 2021 -0700

    dns: Log TTL with resolution (#1275)
    
    When debugging DNS issues, it's useful to know the TTL for a resolution.

commit 98fee53a3be85beb7a82571ece4a7e45470989c4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Sep 16 14:34:46 2021 -0700

    tracing: use `Span::or_current` when spawning tasks (#1272)
    
    `tracing` v0.1.27 added a new [`Span::or_current`] method to aid with
    efficiently propagating spans to spawned tasks (or threads). The method
    is intended to be used when a spawned task should be instrumented with a
    provided span if it is enabled, or the current span if the provided span
    is _not_ enabled. `span.or_current()` returns `span` if it is enabled,
    or, if `span` is disabled, it clones the current span and returns it.
    
    This offers better performance than writing code like this:
    ```rust
        .instrument(span)
        .in_current_span()
    ```
    
    First, `or_current` will only look up the current span (requiring a
    thread-local access) _if_ `span` is not enabled, while
    `.instrument(span).in_current_span()` will do this unconditionally.
    
    Second, and more importantly, using `.in_current_span()` will wrap the
    spawned future in _two_ `Instrumented` futures. One will enter the
    current span whenever the task is polled, and inside that, the second
    `instrument` will enter the passed span. This means we are entering two
    spans instead of one, in the case where both are enabled. That adds a
    small amount of additional overhead in every poll.
    
    Therefore, this branch changes code that instruments a future prior to
    spawning it to use `Span::or_current`. A lot of this is test code, which
    (it turns out) doesn't really handle span propagation at all. However,
    this also touches the main accept loop, as well as where we spawn admin
    background tasks.
    
    [`Span::or_current`]: https://docs.rs/tracing/0.1.27/tracing/span/struct.Span.html#method.or_current

commit 3ddba37d12e3590de6ec53d51ba75f5b8b1c6228
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Sep 16 14:30:42 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.22 to 0.2.23 (#1274)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.22 to 0.2.23.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.22...tracing-subscriber-0.2.23)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a653f9514e35362efea092c0ca23233c933e0d6c
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Sep 16 14:30:29 2021 -0700

    build(deps): bump hyper from 0.14.12 to 0.14.13 (#1273)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.12 to 0.14.13.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.12...v0.14.13)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 3cc8f55f28027923aa0d4dabcafe77a5bdcb1345
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 16 08:53:01 2021 -0700

    Update all dependencies (#1271)
    
    Dependabot has't caught some dependency updates. This change updates all
    cargo dependencies (some of which are actively used, e.g. wasm).

commit 76c136cf89f6800b09627780c4211b2fc8f31845
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 16 08:52:48 2021 -0700

    inbound: Include TLS labels in authz metrics (#1269)
    
    Our inbound authorization metrics include a target port but include no
    client information. This change adds TLS lables to the authorization
    metrics so it's possible to identify which types of clients are
    allowed/denied to access a service.

commit d43650da5eb76e902789dcf2d2335eabbd00f157
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Sep 15 18:21:59 2021 -0700

    build(deps): bump serde_json from 1.0.67 to 1.0.68 (#1266)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.67 to 1.0.68.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.67...v1.0.68)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 6b9003699b170dbbf240aa22f0b36db3f21cf14a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Sep 15 14:43:06 2021 -0700

    inbound: don't forward to addresses not in `LINKERD2_PROXY_INBOUND_IPS` (#1161)
    
    The injector now sets an environment variable
    `LINKERD2_PROXY_INBOUND_IPS`. This environment variable is intended to
    limit which target IP addresses the proxy will forward inbound traffic
    to.
    
    This branch adds a request filter layer in the inbound accept stack that rejects
    connections with `SO_ORIGINAL_DST` addresses outside
    of the configured list. If the environment variable is empty/unset, all
    connections are allowed.
    
    When connections with target IPs not in the allowlist are rejected, we
    increment the `inbound_tcp_accept_error_total` metric with a
    `error="unexpected"` label.  I've also added a test for the error
    metric.
    
    Furthermore, the inbound proxy now forwards connections to their
    original target IP address, rather than to the original target port on
    localhost, as described in linkerd/linkerd2#6495. The relevant
    target types now carry a `Remote<ServerAddr>` rather than just a
    port.
    
    Some of the tests failed after changing the inbound proxy to route to
    the original destination IP address rather than to localhost. This is
    because of the `Proxy::inbound_fuzz_addr` method in the test-support
    proxy builder. Previously, this was used to replace the  mocked
    SO_ORIGINAL_DST's IP address with a totally bogus one. We could do this
    without breaking stuff because the inbound proxy would still always
    forward on localhost.
    
    It doesn't do that anymore, so the IP address part of the mock
    SO_ORIGINAL_DST is actually load-bearing now. This branch removes
    `inbound_fuzz_addr` from the integration tests. Hopefully those tests
    are still testing the right thing...
    
    Closes linkerd/linkerd2#6495

commit 0e9f1999b31efd7e6ea71ca7d53fca583829859a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Sep 15 14:02:36 2021 -0700

    build(deps): bump libc from 0.2.101 to 0.2.102 (#1267)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.101 to 0.2.102.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.101...0.2.102)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 25986d09a7e77eef1d25a87c73e4fe6484f3ebc6
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Sep 15 13:35:57 2021 -0700

    build(deps): bump socket2 from 0.4.1 to 0.4.2 (#1268)
    
    Bumps [socket2](https://github.com/rust-lang/socket2) from 0.4.1 to 0.4.2.
    - [Release notes](https://github.com/rust-lang/socket2/releases)
    - [Changelog](https://github.com/rust-lang/socket2/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/socket2/compare/v0.4.1...v0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: socket2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b0624747acd9045a9c14a3376949205557851681
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Sep 14 15:29:24 2021 -0700

    build(deps): bump softprops/action-gh-release from 0.1.12 to 1 (#1264)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 0.1.12 to 1.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/2d72d869af3bf23602f9593a1e3fd739b80ac1eb...6034af24fba4e5a8e975aaa6056554efe4c794d0)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 56afe3d5b4d610c740435ceb09ac19411f1ff5ad
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Sep 14 15:28:30 2021 -0700

    trace: remove `/tasks` admin endpoint and `tokio-trace` (#1265)
    
    This branch removes the `/tasks` admin endpoint and the `tokio-trace`
    crate that was used to implement it. The [`tokio-trace`] crate was a
    rough prototype of what has now become the [Tokio Console] project, and
    I'm now deprecating the experimental `tokio-trace` crate in favor of the
    console. Also, the `tokio-trace` crate doesn't even _work_ anymore, as
    the instrumentation in `tokio` that it used has been changed as part of
    the Console work.
    
    In 2.12, we'll replace this functionality by adding Tokio Console
    support to the proxy. For now, though, we should remove the old stuff,
    since it doesn't even work anymore.
    
    This also means we can remove the special allow attribute for the git
    dependency from the `cargo-deny` configuration. :)
    
    [`tokio-trace`]: https://github.com/hawkw/tokio-trace
    [Tokio Console]: https://github.com/tokio-rs/console

commit 21d2d0b9b9cbe35957f3dc2eaa6d12be3768f6f6
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Sep 13 13:21:07 2021 -0700

    build(deps): bump codecov/codecov-action from 2.0.3 to 2.1.0 (#1260)
    
    Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 2.0.3 to 2.1.0.
    - [Release notes](https://github.com/codecov/codecov-action/releases)
    - [Changelog](https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/codecov/codecov-action/compare/5a8bb4701eca7ba3673f21664b887f652c58d0a3...f32b3a3741e1053eb607407145bc9619351dc93b)
    
    ---
    updated-dependencies:
    - dependency-name: codecov/codecov-action
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit acba0b8d5b36a32716b9615ef93997f27a952708
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Sep 13 13:20:31 2021 -0700

    build(deps): bump flate2 from 1.0.21 to 1.0.22 (#1263)
    
    Bumps [flate2](https://github.com/rust-lang/flate2-rs) from 1.0.21 to 1.0.22.
    - [Release notes](https://github.com/rust-lang/flate2-rs/releases)
    - [Commits](https://github.com/rust-lang/flate2-rs/compare/1.0.21...1.0.22)
    
    ---
    updated-dependencies:
    - dependency-name: flate2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit fe4d2cea8afc8888817d03940f02558dd47499d8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Sep 13 13:20:11 2021 -0700

    build(deps): bump tracing from 0.1.26 to 0.1.27 (#1262)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.26 to 0.1.27.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.26...tracing-0.1.27)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit a9e96376e5df5753529f3a6e73d8f675f90b54e4
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Sep 13 12:47:55 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.20 to 0.2.22 (#1261)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.20 to 0.2.22.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.20...tracing-subscriber-0.2.22)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b230155df9a2c94d6900a8ebbf39056033ae2170
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 12:12:20 2021 -0700

    inbound: Improve policy-based protocol detection (#1258)
    
    When an inbound server is configured with `proxyProtocol: HTTP/1`, we
    have to do detection since client proxies may connect to us over HTTP/2.
    But if the client is unmeshed or if detection fails, we can assume the
    connection wasn't H2 upgraded.
    
    This change modifies the inbound detection stack to use this improved
    default behavior.

commit e363a65a931144bd9ac64e807f6db5ba8d5196c9
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 11:39:22 2021 -0700

    Improve logs around authorization decisions (#1252)
    
    This change adds debug logging when connections or requests
    are authorized and INFO-level logs when they are denied.

commit 17e3580827d23647bd1cb69899cba7cfa70fd54a
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 11:37:25 2021 -0700

    inbound: Always permit connections from localhost (#1259)
    
    While it's unexpected for the inbound proxy to receive connections from
    localhost, other servers--especially the admin server--are likely to
    receive connections from localhost. These connections should be
    implicitly allowed.
    
    This change updates policy discovery to always permit connections from
    loopback addresses 127.0.0.1 and ::1. This authorization uses the name
    `default:localhost`.

commit b6d4e43988447ef9c1f1e925d5302797af9d41f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 10:46:44 2021 -0700

    inbound: Reduce needless allocation in stack targets (#1256)
    
    Inbound stacks include labels for the inbound server and authorization
    names. Every time a stack target is cloned, however, these strings are
    re-allocated.
    
    This change modifies these label types to hold an `Arc<str>` so that
    cloning the stack target is cheap, reusing the initial allocation.

commit 611067d601d3bab904f40e03a7dababaffe3dac7
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 10:45:34 2021 -0700

     stack: Replace BoxNewService with ArcNewService (#1254)
    
    Our `BoxNewService` type implements `Clone`, but this means that each
    time it is cloned, we incur heap allocations. This change modifies the
    `NewService` trait to take `self` as an immutable reference instead of a
    mutable reference so that `NewService` instances may be accessed in an
    `Arc` and replaces `BoxNewService` with `ArcNewService` so that clones
    do not require allocation.
    
    It turns out that no implementations of NewService actually required
    mutable access.

commit 4441e101367de2a3a3605d38bf2e1183d4e6ef2d
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 10:23:00 2021 -0700

    profiles: Share context-token allocations across instances (#1257)
    
    The profile client may be cloned to be shared across connections and
    requests. This change stores the context token in an `Arc<str>` so
    cloning gthe profile client doesn't require heap allocation. Now the
    context token is re-allocated each time a gRPC request is issued. This
    is much less frequent than the stack is cloned and also totally
    unavoidable with prost.

commit 7531d0ba16b4c48cc54450f898a1ec5f4093c851
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 13 09:40:13 2021 -0700

    Fix lints found on nightly (#1255)
    
    Rust nightly now catches some warnings that can cause fuzer builds to
    fail. This change addresses these issues.

commit d0e3434814248c1ed7d9f1921efd821a3042cb4e
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Sep 12 14:28:42 2021 -0700

    duplex: Reduce copy buffer size from 64KB to 8KB (#1253)
    
    Each forward TCP connection currently allocates 128KB--64KB for each
    direction, client-to-server and server-to-client. This is an excessive
    amount to allocate, especially since this buffer can currently hold only
    a single `read(2)`'s worth of data.
    
    This change reduces the buffer size to 8KB so that each connection
    allocates only 16KB. This will substantially reduce memory overhead when
    a server must serve many concurrent non-HTTP connections.

commit c0492767749e42fc0e9028f5fe3468d253a4dc70
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 10 06:21:13 2021 -0700

    Use a dedicated error type for HTTP response timeouts (#1248)
    
    We have several layers that are backed by `linkerd_timeout::Timeout` so
    that its error type--ResponseTimeout--is somewhat ambiguous
    
    This change consolidates the modules from `linkerd-timoeut` into
    `linkerd-stack` to serve as a general timeout mechanism.
    `linkerd_proxy_http::timeout` provides a stack that is parameterized
    with a use-case-specific target and emits a use-case-specific error
    type.
    
    Error handlers are updated to use the HTTP-specific error type.
    
    No functional changes.

commit 373ca65349580702ba7dfb7b2094eae881fc84e1
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 9 12:13:31 2021 -0700

    Update Rust to 1.55.0 (#1251)

commit 2bff2e41868bd0be9aea812760d690726bc5bd69
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 9 11:55:51 2021 -0700

    admin: Enforce policy on admin requests (#1250)
    
    Previously, the admin server admitted all requests. Now the admin server
    will apply policies as discovered from the control plane. The proxy's
    default policy is used before policy has been synced from the
    controller.

commit aee27f84558cfa86f1baa6861ce6b4670f678d86
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 9 11:44:37 2021 -0700

    inbound: Load policies lazily (#1249)
    
    Rather than block inbound communication on policy discovery, this change
    modifies policy initialization to use the default policy until policy
    has been synced from the control plane. This will allow us to use
    policies with the admin server.

commit 556cc61a218861e7e31c6cb19eac601e16542357
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 8 19:39:35 2021 -0700

    errors: Support contextual error handling strategies (#1246)
    
    Currently `app_core::errors` handles synthesis of all error responses.
    This means that this module needs to know about all possible error
    types. To work around this, we wrap some errors with a special
    `HttpError` type so this module can create a synthetic response.
    Furthermore, this means that we can't handle errors differently in
    inbound/outbound contexts.
    
    This change modies the `error::respond` module with a new strategy
    trait--`HttpRescue`--that is responsible for producing a
    `SyntheticHttpResponse` if the error can be handled and returning an
    error if it should not be handled gracefully.
    
    This change enables us to perform narrower error handling in more places
    in the stack--for example, so that some error responses are included in
    response metrics.
    
    This change modifies HTTP/1 error responses to include a `connection:
    close` header when the server-side connection is being torn down.

commit 47a57571ab039178b9e2af76d425a65ae05035b7
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 8 08:51:01 2021 -0700

    Fix route labels on outbound tap metadata (#1247)
    
    The outbound proxy did not properly expose route labels to tap on
    outbound requests. This change ensures that route labels are set on
    outbound requests for display by tap.

commit 578d979f56e60d2ad3f067770d44cd5ddc179d17
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 7 12:36:25 2021 -0700

    orig-proto: Avoid emiting HTTP/2 errors for upgraded requests (#1245)
    
    Our error handlers need to account for the fact that HTTP/1 requests may
    fail with HTTP/2 errors due to orig-proto upgrading.
    
    To simplify error handling (in an upcoming change), the
    `orig_proto::Upgrade` service introduces a new error type,
    `orig_proto::DowngradedH2Error` that hides the original error source so
    that these errors are not detected as being an `h2::Error`.

commit b9e61f6ef0d3b6409bc6a9fca246c5171d8bbf82
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Sep 7 09:55:45 2021 -0700

    build(deps): bump thiserror from 1.0.28 to 1.0.29 (#1244)
    
    Bumps [thiserror](https://github.com/dtolnay/thiserror) from 1.0.28 to 1.0.29.
    - [Release notes](https://github.com/dtolnay/thiserror/releases)
    - [Commits](https://github.com/dtolnay/thiserror/compare/1.0.28...1.0.29)
    
    ---
    updated-dependencies:
    - dependency-name: thiserror
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0f3328ab0487a6806d51361c02560b297a56bbe4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Sep 3 18:37:45 2021 -0700

    core: fix missing spans in `serve` tasks (#1243)
    
    Currently, the `serve` function spawns tasks `instrument`ed with a
    `tracing` span for each accepted connection. This span is at the `DEBUG`
    level, so it's disabled with the default tracing configuration. This is
    fine, as the per-connection context is relatively verbose and is mainly
    useful for debugging.
    
    However, we also rely on this span for propagating the `INFO`-level
    spans which indicate which part of the proxy an event occurred in
    (inbound, outbound, etc). When the `DEBUG` span is enabled, it will be a
    child of these spans, so they are propagated to the spawned tasks.
    However, when the `DEBUG` span is _not_ enabled, nothing propagates the
    `INFO` spans. Since the default `tracing` configuration enables `INFO`
    but not `DEBUG`, we want those spans to be propagated to the tasks
    spawned in `serve`.
    
    This commit fixes the missing spans by moving the spawn inside of the
    `Span::in_scope` call, and using `in_current_span` rather than
    `instrument`. Now, if the per-connection `DEBUG` span is enabled, it
    will be the current span...but if it isn't, the `INFO` span will still
    be current, so the task will still have the `INFO` span as part of its
    span context regardless.
    
    Alternatively, we could have fixed this by changing the `instrument()`
    call to:
    ```rust
        .instrument(span)
        .in_current_span()
    ```
    so that the task is always spawned in both the `DEBUG` span _and_ the
    current span. However, this is a bit less efficient, as it wraps the
    tasks in both spans even when the `INFO` span is not needed, so every
    time the task is polled, we would enter both spans.

commit 191f733593a6afa68a602f9076d927938597a6f4
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Sep 3 15:16:18 2021 -0700

    build(deps): bump tokio-util from 0.6.7 to 0.6.8 (#1240)
    
    Bumps [tokio-util](https://github.com/tokio-rs/tokio) from 0.6.7 to 0.6.8.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/commits)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-util
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 1ad286fd074ea7973332c69f445ecd1353a332ff
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 3 15:10:50 2021 -0700

    Set tracing spans on policy client (#1241)
    
    This change ensures that policy watches include tracing spans.

commit 3bf94d5549c79dd432a18eb0378846ac3c38a61a
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 3 03:30:27 2021 +0000

    Revert rustc update for release builds

commit b5cfbf4227c10c24c8d6d40d3d9118e64afd11d0
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 2 19:44:39 2021 -0700

    inbound: Include server labels in tap responses (#1239)
    
    This change modifies the inbound tapping behavior so that server &
    authorization labels are included in tap metadata for HTTP requests.

commit 29c22af5521444ac9128e15ab1bb1b6d445643cc
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 2 19:26:23 2021 -0700

    inbound: Improve policy metrics (#1237)
    
    We recently introduced metrics to help surface inbound policy decisions,
    but in practice these haven't been as useful as we might hope.
    Specifically, error metrics do not include the `target_addr` label so
    these metrics can't be correlated with servers, etc. This change
    improves error metrics and also introduces new metrics to describe
    authorization decisions: authorization denials shouldn't be classified
    as errors, really, anyway.
    
    This change also improves TCP forwarding authorization so that policy
    changes can be honored at runtime: previously authorized connections may
    dropped if the policy is updated so that the connection is no longer
    authorized.
    
    The gateway is also updated to enforce HTTP policies at runtime as well
    so that policy changes can be honored after the connection has been
    established.
    
    This change introduces new metrics:
    
    * `inbound_http_authz_allow_total`
    * `inbound_http_authz_deny_total`
    * `inbound_tcp_authz_allow_total`
    * `inbound_tcp_authz_deny_total`
    * `inbound_tcp_authz_terminate_total`
    
    _allow_ metrics include `target_addr`, `srv_name`, and `saz_name`
    labels. _deny_ and _terminate_ metics include only `target_addr` and
    `srv_name` labels.
    
    Authorization denials are no longer reflected in inbound_tcp_error or
    inbound_http_error metrics.
    
    A number of internal changes have been made to support this:
    
    * The `inbound::policy::authorize` module includes middlewares for TCP
      and HTTP authorization, replacing the prior method of enforcing policy
      in the stack/router. This module ensures that metrics are recorded for
      policy decisions.
    * The `error-metrics` crate has been removed. In its place a `monitor`
      type has been added to the `stack` crate, supporting a general way to
      observe errors, decoupled from the metrics registry.
    * Inbound and outbound error metrics are now tracked in the inbound and
      outbound crates, respectively. Inbound- and outbound-specific error
      types are also moved into their rspective crates.
    * The `app_core::errors` module has been updated to only define the
      types it needs to instrument the error response layer. Error responses
      are now primarily instrumented via the `HttpError` type so that errors
      that should be handled can be configured where the error is thrown.
      The error type now holds an underlying source error so that the error
      metrics layer can see through this wrapper type to track the
      underlying error cause.
    * Server & Authorization labels are no longer handled as a free-form
      maps. We currently read only the `name` label from each; and this
      label is required.

commit 6adffd24e105eb3a3f8bcf5d4d02fce7ad8d666c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 2 15:09:34 2021 -0700

    metrics: Add `target_ip` and `target_port` labels (#1238)
    
    The `target_addr` label encodes both the IP address and port in a single
    string. This makes certain grouping operations cumbersome.
    
    In order to support more flexible queries, this change adds `target_ip`
    and `target_port` labels in addition to the existing `target_addr`
    label. This should have a negligible impact on prometheus, since it
    doesn't actually increase timeseries cardinality.

commit 1627f353902e4709f09d3a735635bf4a2cdad85b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Sep 2 10:17:57 2021 -0700

    build(deps): bump tokio from 1.10.1 to 1.11.0 (#1236)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.10.1 to 1.11.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.10.1...tokio-1.11.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2e948ae2565f4d2b6e3749e2c2428d593da76b26
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 31 11:54:45 2021 -0700

    Rename push_on_response to push_on_service (#1235)
    
    The "on response" terminology is confusing: in all cases where we use
    push_on_response, we're actually pushing a layer that operates on a
    `NewService`'s returned `Service`. This rename helps to make this usage
    clearer.

commit d0878d527473d3ec5636d8a30ca154aa6a5b295d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 31 10:04:14 2021 -0700

    build(deps): bump trust-dns-resolver from `3d0667a` to `v0.21.0-alpha.2` (#1233)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `3d0667a` to `e28c341`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/3d0667a1b6b149cd5e42015c2538e3ab32bbd5f4...e28c3410b3c18cfb93079dd07f5734c71f440dd3)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit e0ee66d9a378d311d7401ca09bcb684ac2f1cda5
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 31 09:46:26 2021 -0700

    build(deps): bump parking_lot from 0.11.1 to 0.11.2 (#1234)
    
    Bumps [parking_lot](https://github.com/Amanieu/parking_lot) from 0.11.1 to 0.11.2.
    - [Release notes](https://github.com/Amanieu/parking_lot/releases)
    - [Changelog](https://github.com/Amanieu/parking_lot/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/Amanieu/parking_lot/compare/0.11.1...0.11.2)
    
    ---
    updated-dependencies:
    - dependency-name: parking_lot
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 10d6151e9ad53b95939c4071b8d4ef5fad1c9022
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 31 09:08:42 2021 -0700

    build(deps): bump futures from 0.3.16 to 0.3.17 (#1232)
    
    Bumps [futures](https://github.com/rust-lang/futures-rs) from 0.3.16 to 0.3.17.
    - [Release notes](https://github.com/rust-lang/futures-rs/releases)
    - [Changelog](https://github.com/rust-lang/futures-rs/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/futures-rs/compare/0.3.16...0.3.17)
    
    ---
    updated-dependencies:
    - dependency-name: futures
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a7257e8667507343ef63b25c540b271debc69660
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 31 09:08:17 2021 -0700

    build(deps): bump thiserror from 1.0.26 to 1.0.28 (#1231)
    
    Bumps [thiserror](https://github.com/dtolnay/thiserror) from 1.0.26 to 1.0.28.
    - [Release notes](https://github.com/dtolnay/thiserror/releases)
    - [Commits](https://github.com/dtolnay/thiserror/compare/1.0.26...1.0.28)
    
    ---
    updated-dependencies:
    - dependency-name: thiserror
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 88ff58f9727f3a071c2b5f9ba44a0c9092ccddf1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 31 09:07:57 2021 -0700

    build(deps): bump flate2 from 1.0.20 to 1.0.21 (#1230)
    
    Bumps [flate2](https://github.com/rust-lang/flate2-rs) from 1.0.20 to 1.0.21.
    - [Release notes](https://github.com/rust-lang/flate2-rs/releases)
    - [Commits](https://github.com/rust-lang/flate2-rs/compare/1.0.20...1.0.21)
    
    ---
    updated-dependencies:
    - dependency-name: flate2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2d2aadbb9a69b30c08318a8d93050a9aeb321cc2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 31 09:07:09 2021 -0700

    build(deps): bump serde_json from 1.0.66 to 1.0.67 (#1228)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.66 to 1.0.67.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.66...v1.0.67)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8e1084eec33ae3e5c0b7e5640ffc65d6dd91a427
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 27 09:48:01 2021 -0700

    Enable link-time optimizations (#1227)
    
    This change enables LTO for release builds, which reduces CPU and
    memory usage in load tests.
    
    This increases compile-time overhead, so we also update rust-toolchain
    to 1.55.0 beta7 (due out 2021/9/9), which substantially reduces compile-
    time overhead.

commit f6b1282900aa733030d8884afa915af25481e7da
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Aug 26 13:09:20 2021 -0700

    build(deps): bump libc from 0.2.100 to 0.2.101 (#1226)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.100 to 0.2.101.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.100...0.2.101)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 33bbfad73ae7ada32cac15ab807d637a678e2352
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Aug 26 13:09:05 2021 -0700

    build(deps): bump trust-dns-resolver from `f08860c` to `3d0667a` (#1225)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `f08860c` to `3d0667a`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/f08860cf8c02d43b8388869b3ea824518d0588aa...3d0667a1b6b149cd5e42015c2538e3ab32bbd5f4)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 828919ace90e07a1e9dd4b2a0a598fc883f43c52
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Aug 26 13:08:46 2021 -0700

    build(deps): bump arbitrary from 1.0.1 to 1.0.2 (#1224)
    
    Bumps [arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.1 to 1.0.2.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/compare/v1.0.1...v1.0.2)
    
    ---
    updated-dependencies:
    - dependency-name: arbitrary
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit df21cc40c5b1387aa468c2a95c468c24918c1f8e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 26 13:08:28 2021 -0700

    profiles: Avoid creating a default route stack (#1223)
    
    When the proxy resolves a service profile with routes that do not match
    any requests, we handle these requests on a 'default' route. This route
    does not have any labels and is generally superflous, inflating our
    metrics export unnecessarily.
    
    This change removes this behavior by instead skipping the route stack
    entirely when no routes are matched. In order to do this, we add some
    extra boxes so that we can handle the request & response types
    transparently.

commit 630b621bdfdfecdc76dfc5ac2251eb56158fb91b
Author: Matei David <matei@buoyant.io>
Date:   Thu Aug 26 18:36:36 2021 +0100

    Skip TLS and H2 when target is inbound IP (#1219)
    
    In order to prevent the proxy from forwarding inbound traffic to target
    IP addresses not in the list of inbound ips allowed by a pod, the proxy
    will be changed to also forward on the original destination rather than
    the original port on localhost. To support forwarding on the original
    destination address, an iptables rule that currently results in a
    traffic loop has to be dropped. The rule allows an app to call itself:
    when a packet is sent over lo as a network interface and the destination
    is not localhost, the packet is routed back through the inbound chain
    (essentially resulting in the following flow: appX -- outbound --
    inbound -- appX). The packets sent by the proxy are routed by the kernel
    through the loopback interface, however, when forwarding on the original
    destination, the destination address is no longer localhost (resulting
    in a traffic).
    
    Dropping the rule will break the edge case of an app calling itself
    since the packet will go through the outbound and from outbound straight
    to the process (packets on loopback skip nat prerouting tables so from
    outbound /it has/ to be redirected through rules to the inbound; inbound
    will not pick up the packet) -- the packet will be encrypted by the
    outbound side and also upgraded to H2 since the outbound does not know
    the receving end will not be another proxy.
    
    This change deals with this edge case: if our target destination is also
    part of the inbound ips then we will not do any TLS or upgrade the
    connection to H2. Packet generated by the outbound side of the proxy
    will now be sent straight to the application process who will be able to
    deal with it as if it came from the inbound side. To support this
    change, the list of inbound ips has been wired through the outbound
    configuration. On each endpoint, we cross check the target against our
    list of inbound ips -- if the target is an inbound ip, then we don't do
    any TLS (reason: loopback) and set the protocol hint as Unknown. This is
    done on both logical and direct connections; skipping TLS should be
    protocol agnostic.
    
    The gateway also had to be changed since it now supports logical and
    direct connections. Where the configuration is not wired through, we
    provide defaults (an empty set should still set TLS).
    
    N.B. we set this directly on an endpoint for direct communications
    however iptables currently has a rule which will forward a packet
    directly to the application process when the address used is the
    endpoint address (effectively skipping outbound). App X (ep addres) -->
    App X, App X (logical address) --> outbound --> App X.
    
    Signed-off-by: Matei David <matei@buoyant.io>

commit af31aab5ce015ebea0c3d647425c2a3efba8d418
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 26 09:37:16 2021 -0700

    inbound: Return HTTP-level authorization errors (#1220)
    
    The initial policy/authorization implementation only operates on
    connections. When an connection is not authorized, the connection is
    dropped and no information is passed back to the client. This also means
    that all authorizations are made at connect-time and policy
    changes--especially those that revoke access--are not observed
    until a new connection is established. This is at the very least
    awkward when trying to test policies.
    
    This change modifies the inbound proxy's behavior for HTTP connections:
    when a server configures a port to use (or be detected) as HTTP, the
    authorization decision is now deferred until a request is processed. As
    each request is handled, the policy's state is checked to determine
    whether the connection is still permitted. If the connection is not
    authorized, a `403 Forbidden` status code is returned for HTTP
    requests (and the grpc-status `PermissionDenied` is used for gRPC
    requests). The http error metrics also now reflect an `unauthorized`
    reason.
    
    This change, unfortunately, adds some wrinkles to our transport metric
    labeling: HTTP connections will no longer have a `saz_name`
    annotation--as no authorization policy is associated with these
    connections (though they will continue to include the `srv_name` from
    when the connection was established).

commit acc6e47fd9fffb623cd1c25cf4b34aa3e8c0e5b1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Aug 25 13:56:39 2021 -0700

    build(deps): bump bytes from 1.0.1 to 1.1.0 (#1222)
    
    Bumps [bytes](https://github.com/tokio-rs/bytes) from 1.0.1 to 1.1.0.
    - [Release notes](https://github.com/tokio-rs/bytes/releases)
    - [Changelog](https://github.com/tokio-rs/bytes/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/tokio-rs/bytes/compare/v1.0.1...v1.1.0)
    
    ---
    updated-dependencies:
    - dependency-name: bytes
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 5d60edbe646e2f409f4850236e1b042878a119c7
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Aug 25 13:55:58 2021 -0700

    build(deps): bump hyper from 0.14.11 to 0.14.12 (#1221)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.11 to 0.14.12.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.11...v0.14.12)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8687a02d30a029e58514bb4e037ec2dcaf6733e3
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Aug 25 08:22:06 2021 -0700

    build(deps): bump codecov/codecov-action from 2.0.2 to 2.0.3 (#1217)
    
    Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 2.0.2 to 2.0.3.
    - [Release notes](https://github.com/codecov/codecov-action/releases)
    - [Changelog](https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/codecov/codecov-action/compare/51d810878be5422784e86451c0e7c14e5860ec47...5a8bb4701eca7ba3673f21664b887f652c58d0a3)
    
    ---
    updated-dependencies:
    - dependency-name: codecov/codecov-action
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit cd917745b017bc8a0a16490d79937e34bc1cdfcb
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Aug 25 08:21:44 2021 -0700

    build(deps): bump tokio from 1.10.0 to 1.10.1 (#1218)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.10.0 to 1.10.1.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.10.0...tokio-1.10.1)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 80c65495b70809d2fe6dc789a1e397b45623a352
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 24 09:43:25 2021 -0700

    inbound: Expose permit labels on HTTP metrics (#1216)
    
    This change follows linkerd/linkerd2-proxy#1215, which exposes policy
    labels on inbound TCP server metrics, by adding these same labels to
    HTTP metrics.
    
    The HTTP router target types are updated to take a `Permit` which
    includes server and authz labels so that the inbound HTTP metrics can
    include these labels. This will enable `linkerd viz stat` to work on
    these resources. This change shouldn't impact metrics cardinality, since
    client IDs are already exposed in metrics labeling.

commit 7e5207ee3402fe42fdc67c910fc12c6109a83a4e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 23 16:57:00 2021 -0700

    Expose policy labels on inbound transport metrics (#1215)
    
    The inbound server only permits connections that are allowed by a
    policy, but this decision is not observable at runtime.
    
    This change modifies the server transport labels to include server and
    authorization labels--prefixed by `srv_` and `saz_`, respectively
    (matching the shortnames of the `Server` and `ServerAuthorization`
    resources).
    
    Furthermore, this change updates the `inbound_tcp_acept_errors_total`
    metric to include an `unauthorized` error variant to expose a counter of
    connections that were not permitted.

commit e9eaedce9463ec7c7229abd9480b2023ad5b55cf
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 23 14:51:01 2021 -0700

    policy: Add support for cluster-scoped default policies (#1210)
    
    The policy controller supports the default policies
    `cluster-authenticated` and `cluster-unauthenticated` but the proxy
    would error if configured with these policies. In order to use a single
    policy annotation honored by both the policy controller and proxy, this
    change adds support for a new configuration,
    `LINKERD2_POLICY_CLUSTER_NETWORKS`, that allows the proxy to enforce
    cluster-scoped defaults. When this configuration is not specified, the
    cluster-scoped defaults are not supported.
    
    This default will apply to all ports that are not documented in the
    pod's spec (i.e. ports not in the `LINKERD2_PROXY_INBOUND_PORTS`
    configuration).
    
    This change also updates policy labeling to track server and authz labels
    independently so that keys may overlap, as is required by linkerd/linkerd2#6722

commit 214106ba9f582d479be1fdf0e12f805d8fa10270
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 23 14:47:46 2021 -0700

    Use `ExtractParam` in transport metrics (#1211)
    
    Our transport metrics code is fairly old and doesn't take advantage of
    newer primitives, namely `ExtractParam`.
    
    This change:
    * Moves transport metrics code into a dedicated `transport-metrics crate`
      (it's got nothing in common with the rest of the proxy-transport code).
      Each logical chunk of functionality is moved into its own module.
    * Renames the `Connect` type to `Client; and `Accept` to `Server`--
      this is where we've gone with TLS code, etc.
    * Updates both the Connect and Server layers to be parameterized on an
      `ExtractParams` that is responsible for producing a metrics instance for
      each target. This eliminates the awkward mapping from target type to label
      type and in general decouples these layers from the details of how metrics
      are acquired.
    * The `app_core::transport::metrics` module provides an implementation of
      `ExtractParams` that can be used to build transport labels.
    
    This sets up upcoming changes to metrics infrastructure with the eventual goal
    being to decouple the metric names definition from the metrics tracking code.
    
    No functional changes.

commit 7e612f14e24e39e339c5ce1ceb44495ce75d816e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Aug 23 12:35:48 2021 -0700

    build(deps): bump libc from 0.2.99 to 0.2.100 (#1213)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.99 to 0.2.100.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.99...0.2.100)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 9329c2193ea4dd62e0b7ab6044e8da546cf942f2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Aug 23 12:33:43 2021 -0700

    build(deps): bump h2 from 0.3.3 to 0.3.4 (#1212)
    
    Bumps [h2](https://github.com/hyperium/h2) from 0.3.3 to 0.3.4.
    - [Release notes](https://github.com/hyperium/h2/releases)
    - [Changelog](https://github.com/hyperium/h2/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/h2/compare/v0.3.3...v0.3.4)
    
    ---
    updated-dependencies:
    - dependency-name: h2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b422203dc5f79121b69e4160391f1235c1ba3e20
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Aug 19 12:39:35 2021 -0700

    build(deps): bump httparse from 1.4.1 to 1.5.1 (#1208)
    
    Bumps [httparse](https://github.com/seanmonstar/httparse) from 1.4.1 to 1.5.1.
    - [Release notes](https://github.com/seanmonstar/httparse/releases)
    - [Commits](https://github.com/seanmonstar/httparse/compare/v1.4.1...v1.5.1)
    
    ---
    updated-dependencies:
    - dependency-name: httparse
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 822cd15493fd42f73876e43e80e2975491dd4e38
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 19 12:39:00 2021 -0700

    inbound: Discover policies from the control plane (#1205)
    
    We've recently introduced support for authorization policies. These
    policies are configured statically from the proxy's environment. This
    change adds an optional new mode to support dynamic configuration from
    the control plane.
    
    The proxy now supports new environment variables,
    `LINKERD2_PROXY_POLICY_SVC_{ADDR,NAME}` that may be set with the address
    and identity of the policy controller. When this is set, other static
    inbound port configurations (requiring identity, marking ports as
    opaque, etc) are ignored in favor of the results returned by the API.
    Instead, the proxy uses the `LINKER2_PROXY_INBOUND_PORTS` environment
    variable to discover the list of ports configured in the pod's spec and
    discovers the policies for each of these ports before admitting inbound
    connections. When a connection is received for a port not in this list,
    the `LINKERD2_PROXY_INBOUND_DEFAULT_POLICY` configuration is used to
    determine whether the connection may be permitted or whether it should
    be refused.
    
    This change modifies the set of default policies to support only `deny`,
    `all-authenticated` and `all-unauthenticated` (removing
    `all-mtls-unauthenticated`). Instead a
    `LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS` configuration is introduced
    to enable tls requirements for individual pods. This static
    configuration should only be necessary for the identity controller, in
    which case we need to use an unauthenticated default policy to permit
    kubernetes healtchecking probes; and we can use this new configuration
    to enforce a default policy on the gRPC API port.

commit 32b6d527720235a727ce5ec040eb40c94df2c8f0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Aug 18 14:17:41 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.19 to 0.2.20 (#1207)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.19 to 0.2.20.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.19...tracing-subscriber-0.2.20)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a55fd767b427f1ee37163e68c688e8cc614cf8f5
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Aug 13 12:08:58 2021 -0700

    build(deps): bump tokio from 1.9.0 to 1.10.0 (#1204)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.9.0 to 1.10.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.9.0...tokio-1.10.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b09f97c7154529a422e8671e57a59313d97cf3f0
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 12 11:41:34 2021 -0700

    inbound: Use policy protocol configurations (#1203)
    
    Per-port server policies include protocol hinting that is not currently
    honored.
    
    This change modifies the inbound detect stacks to only perform HTTP
    detection when the server policy indicates that detection should be
    pefromed. It also honors the per-port detect timeout configuration. When
    a port is documented as HTTP/1, HTTP/2, or gRPC, protocol detection is
    skipped and the configuration is used instead.
    
    When the port's protocol is documented to be application TLS, we check
    that authorization policies apply but we do not explicitly enforce that
    application TLS was present, since we may _additionally_ apply mesh TLS
    in these situations.

commit a7373cfd48ac8ec9fbe3dc0b362b1d0a945933ba
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 11 14:32:21 2021 -0700

    app: Block proxy initialization on identity readiness (#1202)
    
    Currently, the proxy may start serving connections even before identity
    is provisioned. This won't be feasible once we introduce policy
    discovery--the proxy will have to establish its inbound policy before
    serving inbound connections.
    
    This change modifies proxy initialization to block proxy initialization
    on identity. When identity isn't established, warnings are logged every
    15s.
    
    While this is a behavior change from the proxy's point of view, this
    shouldn't be a user-facing change, as container initialization is
    blocked on the proxy's readiness, which is dependent on identity
    initialization.

commit a066fa253823075f2a82e1e558e1a2ca58ea4803
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Aug 11 13:23:22 2021 -0700

    build(deps): bump softprops/action-gh-release from 0.1.11 to 1 (#1201)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 0.1.11 to 1.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/815e45857946b196197a116aa0def711ff7f8ecc...2d72d869af3bf23602f9593a1e3fd739b80ac1eb)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 69dbf631de9d7ce6ca4d88472f4bb74f8098ac22
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 11 11:48:07 2021 -0700

    app: Defer stack construction until the proxy starts (#1200)
    
    We currently eagerly build the inbound and outbound stacks. In an
    upcoming change, however, we'll want to ensure that we've obtained
    inbound port policies before initializing the inbound stack.
    
    This change modifies app initialization to move stack initialization
    into the proxy's start task. In order to do this, we eagerly bind the
    inbound/outbound listeners and provide the stream of incoming sockets to
    the stacks at construction-time.
    
    This doesn't actually change any behavior since stack construction was
    moved into a task that was run lazily. The change is purely internal,
    restructuring how/when this task is built.

commit 676b213f4e20ddfb1eea5b357b7d5c8757890e66
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 11 11:17:36 2021 -0700

    Use FromIterator for NameAddr construction (#1199)
    
    If we provide a `FromIterator` implementation for `NameAddr`, we need
    not have an extra import to construct `NameAddr`s when the type is
    known.
    
    No functional changes.

commit 0b0374f5a844855374c8d040372dc95763565b29
Author: JcdeA <jcde@jcde.xyz>
Date:   Wed Aug 11 10:10:56 2021 +0900

    Fix missing word in comment (#1178)
    
    Line 22 (https://github.com/linkerd/linkerd2-proxy/blob/cde2816a85e2e31ce5e95ba15f41934a178b9a96/linkerd/proxy/api-resolve/src/metadata.rs#L29) of linkerd/api-resolve/src/metadata.rs has a grammar issue, where the word "know" is missing.

commit 724db19e6de5f1dddbd10b84b87e8978e772dc31
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 10 18:01:13 2021 -0700

    build(deps): bump softprops/action-gh-release from 0.1.7 to 1 (#1188)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 0.1.7 to 1.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/fb0163a75bee697a9cfec2c931801de7c7f10042...815e45857946b196197a116aa0def711ff7f8ecc)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 709b48415fdc0d93a6530bb6926f73421a8bc4dd
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Aug 10 17:46:51 2021 -0700

    fuzzing: change `linkerd_dns::fuzz_target_1` to single-threaded (#1191)
    
    * fuzzing: change `linkerd_dns::fuzz_target_1` to single-threaded
    
    Something about the behavior of the fuzz logic for `linkerd_dns` is
    hitting [a recently added assertion][1] in Tokio's multithreaded runtime
    when shutting down. It's unclear what exactly triggers the assertion,
    but it appears to be environment-dependent in some way: I can't
    reproduce the failure on my machine using the reproducer generated by
    `cargo-fuzz`, but it fails reliably in cluster-fuzz (possibly related to
    the number of CPU cores on the cluster-fuzz servers?).
    
    Since the purpose of this fuzz test is to fuzz the DNS name parsing
    behavior, and this failure isn't actually related to the code being
    fuzzed, just the environment the fuzz test runs in, this branch changes
    the fuzz logic to use a single-threaded Tokio runtime. We'll continue
    trying to get a minimal repro of the crash to report upstream, but this
    should fix the fuzz test so that it can continue exercizing the DNS code
    we actually care about here.
    
    [1]: https://github.com/tokio-rs/tokio/blob/362df5a3172f6e1bdee2fd3808e5cfc730a111f6/tokio/src/runtime/thread_pool/worker.rs#L603
    
    * use single-threaded rt in all fuzz targets
    
    (or, in all the ones that use tokio, anyway)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit f289aafcc1c1e08d92a87b5509763d4f89dfec60
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 10 17:42:07 2021 -0700

    build(deps): bump tonic-build from 0.5.1 to 0.5.2 (#1197)
    
    Bumps [tonic-build](https://github.com/hyperium/tonic) from 0.5.1 to 0.5.2.
    - [Release notes](https://github.com/hyperium/tonic/releases)
    - [Changelog](https://github.com/hyperium/tonic/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/tonic/compare/v0.5.1...v0.5.2)
    
    ---
    updated-dependencies:
    - dependency-name: tonic-build
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0979111d35ca4fde770988f770f9022452065fa9
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 10 17:36:14 2021 -0700

    inbound: Introduce client authorization policies (#1192)
    
    linkerd/linkerd2#6485 introduces a new discovery API that supports
    richer authorization policies for inbound connections. This change
    introduces a `server-policy` crate that models the types in this API (to
    be built from gRPC types in a followup).  These types are used to
    replace the simplistic `AllowPolicy` types, supporting full client
    authorization policies in the inbound proxy.
    
    The `inbound::detect` tests have been narrowed/simplified and
    authorization checks have been moved into the `port_policies` module to
    exercise only the relevant authorization code.

commit a763e29f33e50fdd9b51b1a7cbba7b1d6cd45fd4
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 10 16:17:47 2021 -0700

    ci: Check test coverage weekly (#1198)
    
    Our coverage action is quite slow and is generally low-value in the
    context of a review. Instead of running it on every push to every PR,
    let's conserve our CI resources and generate coverage weekly.

commit ce8ae0903ba53c23dc09d3f3ccb1c7c17b55efdf
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 10 15:53:45 2021 -0700

    build(deps): bump tonic from 0.5.0 to 0.5.2 (#1194)
    
    Bumps [tonic](https://github.com/hyperium/tonic) from 0.5.0 to 0.5.2.
    - [Release notes](https://github.com/hyperium/tonic/releases)
    - [Changelog](https://github.com/hyperium/tonic/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/tonic/compare/v0.5.0...v0.5.2)
    
    ---
    updated-dependencies:
    - dependency-name: tonic
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 1de0f271cfa4fd7ce3a765590b87a826618d3af1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Aug 10 15:52:58 2021 -0700

    build(deps): bump libc from 0.2.98 to 0.2.99 (#1195)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.98 to 0.2.99.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.98...0.2.99)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7a9354716d25d7398f14b2ba753b91efa73d392c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Aug 10 15:10:26 2021 -0700

    fuzz: fix inbound fuzz logic expecting wrong IP address (#1193)
    
    PR #1179 changed the inbound HTTP fuzz logic, and added a mocked
    `Target` type similar to other stack tests. However, this introduced a
    bug, because the `Target::addr()` function, which returns the socket
    address that the mock TCP connector should expect the proxy to try to
    connect to, returns the (mocked) original destination address. Since the
    stack we build for the fuzz test maps the target IP address to localhost
    before calling into the connect stack (as the real proxy currently
    does), this means that we attempt to connect to an address the mock
    connector doesn't expect. Then, it panics and the fuzz test fails.
    
    This branch fixes this issue by changing `Target::addr` to return
    127.0.0.1:80 instead of 192.0.2.2:80. This should match what the proxy
    will actually attempt to connect to.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a5b2cf7e6802c81de2fc7e7fab7f3bd0d62c75d7
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Aug 9 14:52:53 2021 -0700

    build(deps): bump http-body from 0.4.2 to 0.4.3 (#1189)
    
    Bumps [http-body](https://github.com/hyperium/http-body) from 0.4.2 to 0.4.3.
    - [Release notes](https://github.com/hyperium/http-body/releases)
    - [Changelog](https://github.com/hyperium/http-body/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/http-body/compare/v0.4.2...v0.4.3)
    
    ---
    updated-dependencies:
    - dependency-name: http-body
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit dc4b6f51bb55f14826adfe172f4e1eeafe0328c7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Aug 9 13:34:58 2021 -0700

    inbound: test `AllowPolicy` variants that require TLS (#1185)
    
    There's currently [a TODO comment][1] in `inbound/detect.rs` about
    adding tests for testing `AllowPolicy::Authenticated`, which is not
    currently tested there because it requires mocking out TLS detection. PR
    #1184 added an additional `AllowPolicy`, `TlsUnauthenticated`, which
    also requires TLS detection to be simulated, so there are now two
    untested cases.
    
    This branch adds tests for the `AllowPolicy` variants that require TLS
    detection. This is implemented by splitting `push_detect` into separate
    `push_detect_http` and `push_detect_tls` methods. This way, we can
    now write tests in the module where a `ConditionalServerTls` is passed
    in, to test whether the `AllowPolicy` variants do the right thing with
    different TLS detection results.
    
    The new tests were initially written by writing out all the code
    procedurally for each test, and then refactoring them into a table
    driven test. Each test just configures the inbound stack and then calls
    a helper method with an array of inputs (`ConditionalServerTls`
    detection results) and expected outputs (should the connection be
    allowed or denied?), and an `AllowPolicy`. The test function then runs
    each case and asserts that the connection is allowed or denied depending
    on the input array.
    
    [1]: https://github.com/linkerd/linkerd2-proxy/blob/2706350ae060390c3ed20598aacb293a6996b80b/linkerd/app/inbound/src/detect.rs#L238
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 5a7897a3f4936e3a65d9f5d420f54637f4508b6f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Aug 9 09:03:00 2021 -0700

    build(deps): bump trust-dns-resolver from `af83717` to `f08860c` (#1186)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `af83717` to `f08860c`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/af83717b5bd156bdd7b52bbd4b2dbc23cc6be2c9...f08860cf8c02d43b8388869b3ea824518d0588aa)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit d843eb1d3621eb5bcb5585c3fc5dec2dda01d3e6
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Mon Aug 9 08:53:12 2021 -0600

    Remove unsafety from setting TcpStream keepalive (#1187)
    
    We now have a way to convert `tokio` -> `std` `TcpStream`s and
    use `socket2`'s `Socket::From<TcpStream>` impl to safely set a
    socket's keepalive option. This eliminates the need for us to use
    `unsafe` in the keepalive setter.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 2706350ae060390c3ed20598aacb293a6996b80b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Aug 5 10:23:10 2021 -0700

    inbound: support configurable default port policies (#1184)
    
    The proxy supports a [default port policy][1]. We currently hardcode a
    [default policy permitting all connections][2]. We should make this
    behavior configurable. This will enable the proxy-injector to set
    default behavior for each workload and, more imminently, we will be able
    to configure the identity proxy's behavior to require TLS. See
    linkerd/linkerd2#6606 for details.
    
    This branch adds a `LINKERD2_PROXY_INBOUND_DEFAULT_POLICY` environment
    configuration supporting the following values:
    
    * `authenticated`
    * `deny`
    * `tis-unauthenticated`
    * `unauthenticated`
    
    This was implemented by:
    
    * Adding a new `TlsUnauthenticated` variant to `AllowPolicy`. This
      variant allows all TLS connections, regardless of whether they have
      valid client identities.
    * Adding `FromStr` implementations for `AllowPolicy` and
      `DefaultPolicy` to allow them to be parsed from the environment
      variable.
    * Changing the env module to parse the default policy from the env var,
      rather than hardcoding it.
    
    Closes linkerd/linkerd2#6606
    
    [1]: https://github.com/linkerd/linkerd2-proxy/blob/2eb1671f0fde62dae5fb272608a276ad21a598ba/linkerd/app/inbound/src/port_policies.rs#L14-L26
    [2]: https://github.com/linkerd/linkerd2-proxy/blob/2eb1671f0fde62dae5fb272608a276ad21a598ba/linkerd/app/src/env.rs#L526

commit 6cf1b2851143b0a38ebd7e7fef19f3e693f8e28f
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Thu Aug 5 11:07:58 2021 -0600

    Tear down client connections when responses contain `l5d-proxy-error` header (#1180)
    
    Currently outbound proxy connections are not torn down when communicating with an inbound proxy that encounters a connection error with its application.
    
    In order to support this behavior, a two-part change is required:
    1. Add the `L5D-PROXY-ERROR` header. It is added to responses by an inbound proxy when it encounters a connection error with its application (closed by #1119)
    2. Tear down outbound connections when responses contain the `L5D-PROXY-ERROR` header
    
    A new `PeerProxyErrors` layer is introduced which is added to the outbound stack; it looks for responses that container the header. When a response does container the header, it uses the `ClientHandle` that is added to the request extensions to close the client connection.
    
    A test has been added which exercises this behavior and asserts that the client connection is closed after receiving a response that contains the header.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 2eb1671f0fde62dae5fb272608a276ad21a598ba
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 3 11:56:44 2021 -0700

    Split the inbound server into multiple modules (#1179)
    
    The `Inbound::push_server` stack builder is responsible for building all
    of the inbound stacks: the HTTP stack, the TCP forwarding stack, and the
    direct/gateway stack. Furthermore, most of these stacks rely on fixed
    target types (which makes them inflexible).
    
    This change refactors the inbound stack to setup for upcoming policy
    changes:
    
    1. A 'detect' stack is split out into a `push_detect` helper that only
       deals with protocol detection and dispatching connections to either
       the TCP forwarding stack or the HTTP handling stack.
    2. An 'accept' stack is split out into a `push_accept` helper that is
       responsible for extracting relevant connection metadata (client and
       orig dst addrs) and determining the policy to use for the connection.
    3. Each stack/module defines its own target types and other modules rely
       on param constraints instead of fixed target types.
    4. A `port_policies` module is introduced to model the existing per-port
       policies: whether identity is required and whether protocol detection
       should be skipped. Various auxiliary modules have been eliminated in
       favor of inlined target filters. This helps to make these stacks
       easier to reason about, as relevant logic isn't spread over multiple
       files.

commit 79de26ddddae3039488790e7562e8f39a61648c3
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 2 13:22:25 2021 -0700

    http: Use ExtractParam to support dynamic detect configuration (#1174)
    
    Following #1169, this change modifies the `detect` middleware to use
    `ExtractParam`. In doing this, it makes sense to modify the default
    implementations of `ExtractParam` so that we can provide a static
    configuration to the module that is cloned for all targets without
    modification.
    
    This change does not alter any functionality, but sets up to make the
    HTTP detection layer configured per-target.

commit fd2c1bb01b597e0e26de4e7bfca8e7401cd3e58a
Author: Oliver Gould <ver@buoyant.io>
Date:   Sat Jul 31 10:04:40 2021 -0700

    Add BoxTcp and BoxNewTcp service type aliases (#1177)
    
    We have BoxHttp and BoxNewHttp aliases that help reduce type
    boilerplate. This change adds similar aliases for TCP-forwarding stacks.

commit 46cd0d9969352352e33cd9307516bbf6f307f806
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jul 30 14:12:48 2021 -0700

    build(deps): bump serde_json from 1.0.65 to 1.0.66 (#1176)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.65 to 1.0.66.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.65...v1.0.66)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 1cff3aef82c203bf09ccce485506d7a29ca27308
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 30 13:30:24 2021 -0700

    Update to Rust v1.54.0 (#1175)
    
    See https://blog.rust-lang.org/2021/07/29/Rust-1.54.0.html

commit 5ab3951ca0c23d3785c2690ab422e787e1d2a2c0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jul 30 09:02:22 2021 -0700

    build(deps): bump async-trait from 0.1.50 to 0.1.51 (#1173)
    
    Bumps [async-trait](https://github.com/dtolnay/async-trait) from 0.1.50 to 0.1.51.
    - [Release notes](https://github.com/dtolnay/async-trait/releases)
    - [Commits](https://github.com/dtolnay/async-trait/compare/0.1.50...0.1.51)
    
    ---
    updated-dependencies:
    - dependency-name: async-trait
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f083f0a2aca87cad98c435216c42a4ab2ef3bd11
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jul 30 09:01:17 2021 -0700

    build(deps): bump serde_json from 1.0.64 to 1.0.65 (#1172)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.64 to 1.0.65.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.64...v1.0.65)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 089c03df6ec9d1df280f1ef3bdce7ef7ae24648d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jul 30 08:59:58 2021 -0700

    build(deps): bump socket2 from 0.4.0 to 0.4.1 (#1171)
    
    Bumps [socket2](https://github.com/rust-lang/socket2) from 0.4.0 to 0.4.1.
    - [Release notes](https://github.com/rust-lang/socket2/releases)
    - [Changelog](https://github.com/rust-lang/socket2/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/socket2/commits)
    
    ---
    updated-dependencies:
    - dependency-name: socket2
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 8d8d261096d988063a3f17757c1ca88507278180
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 30 08:57:41 2021 -0700

    inbound: Consolidate port-based switching (#1170)
    
    The `inbound::prevent_loop` module implements predicates for switching
    based on the target port. But there's no reason for this control flow to
    be decoupled from our stack consruction.
    
    In preparation for further changes to inbound-port-based policy, this
    change eliminates the `prevent_loop` module. The tcp connection stack is
    updated to handle loop detection (instead of the TCP forward stack) so
    that we are totally unable to initiate looping connections (i.e. if some
    higher part of the stack were to do something unexpected).

commit 6f7968f158073fc7dfcf7495bc1bad5b86b07904
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 28 11:40:40 2021 -0700

    stack: Introduce ExtractParam and InsertParam (#1169)
    
    Stack modules that take configuration take one of two approaches: they
    either use the `Param` trait to extract a configuration from the target
    or they take configuration at construction-time. For example, the TLS
    server module takes its detection timeout as an argument when
    constructing its layer. But we want to modify the inbound stack to
    configure detection timeouts dynamically, as informed by discovery; so
    it will no longer be appropriate to take this configuration when
    constructing the layer.
    
    This change introduces the `stack::ExtactParam` trait which lets us
    provide a _strategy_ to the TLS server layer. For now, strategy
    implementations ignore the target type, continuing to use a fixed
    timeout set during stack construction; but in an upcoming change we'll
    be able to modify some of these stacks to use the target to configure
    this value.
    
    The `ExtractParam` trait decouples this decision from the stack module:
    The TLS server module no longer cares whether the timeout is configured
    statically or dynamically.
    
    Furthermore, some stack modules may want to insert new paramters into
    the target. For instance, the TLS server inserts the connections TLS
    status into the target. We've generally managed this with tuples, but
    this leads to some britleness around the shape of the target.
    
    The `InsertParam` trait allows stacks to construct new target types
    other than tuples, though the existing implementations continue to
    construct tuples as before. This will support more complicated target
    type construction.
    
    This change updates the TLS server to use these new traits without
    altering its prior functionality. This sets up followup changes that
    will use this flexbility to configure the inbound stack based on
    per-port policies.

commit 9212acde8abe0044c51fa0b9b25b5558e087cbb0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 28 00:13:59 2021 -0700

    build(deps): bump softprops/action-gh-release from 0.1.6 to 1 (#1168)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 0.1.6 to 1.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/08e53e60c840b6d34ed49473f9ab939eb801dbc4...fb0163a75bee697a9cfec2c931801de7c7f10042)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 3b097f35fa0d130c7bbf7b223425b472ef20ef88
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 27 09:43:04 2021 -0700

    build(deps): bump softprops/action-gh-release (#1167)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 91409e712cf565ce9eff10c87a8d1b11b81757ae to 1. This release includes the previously tagged commit.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/91409e712cf565ce9eff10c87a8d1b11b81757ae...08e53e60c840b6d34ed49473f9ab939eb801dbc4)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2c2073cfd23f6e43c0687f4097c0f1c99950e6b5
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jul 26 09:05:27 2021 -0700

    build(deps): bump futures from 0.3.15 to 0.3.16 (#1166)
    
    Bumps [futures](https://github.com/rust-lang/futures-rs) from 0.3.15 to 0.3.16.
    - [Release notes](https://github.com/rust-lang/futures-rs/releases)
    - [Changelog](https://github.com/rust-lang/futures-rs/blob/0.3.16/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/futures-rs/compare/0.3.15...0.3.16)
    
    ---
    updated-dependencies:
    - dependency-name: futures
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a31622aaf5889c818d2c887faa691b29643e338f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jul 26 09:04:42 2021 -0700

    build(deps): bump codecov/codecov-action from 2.0.1 to 2.0.2 (#1165)
    
    Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 2.0.1 to 2.0.2.
    - [Release notes](https://github.com/codecov/codecov-action/releases)
    - [Changelog](https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/codecov/codecov-action/compare/c585afe366f940d214dc09df2664c06d7fe07052...51d810878be5422784e86451c0e7c14e5860ec47)
    
    ---
    updated-dependencies:
    - dependency-name: codecov/codecov-action
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 65b71eeb87e6346cca419395a12f0b75206178a0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jul 22 12:47:30 2021 -0700

    build(deps): bump hyper from 0.14.10 to 0.14.11 (#1163)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.10 to 0.14.11.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.10...v0.14.11)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e369eb89cec4b09ab17846955fa6f7d337554dc6
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jul 22 12:40:09 2021 -0700

    build(deps): bump tokio from 1.8.2 to 1.9.0 (#1162)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.8.2 to 1.9.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.8.2...tokio-1.9.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit c8ba39f3139272dbd2ef558aa661c77cead1953b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 21 13:34:56 2021 -0700

    error: Replace `Never` with `std::convert::Infallible` (#1158)
    
    We define an `error::Never` type that is effectively identical to the
    `std::convert::Infallible` type--and `Infallible` has a clearer name and
    provides implementations for more common traits. Most importantly, it's
    less surprising for new contributors.
    
    This change removes our `Never` type and re-exports `Infallible` from
    the `linkerd_error` crate.
    
    There are no functional changes.

commit 268b3bed4afdec6998e2f13b094e33282d4dc00b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 21 13:17:15 2021 -0700

    inbound: Reorganize server into smaller stacks (#1156)
    
    The inbound server stack is fairly large. While sketching out changes to
    support inbound policy, it's helpful to split this larger stack into a
    few smaller components (using the recently-introduced `map_stack`
    helper).
    
    This change:
    
    * Modifies `Inbound::push_http_server` to return a boxed service. This
      service was being boxed by `Inbound::into_server`. This change helps
      reduce boilerplate in our test utilities, too. (In fact, this change
      requires that we eliminate some unnecessary type constraints).
    * Changes `Inbound::to_tcp_connect` to `Inbound::into_tcp_connect`. The
      internal cloning is not necessary.
    * Changes `Inbound::into_server` to `Inbound::push_server`. Internally,
      this function now uses several calls to `map_stack` to build the
      inbound server stack.

commit 700ca59e2da619bccbec7f8fd48c534a751e8ffa
Author: Matei David <matei.david.35@gmail.com>
Date:   Wed Jul 21 20:41:13 2021 +0100

    Handle profile endpoint in Gateway outbound stack (#1157)
    
    In linkerd2/PR#6090, we noticed that when testing the StatefulSet
    changes with a service that sends a request from the source cluster and
    expects to be connected directly to a pod in the target cluster, the
    outbound side of the Gateway in the target cluster throws a 'BadDomain'
    error. When establishing a direct connection to a pod, the profile
    returned from the look-up will contain an endpoint and it will not
    contain a logical address.
    
    The 'BadDomain' error stems from how the Gateway handles outbound
    connections. If the profile does not include a logical address (i.e an
    authorityOverride), then the connection is failed. This change adds
    functionality to the Gateway to also consider endpoints received in the
    profile on the outbound side. Support for endpoint handling on the
    outbound side will unblock PR#6090.
    
    To test, I have added a unit test that will check the endpoint stack is
    considered when dealing with an endpoint in the profile. There are also
    manual tests done in conjunction with the changes from PR#6090.
    
    Signed-off-by: Matei David <matei@buoyant.io>

commit 853e95928c393d298f2029a6f4cbd4aa0072664b
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Wed Jul 21 12:07:05 2021 -0600

    app: Set the `l5d-proxy-error` header on synthesized responses (#1119)
    
    This change adds an `l5d-proxy-error` header to responses that fail with
    a proxying error, such as fail-fast errors, connection timeouts, etc.
    
    When the proxy synthesizes a response for these failed requests, the
    `l5d-proxy-error` is set with an error message.
    
    Currently this is just an informational header. In a future change, we'll
    update outbound proxies to handle such failures as if they were generated
    locally.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 63700ed3b3646fc369c0dca32c7cf7e8b1616565
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jul 19 12:59:46 2021 -0700

    build(deps): bump tokio from 1.8.1 to 1.8.2 (#1155)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.8.1 to 1.8.2.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.8.1...tokio-1.8.2)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f39eb890c5fa7790fd16a06dce3983e6b4b2d59e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jul 19 12:59:12 2021 -0700

    build(deps): bump codecov/codecov-action from 1.5.2 to 2.0.1 (#1153)
    
    Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 1.5.2 to 2.0.1.
    - [Release notes](https://github.com/codecov/codecov-action/releases)
    - [Changelog](https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/codecov/codecov-action/compare/29386c70ef20e286228c72b668a06fd0e8399192...c585afe366f940d214dc09df2664c06d7fe07052)
    
    ---
    updated-dependencies:
    - dependency-name: codecov/codecov-action
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 62c5b9d5378c8e6f90c08683c47f3613093bc104
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jul 19 10:12:43 2021 -0700

    metrics: add target_addr label to TCP accept error metrics (#1118)
    
    The TCP accept error metrics do not include any context about the target
    address/port, which makes them difficult to act on.
    
    This change adds a `target_addr` label to the
    `inbound_tcp_accept_errors_total` and
    `outbound_tcp_accept_errors_total` metrics.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit c1394873b7c61261f2a5216f812ff93c97e946c5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jul 19 10:00:22 2021 -0700

    Remove HTTP/2 keepalive configuration (#1149)
    
    linkerd/linkerd2#5988 describes a situation where our keepalive settings
    are incompatible with with Go's gRPC library's behavior. Until we can
    implement behavior that does not conflict with common client/server
    implementations, it seems most prudent to simply disable these settings
    by default (leaving TCP-level keepalives unchanged).

commit bbb6e4f0678d54a717a2ea49b8f2f08322981136
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 16 14:00:34 2021 -0700

    Update linkerd2-proxy-api to v0.2.0 (#1152)

commit 8f3b2b6528a9d181e14bc5070bae7fcb45140074
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 16 09:48:29 2021 -0700

    Add `map_stack` to inbound & outbound builders (#1148)
    
    We have 100+ lines of boilerplate from the inbound and outbound stack
    builders. This change introduces helpers: `Inbound::map_stack` and
    `Outbound::map_stack`. These helpers provide a way to map over the inner
    stack type, which eliminates the boilerplate of de/re-structruring the
    builder type.

commit 0cc9438a6d0043e337bc7370cb213b81060b3545
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 15 12:25:23 2021 -0700

    metrics: Fix metrics test code allowing incomplete matches (#1146)
    
    Currently, there's a bug in the metrics test code where a metric can
    match if it contains any of the expected labels, even if some are
    missing. This is because the test code assumes a metric will match, and
    sets the matched value to false if any expected label keys have
    unexpected values. However, if a label that the matcher is configured to
    expect isn't present at all in the actual metric, it is still
    considered matched. This allows tests to pass even if required labels
    aren't present, which is pretty bad.
    
    This branch fixes that bug by counting how many matches were found, and
    comparing it to the number of labels that are expected. If fewer labels
    were found, then the metric is not a match, even if all the found labels
    had the expected values.
    
    It turns out that a lot of the existing tests expect labels that are not
    actually present, and these were passing due to the bug. In particular,
    we expected transport metrics to have authority labels, but we don't
    actually add these to transport metrics, even when they were recorded
    from HTTP connections for which we do know an authority. AFAICT, we
    never added these labels, and it would be a pretty large change to add
    them when possible, so I'm pretty sure the tests are just incorrect,
    here. I've changed them not to expect these labels. But, if we actually
    meant to be adding authority labels to these metrics all along, I can
    try to fix that instead.
    
    Similarly, we expected the inbound target_addr label to be added to
    both peer="src" and peer="dst" transport metrics, but we don't
    actually add it in the proxy. Again, I think this is just a bug in the test
    code, so I've changed the tests to not expect it.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b6f70b9e613305b46f8fe147801d42f2dc09af4c
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 14 19:49:41 2021 -0700

    build(deps): bump tonic-build from 0.5.0 to 0.5.1 (#1141)
    
    Bumps [tonic-build](https://github.com/hyperium/tonic) from 0.5.0 to 0.5.1.
    - [Release notes](https://github.com/hyperium/tonic/releases)
    - [Changelog](https://github.com/hyperium/tonic/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/tonic/commits)
    
    ---
    updated-dependencies:
    - dependency-name: tonic-build
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f9c110aa72f42089a15d576711192a30f7012ba2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 14 18:40:35 2021 -0700

    build(deps): bump linkerd2-proxy-api from `5e4e190` to `e03dfe4` (#1143)
    
    Bumps [linkerd2-proxy-api](https://github.com/linkerd/linkerd2-proxy-api) from `5e4e190` to `e03dfe4`.
    - [Release notes](https://github.com/linkerd/linkerd2-proxy-api/releases)
    - [Commits](https://github.com/linkerd/linkerd2-proxy-api/compare/5e4e190df8fe3a2c869169a60b7ba78e2afe31b6...e03dfe4a6bdacc06c0d8bcf7fd670b5184708b0d)
    
    ---
    updated-dependencies:
    - dependency-name: linkerd2-proxy-api
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0d0c5e735a7a425517d5f8636b5341d9a668de21
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jul 14 11:50:21 2021 -0700

    metrics: factor out `NewService` for target-scoped metrics (#1117)
    
    While working on adding a target port label to the TLS detection failure
    metrics added in #1114, I realized that there was some boilerplate code
    for scoping metrics based on a label from a target that was basically
    repeated between `linkerd-http-metrics` and `linkerd-transport`'s
    `metrics` module, and that this boilerplate code would have to be
    rewritten a third time for adding target port labels to the TLS
    detection metrics.
    
    Instead of rewriting this code a third time, I factored it out into a
    `NewMetrics` type in the `linkerd-metrics` crate, which given a registry
    of scopes, a `NewService`, and a metrics service type that can be
    constructed from the `NewService`'s service and the registry's metrics,
    implements `NewService` by wrapping the inner service with a metrics
    service scoped for the target's labels. The `linkerd-http-metrics`
    crate's `NewHttpMetrics` and the `linkerd-transport` crate's
    `metrics::MakeAccept` can both be replaced with the new `NewMetrics`
    type.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit eb381722401147c1a2f296e4ccac2e9387aff8f0
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 14 09:54:14 2021 -0700

    metrics: Use `parking_lot::Mutex` in telemetry (#1142)
    
    PR #1117 includes a change to move some uses of `std::sync::Mutex` to
    `parking_lot::Mutex`, as the latter implementation is generally more
    efficient.
    
    This change updates all telemetry-related uses of Mutex with the
    implementation in `parking_lot`.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 0280121b84dbdc0c63a4fd3fe2bca9a7337a00ee
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 13 13:12:36 2021 -0700

    build(deps): bump trust-dns-resolver from `9b46575` to `af83717` (#1140)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `9b46575` to `af83717`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/9b46575f52a22853310c9dce1b8c0a0401226e42...af83717b5bd156bdd7b52bbd4b2dbc23cc6be2c9)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 771271665a26d8b77eb9b0ca8b3bcb7707ff4cab
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 13 08:21:16 2021 -0700

    build(deps): bump trust-dns-resolver from `9048a39` to `9b46575` (#1139)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `9048a39` to `9b46575`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/9048a39d3910a4727c0dc871fe53d19ad0a9b46b...9b46575f52a22853310c9dce1b8c0a0401226e42)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2a0fc298cf61a097769e9164c73796c900e23f8d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jul 9 11:24:13 2021 -0700

    inbound: add `inbound_tls_detect_error_total` metric (#1114)
    
    Currently, the proxy does not expose metrics reflecting errors
    encountered when accepting TCP connections. This most notably
    hides TLS detection issues.
    
    This change introduces two new metrics:
    `inbound_tcp_accept_errors_total` and `outbound_tcp_accept_errors_total`.
    
    These metrics include an `error` label indicating whether a TLS detection
    timeout was encountered, an I/O error was encountered, or whether some other
    error was encountered. These labels will be enhanced in followup changes.
    
    Fixes linkerd/linkerd2#6268
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit e908293a8dbd0d80c719fdc36e3d4ba745eb0926
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jul 9 07:53:26 2021 -0700

    build(deps): update `tonic`, `prost`, and  `linkerd2-proxy-api` (#1137)
    
    This updates `prost`, `prost-types`, and `prost-build` to v0.8, which
    includes a fix for a panic (and potential denial-of-service attack) when
    converting a protobuf duration into a Rust `Duration`. Although we don't
    use the vulnerable APIs in the proxy or in `linkerd2-proxy-api`, this is
    necessary in order to fix a RUSTSEC advisory warning. In order to update
    `prost`, we must also update `tonic` and `tonic-build` to v0.5, which
    depends on `prost` 0.8, and update the `linkerd2-proxy-api` crate to
    include linkerd/linkerd2-proxy-api#71.
    
    Since these crates all depend on each other, we need to update them all
    at the same time. Dependabot has opened separate PRs for these crates,
    but none of them will pass CI, since they depend on incompatible
    versions. This PR, on the other hand, should pass, since it updates all
    the crates atomically in one commit. Also, some minor code changes
    were required due to breaking API changes in `tonic` 0.5.
    
    Closes #1134, #1135, and #1136; should fix CI.

commit b98c13dc29e6e8d5608ebc1b7aafc936f5ca77a8
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jul 8 16:38:27 2021 -0700

    Replace the `request_error_total` metric (#1133)
    
    We currently expose a single `request_errors_total` metric with a
    `direction` label that indicates whether the error is on the inbound or
    outbound proxy. This is in-line with many of our other metrics; but this
    conflicts with prometheus best practices as we do not necessarily
    maintain a uniform set of labels for all instances of a metric.  To
    correct this, we want to adopt a scheme of using distinct metrics for
    differing scopes with differing labels.
    
    This change replaces the single `request_errors_total` metric with two
    new metrics: `inbound_http_errors_total` and
    `outbound_http_errors_total`.
    
    As it turns out, the `request_errors_total` metric isn't actually
    consumed anywhere in the _linkerd2_ repo, so this change can be made
    safely without requiring control-plane changes. In follow-up changes, we
    should probably include additional labels on these metrics to reflect
    the stack targets; and then we should surface these errors elsewhere in
    Linkerd.
    
    This change also sets up introducing additional error metrics, for
    instance to surface TLS detection errors, by decoupling the error-metrics
    middleware from a specific metric.

commit d90a4fb0ab0c7bd2a0a95316a418f2cc0c222f3e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 7 13:26:15 2021 -0700

    build(deps): bump hyper from 0.14.9 to 0.14.10 (#1132)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.9 to 0.14.10.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.9...v0.14.10)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 95b50314ce7b7dee163140ed790c906e9093d18b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 7 13:25:00 2021 -0700

    build(deps): bump tokio-stream from 0.1.6 to 0.1.7 (#1131)
    
    Bumps [tokio-stream](https://github.com/tokio-rs/tokio) from 0.1.6 to 0.1.7.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-stream-0.1.6...tokio-stream-0.1.7)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-stream
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b60ab0cebccc6aa7d46f8ba1b476c083dbf21fac
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 7 13:24:03 2021 -0700

    build(deps): bump tokio from 1.8.0 to 1.8.1 (#1130)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.8.0 to 1.8.1.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.8.0...tokio-1.8.1)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit df799856fbd8c59ca83fd22fb538a4d54d76deb1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jul 7 13:23:49 2021 -0700

    build(deps): bump libc from 0.2.97 to 0.2.98 (#1129)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.97 to 0.2.98.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.97...0.2.98)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 33da475740b852b9e75fe2d525e51a97509e4167
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 6 16:38:52 2021 -0700

    tls: always use `tokio-rustls` re-export of `rustls` (#1122)
    
    The `tokio-rustls` crate includes a public re-export of `rustls`. This
    is intended to allow user code to use the *same* version of `rustls`
    that `tokio-rustls` depends on, without having to manage a separate
    `rustls` dependency.
    
    This commit removes all explicit `rustls` dependencies from
    `Cargo.toml`, and replaces all imports from `rustls` with
    `tokio_rustls::rustls`. The advantage of this is that it is now much
    easier to keep the `tokio-rustls` and `rustls` dependencies in sync; we
    can now change only the `tokio-rustls` dependency, and we'll always have
    the `rustls` version that `tokio-rustls` depends on.
    
    Furthermore, cargo-deny will now only permit dependencies on `rustls` via
    `tokio-rustls`.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit f334e094e5f0f1b2b99724528d3f54df1c534e59
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 6 16:14:54 2021 -0700

    build(deps): bump linkerd2-proxy-api from `48f13d6` to `def4e32` (#1128)
    
    Bumps [linkerd2-proxy-api](https://github.com/linkerd/linkerd2-proxy-api) from `48f13d6` to `def4e32`.
    - [Release notes](https://github.com/linkerd/linkerd2-proxy-api/releases)
    - [Commits](https://github.com/linkerd/linkerd2-proxy-api/compare/48f13d65431c49ee5bdebc1bcd81df583ab5683d...def4e323b26e04f177c53f8f14a9ff7c82830721)
    
    ---
    updated-dependencies:
    - dependency-name: linkerd2-proxy-api
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 671aaac21d88fa679e71a7b70eac7e22ad8fb5ba
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 6 15:56:28 2021 -0700

    build(deps): bump thiserror from 1.0.25 to 1.0.26 (#1127)
    
    Bumps [thiserror](https://github.com/dtolnay/thiserror) from 1.0.25 to 1.0.26.
    - [Release notes](https://github.com/dtolnay/thiserror/releases)
    - [Commits](https://github.com/dtolnay/thiserror/compare/1.0.25...1.0.26)
    
    ---
    updated-dependencies:
    - dependency-name: thiserror
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit bbd26f00c3c52a340decf6cda1121a174a122816
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 6 15:54:04 2021 -0700

    build(deps): bump tokio from 1.7.1 to 1.8.0 (#1126)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.7.1 to 1.8.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.7.1...tokio-1.8.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2290a2b04d054905b7467a415a38e5d1c3b3259f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jul 6 14:50:02 2021 -0700

    build(deps): bump trust-dns-resolver from `be0324a` to `9048a39` (#1125)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `be0324a` to `9048a39`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/be0324ab353710d1775d6f5d6ca132a0025ab221...9048a39d3910a4727c0dc871fe53d19ad0a9b46b)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 497db015e2d2a3b4770e75ff528d357403938b5c
Author: Dezhi Wu <wu543065657@163.com>
Date:   Wed Jul 7 05:49:05 2021 +0800

    docs: Fix some compile errors that occur in `cargo doc` (#1115)
    
    `cargo doc` failed with errors, mostly related to URL linking.
    
    The project has been updated to avoid these failures and a CI job has been
    added to prevent regressions.
    
    Signed-off-by: Persevere Von <wu543065657@163.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 79b133eff01db577a9cfe248accd29f749b8d78d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Fri Jul 2 10:02:03 2021 -0700

    build(deps): bump trust-dns-resolver from `57b131f` to `be0324a` (#1121)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `57b131f` to `be0324a`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/57b131f7dca7d8d70d2ef06117c6884ae44e52b8...be0324ab353710d1775d6f5d6ca132a0025ab221)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit be7454958b530c349cab985b2f92856b0a364163
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jun 29 14:43:35 2021 -0700

    build(deps): bump indexmap from 1.6.2 to 1.7.0 (#1120)
    
    Bumps [indexmap](https://github.com/bluss/indexmap) from 1.6.2 to 1.7.0.
    - [Release notes](https://github.com/bluss/indexmap/releases)
    - [Commits](https://github.com/bluss/indexmap/compare/1.6.2...1.7.0)
    
    ---
    updated-dependencies:
    - dependency-name: indexmap
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ebc20dda90483a4cf784e5d3e95160f2ca61605d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jun 28 12:43:28 2021 -0700

    build(deps): bump tracing-subscriber from 0.2.18 to 0.2.19 (#1116)
    
    Bumps [tracing-subscriber](https://github.com/tokio-rs/tracing) from 0.2.18 to 0.2.19.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-subscriber-0.2.18...tracing-subscriber-0.2.19)
    
    ---
    updated-dependencies:
    - dependency-name: tracing-subscriber
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 13e2977279ed8e84720da37d7c8e17ba8dfa6bc0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jun 22 10:10:41 2021 -0700

    build(deps): bump drain from 0.0.1 to 0.1.0 (#1112)
    
    Bumps [drain](https://github.com/linkerd/drain-rs) from 0.0.1 to 0.1.0.
    - [Release notes](https://github.com/linkerd/drain-rs/releases)
    - [Commits](https://github.com/linkerd/drain-rs/compare/v0.0.1...v0.1.0)
    
    ---
    updated-dependencies:
    - dependency-name: drain
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 3ff91dd6713639cc6ccacd704ed838bfc13f6612
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jun 22 09:38:17 2021 -0700

    build(deps): bump tokio from 1.7.0 to 1.7.1 (#1113)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.7.0 to 1.7.1.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.7.0...tokio-1.7.1)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 33af2f5666392a0f1433ec9980c79d1276a1a3f5
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Tue Jun 22 09:37:14 2021 -0700

    build(deps): bump trust-dns-resolver from `ed9f05b` to `57b131f` (#1111)
    
    Bumps [trust-dns-resolver](https://github.com/bluejekyll/trust-dns) from `ed9f05b` to `57b131f`.
    - [Release notes](https://github.com/bluejekyll/trust-dns/releases)
    - [Commits](https://github.com/bluejekyll/trust-dns/compare/ed9f05b102755178f3aa23f09c368b66d5972950...57b131f7dca7d8d70d2ef06117c6884ae44e52b8)
    
    ---
    updated-dependencies:
    - dependency-name: trust-dns-resolver
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 3d22b65af845a8a53b5541c0c2615f67f2bbe750
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Mon Jun 21 07:56:15 2021 -0700

    build(deps): bump mimalloc from 0.1.25 to 0.1.26 (#1110)
    
    Bumps [mimalloc](https://github.com/purpleprotocol/mimalloc_rust) from 0.1.25 to 0.1.26.
    - [Release notes](https://github.com/purpleprotocol/mimalloc_rust/releases)
    - [Commits](https://github.com/purpleprotocol/mimalloc_rust/compare/v0.1.25...v0.1.26)
    
    ---
    updated-dependencies:
    - dependency-name: mimalloc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7e75e19654a6e94d7097f4bc90b5085bfb407ac6
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 21 07:55:58 2021 -0700

    build(deps): Remove version comments from Actions (#1109)
    
    Now that actions versions are managed by dependabot, there's no use in
    having to manually maintain version comments.

commit 3290ab19c2dbdd34332cbfc819cfcd624e50724a
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jun 18 09:40:40 2021 -0700

    build(deps): Update Rust to v1.53.0 (#1108)
    
    More info at https://github.com/rust-lang/rust/releases/tag/1.53.0

commit 0fa39ed802a75ef297c5c18069c5551bbdd622f9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 17 15:24:07 2021 -0700

    replace `linkerd-concurrency-limit` with Tower (#1107)
    
    tower-rs/tower#574 added a `GlobalConcurrencyLimitLayer` which has the
    same behavior as our `linkerd-concurrency-limit` crate (sharing a single
    semaphore across all instances of a service). This was published in
    Tower 0.4.8, and now that we've updated to that version, we can remove
    our implementation in favor of upstream.

commit 634a5fde1220ca60986153548672ae9ffd8f7bc8
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 17 15:13:06 2021 -0700

    config: add a `PortSet` type (#1106)
    
    This branch adds a `PortSet` type that's a simple wrapper around
    `std::collections::HashSet` but specialized for storing ports (`u16`
    values). The `PortSet` type overrides the default hasher so that we
    don't have to actually hash ports, and just use their numeric value.

commit 3d0c1cce89d67baed80457b8bb377bd9d6fbeacd
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 17 14:35:23 2021 -0700

    build(deps): Update trust-dns to v0.21.0-alpha.1 (#1105)
    
    trust-dns has begun preparations for the v0.21.0 release. This change
    updates our git dependency to use the most recent version.

commit cde2816a85e2e31ce5e95ba15f41934a178b9a96
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 17 13:25:42 2021 -0700

    Remove unneeded uses of indexmap (#1048)
    
    We initially adopted `indexmap` in many places where it's not strictly
    necessary: we don't actually rely on the data being insert-ordered and
    don't need to mutate the structure while iterating over it. In fact, the
    traffic split module is the only place in the codebase where we access
    the data structure by index (rather than by key).
    
    In all other cases, we do not care about insertion-order. In the vast
    majority of cases we can simply use a `HashMap`. Endpoint and route
    labels need to be reliably ordered so that they can be compared (i.e.
    implementing `Eq`), in which case the standard `BTreeMap` works
    sufficiently.
    
    This change eliminates unnecessary uses of `indexmap` to reduce
    dependency and conceptual overhead.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 7066e7db0de2a0da15e25af72ef2159a0c7f87d2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 19:38:59 2021 +0000

    build(deps): bump actions/download-artifact from 2.0.9 to 2.0.10 (#1104)

commit 203ad7764a465ce1011c4b34909ba91971bb026f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 18:50:23 2021 +0000

    build(deps): bump libfuzzer-sys from 0.4.0 to 0.4.2 (#1103)

commit 1f1b2fd599a3f7dfaf08b31e758e6bdaaf0413be
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 18:43:49 2021 +0000

    build(deps): bump tower from 0.4.7 to 0.4.8 (#1102)

commit c8a20e43bcfa681e289d38152289582a437f49cc
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 11:33:23 2021 -0700

    build(deps): bump regex from 1.4.6 to 1.5.4 (#1100)
    
    Bumps [regex](https://github.com/rust-lang/regex) from 1.4.6 to 1.5.4.
    - [Release notes](https://github.com/rust-lang/regex/releases)
    - [Changelog](https://github.com/rust-lang/regex/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/regex/compare/1.4.6...1.5.4)
    
    ---
    updated-dependencies:
    - dependency-name: regex
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 4bea6ae1bb772502e7016b61980818a7a620a4ec
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 11:32:27 2021 -0700

    build(deps): bump hdrhistogram from 7.2.0 to 7.3.0 (#1099)
    
    Bumps [hdrhistogram](https://github.com/HdrHistogram/HdrHistogram_rust) from 7.2.0 to 7.3.0.
    - [Release notes](https://github.com/HdrHistogram/HdrHistogram_rust/releases)
    - [Changelog](https://github.com/HdrHistogram/HdrHistogram_rust/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/HdrHistogram/HdrHistogram_rust/compare/v7.2.0...v7.3.0)
    
    ---
    updated-dependencies:
    - dependency-name: hdrhistogram
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2c91668cb33bd70e80e4c8bce5022fc06aa6a76e
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 17:53:12 2021 +0000

    build(deps): bump tracing from 0.1.25 to 0.1.26 (#1098)

commit a787e57c0126432f615080f7aff4b9430f1e4c81
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 17:42:23 2021 +0000

    build(deps): bump http-body from 0.4.0 to 0.4.2 (#1097)

commit 37be6185c05a7c6203a462641a0ac3b2cbd1f7a5
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 17:35:14 2021 +0000

    build(deps): bump tracing-subscriber from 0.2.17 to 0.2.18 (#1096)

commit 904d5a6270dd6d8eb19f6081c85869f09a50fdf5
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 17:25:45 2021 +0000

    build(deps): bump async-trait from 0.1.42 to 0.1.50 (#1095)

commit 861dca920f10609e141234f5bc710dbaa48350b1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 10:24:30 2021 -0700

    build(deps): bump rustls from 0.19.0 to 0.19.1 (#1094)
    
    Bumps [rustls](https://github.com/ctz/rustls) from 0.19.0 to 0.19.1.
    - [Release notes](https://github.com/ctz/rustls/releases)
    - [Changelog](https://github.com/ctz/rustls/blob/main/OLDCHANGES.md)
    - [Commits](https://github.com/ctz/rustls/compare/v/0.19.0...v/0.19.1)
    
    ---
    updated-dependencies:
    - dependency-name: rustls
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a4acad7964d8222a3e928837e85000e29745de83
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 15:20:08 2021 +0000

    build(deps): bump http from 0.2.3 to 0.2.4 (#1092)

commit ab42259a7d01a958c65511d71d6c3a3a8e0ff579
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 08:02:11 2021 -0700

    build(deps): bump libc from 0.2.86 to 0.2.97 (#1093)
    
    Bumps [libc](https://github.com/rust-lang/libc) from 0.2.86 to 0.2.97.
    - [Release notes](https://github.com/rust-lang/libc/releases)
    - [Commits](https://github.com/rust-lang/libc/compare/0.2.86...0.2.97)
    
    ---
    updated-dependencies:
    - dependency-name: libc
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ec92559803e5eabe23be44620c3d30ba0fba494a
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 14:32:20 2021 +0000

    build(deps): bump tokio-util from 0.6.5 to 0.6.7 (#1090)

commit 151f3d643a3b74276f7453e4b0294b8f1afbdfb1
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Thu Jun 17 14:31:01 2021 +0000

    build(deps): bump mimalloc from 0.1.24 to 0.1.25 (#1089)

commit 8fa04f5d14e45759934f682a4bb453cf3808c539
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 17:48:54 2021 -0700

    build(deps): bump tokio from 1.6.1 to 1.7.0 (#1079)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.6.1 to 1.7.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.6.1...tokio-1.7.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 514d057968895f650d58b72077e56db6e8ca6724
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 16 17:08:16 2021 -0700

    fuzz: Omit lockfiles from version control (#1088)
    
    Each fuzz directory has its own Cargo.lock file because these crates
    cannot be a part of the the top-level workspace while cargo-fuzz requies
    nightly features. But these lockfiles are frequently invalidated by
    non-fuzzing dependency changes and are slow and painful to regenerate.
    
    This change deletes these lockfiles from this repository and adds them
    to .gitignore. The trade-off is that fuzzers may run against more recent
    dependencies but, now that we're using dependabot, we don't expect much
    version skew here.
    
    We continue to validate that fuzzers build in CI; and fuzzer projects
    remain under dependabot control so the Cargo.toml files are updated as
    appropriate.

commit e3d39f3b68ff1016fb09411f9f6e61bf0d6345f9
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 16 16:36:59 2021 -0700

    build(deps): Skip coverage by PR title (#1087)
    
    e0e2b3407 updated the coverage action to be skipped when the
    `dependencies` label is set, but in practice dependabot sets labels
    after the PR is actually created, so the action can fire before the
    label is present.
    
    This change updates the coverage action to look at the PR title and skip
    coverage when the title begins with `build(deps): `.

commit d6d1708dadc53261fb09220470f6f87e0dc6a2c7
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 16:36:44 2021 -0700

    build(deps): bump tokio-stream from 0.1.5 to 0.1.6 (#1082)
    
    Bumps [tokio-stream](https://github.com/tokio-rs/tokio) from 0.1.5 to 0.1.6.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-stream-0.1.5...tokio-stream-0.1.6)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-stream
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>

commit b5a00f0461d64f976fb3dbabc0139a3162ecb9b2
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 16:02:49 2021 -0700

    build(deps): bump serde_json from 1.0.62 to 1.0.64 (#1086)
    
    Bumps [serde_json](https://github.com/serde-rs/json) from 1.0.62 to 1.0.64.
    - [Release notes](https://github.com/serde-rs/json/releases)
    - [Commits](https://github.com/serde-rs/json/compare/v1.0.62...v1.0.64)
    
    ---
    updated-dependencies:
    - dependency-name: serde_json
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7e7a5bbfe35f2a19d8ea1f69472e5a518d729f4b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 16:01:36 2021 -0700

    build(deps): bump async-stream from 0.3.0 to 0.3.2 (#1084)
    
    Bumps [async-stream](https://github.com/tokio-rs/async-stream) from 0.3.0 to 0.3.2.
    - [Release notes](https://github.com/tokio-rs/async-stream/releases)
    - [Commits](https://github.com/tokio-rs/async-stream/compare/v0.3.0...v0.3.2)
    
    ---
    updated-dependencies:
    - dependency-name: async-stream
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit c6a4c32e33e465b684fd5514baf0a7b66a62be3f
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 16:01:06 2021 -0700

    build(deps): bump thiserror from 1.0.23 to 1.0.25 (#1081)
    
    Bumps [thiserror](https://github.com/dtolnay/thiserror) from 1.0.23 to 1.0.25.
    - [Release notes](https://github.com/dtolnay/thiserror/releases)
    - [Commits](https://github.com/dtolnay/thiserror/compare/1.0.23...1.0.25)
    
    ---
    updated-dependencies:
    - dependency-name: thiserror
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit f981202fee199b38e2c85f9d934fedf1860555b1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 16 15:50:42 2021 -0700

    outbound: replace `sleep`s in test with `yield_now` (#1085)
    
    These don't actually *need* to advance the mock clock --- they are just
    intended to make the current task yield so the background task can
    observe updates. Replacing them with `yield_now` expresses intent more
    accurately.
    
    Also, this seems to fix the test failing after upgrading to tokio
    1.6.2+, presumably related to tokio-rs/tokio#3852. I'm still trying to
    figure out _why_ exactly this fixes the test (and why it breaks in the
    first place), but at least this PR will get CI passing on Tokio 1.7.0.
    
    See here for details:
    https://github.com/linkerd/linkerd2-proxy/pull/1079#issuecomment-862750060

commit a24a458281633f0ca4e4613274c022b6412e4891
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 15:37:46 2021 -0700

    build(deps): bump arbitrary from 1.0.0 to 1.0.1 (#1083)
    
    Bumps [arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.0 to 1.0.1.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/commits)
    
    ---
    updated-dependencies:
    - dependency-name: arbitrary
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e57a56393f0ac66693df210166a18fd6dd1ce7d8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 13:34:52 2021 -0700

    build(deps): bump pin-project from 1.0.5 to 1.0.7 (#1078)
    
    Bumps [pin-project](https://github.com/taiki-e/pin-project) from 1.0.5 to 1.0.7.
    - [Release notes](https://github.com/taiki-e/pin-project/releases)
    - [Changelog](https://github.com/taiki-e/pin-project/blob/main/CHANGELOG.md)
    - [Commits](https://github.com/taiki-e/pin-project/compare/v1.0.5...v1.0.7)
    
    ---
    updated-dependencies:
    - dependency-name: pin-project
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 891c5f69ed1359a510caa36eb94b17888c6aa596
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 13:33:19 2021 -0700

    build(deps): bump tokio-test from 0.4.0 to 0.4.2 (#1076)
    
    Bumps [tokio-test](https://github.com/tokio-rs/tokio) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/commits/tokio-test-0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: tokio-test
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7da97aaa9e4319c28b7c79069da5c0125199f306
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 13:32:23 2021 -0700

    build(deps): bump rand from 0.8.3 to 0.8.4 (#1077)
    
    Bumps [rand](https://github.com/rust-random/rand) from 0.8.3 to 0.8.4.
    - [Release notes](https://github.com/rust-random/rand/releases)
    - [Changelog](https://github.com/rust-random/rand/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-random/rand/compare/0.8.3...0.8.4)
    
    ---
    updated-dependencies:
    - dependency-name: rand
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e53520a0fe5b5efbc090d8b4c56288d976e3ea13
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 13:25:00 2021 -0700

    build(deps): bump indexmap from 1.6.1 to 1.6.2 (#1075)
    
    Bumps [indexmap](https://github.com/bluss/indexmap) from 1.6.1 to 1.6.2.
    - [Release notes](https://github.com/bluss/indexmap/releases)
    - [Commits](https://github.com/bluss/indexmap/compare/1.6.1...1.6.2)
    
    ---
    updated-dependencies:
    - dependency-name: indexmap
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e0e2b3407f40f377c1d290e8e0e9042ae3de036f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 16 13:24:09 2021 -0700

    ci: Skip coverage tests on dependencies-only changes (#1074)
    
    There's no value in running coverage tests against dependabot changes.

commit bc3a4cf8bbdc5c992a62808acc248190a7b21c32
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 16 13:01:34 2021 -0700

    Update tonic to v0.4.3 (#1080)
    
    We updated tonic-build without updating tonic. There was a hidden API
    breakage such that the old tonic version could not be used.
    
    See https://github.com/hyperium/tonic/issues/683

commit a813104f1e7f6012c2d0709ff1bf96a59982e660
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:42:20 2021 -0700

    build(deps): bump arbitrary in /linkerd/transport-header/fuzz (#1057)
    
    Bumps [arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.0 to 1.0.1.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/commits)
    
    ---
    updated-dependencies:
    - dependency-name: arbitrary
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 001894e793204db14f17f99bdb090571631498c0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:41:58 2021 -0700

    build(deps): bump regex from 1.4.3 to 1.4.6 (#1073)
    
    Bumps [regex](https://github.com/rust-lang/regex) from 1.4.3 to 1.4.6.
    - [Release notes](https://github.com/rust-lang/regex/releases)
    - [Changelog](https://github.com/rust-lang/regex/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-lang/regex/compare/1.4.3...1.4.6)
    
    ---
    updated-dependencies:
    - dependency-name: regex
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit cd7bcb22419659b6df5ecb1de191750c0edd2878
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:40:05 2021 -0700

    build(deps): bump ipnet from 2.3.0 to 2.3.1 (#1072)
    
    Bumps [ipnet](https://github.com/krisprice/ipnet) from 2.3.0 to 2.3.1.
    - [Release notes](https://github.com/krisprice/ipnet/releases)
    - [Changelog](https://github.com/krisprice/ipnet/blob/master/RELEASES.md)
    - [Commits](https://github.com/krisprice/ipnet/compare/2.3.0...2.3.1)
    
    ---
    updated-dependencies:
    - dependency-name: ipnet
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 103c47ecc87b23763750bce875436f88d8862f51
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:39:50 2021 -0700

    build(deps): bump linkerd2-proxy-api from `453ac1e` to `48f13d6` (#1071)
    
    Bumps [linkerd2-proxy-api](https://github.com/linkerd/linkerd2-proxy-api) from `453ac1e` to `48f13d6`.
    - [Release notes](https://github.com/linkerd/linkerd2-proxy-api/releases)
    - [Commits](https://github.com/linkerd/linkerd2-proxy-api/compare/453ac1ea2b73fe12bb26a05c2bc6d44eb3d8c77b...48f13d65431c49ee5bdebc1bcd81df583ab5683d)
    
    ---
    updated-dependencies:
    - dependency-name: linkerd2-proxy-api
      dependency-type: direct:production
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ac0283ada10c98b50c93d28ce9015ce4223b2b92
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:39:29 2021 -0700

    build(deps): bump tonic-build from 0.4.0 to 0.4.2 (#1070)
    
    Bumps [tonic-build](https://github.com/hyperium/tonic) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/hyperium/tonic/releases)
    - [Changelog](https://github.com/hyperium/tonic/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/tonic/compare/v0.4.0...v0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: tonic-build
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit ae05787aa6b81be6aad54dcc021110cfd3157cb8
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:38:34 2021 -0700

    build(deps): bump libfuzzer-sys in /linkerd/app/inbound/fuzz (#1069)
    
    Bumps [libfuzzer-sys](https://github.com/rust-fuzz/libfuzzer) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/rust-fuzz/libfuzzer/releases)
    - [Changelog](https://github.com/rust-fuzz/libfuzzer/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/libfuzzer/compare/0.4.0...0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: libfuzzer-sys
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 641e1fe2de420e60be9d740c4347da6b22eebd80
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:38:17 2021 -0700

    build(deps): bump deflate from 0.7.20 to 0.9.1 (#1068)
    
    Bumps [deflate](https://github.com/image-rs/deflate-rs) from 0.7.20 to 0.9.1.
    - [Release notes](https://github.com/image-rs/deflate-rs/releases)
    - [Changelog](https://github.com/image-rs/deflate-rs/blob/dev/changelog.md)
    - [Commits](https://github.com/image-rs/deflate-rs/commits)
    
    ---
    updated-dependencies:
    - dependency-name: deflate
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit b9d62c923a490723e21884ab65046f8cc4c4fd71
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:38:00 2021 -0700

    build(deps): bump hyper in /linkerd/app/inbound/fuzz (#1067)
    
    Bumps [hyper](https://github.com/hyperium/hyper) from 0.14.5 to 0.14.9.
    - [Release notes](https://github.com/hyperium/hyper/releases)
    - [Changelog](https://github.com/hyperium/hyper/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/hyperium/hyper/compare/v0.14.5...v0.14.9)
    
    ---
    updated-dependencies:
    - dependency-name: hyper
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 2fc931b1640770454af8c35bfe1661b5902d63ad
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:25:39 2021 -0700

    build(deps): bump tracing in /linkerd/app/inbound/fuzz (#1066)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.25 to 0.1.26.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.25...tracing-0.1.26)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 20b098253dd08728ba1d0ed0a4cf75b75502daed
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:25:15 2021 -0700

    build(deps): bump tokio from 1.5.0 to 1.7.0 in /linkerd/app/inbound/fuzz (#1065)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.5.0 to 1.7.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.5.0...tokio-1.7.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit bfbf689c5d7d53a65e3278b5dbe6bf3181e17ff0
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:25:05 2021 -0700

    build(deps): bump arbitrary in /linkerd/app/inbound/fuzz (#1064)
    
    Bumps [arbitrary](https://github.com/rust-fuzz/arbitrary) from 1.0.0 to 1.0.1.
    - [Release notes](https://github.com/rust-fuzz/arbitrary/releases)
    - [Changelog](https://github.com/rust-fuzz/arbitrary/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/arbitrary/commits)
    
    ---
    updated-dependencies:
    - dependency-name: arbitrary
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 45666f271ccf2a344c7aac9fa9979ed524b6a927
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:24:52 2021 -0700

    build(deps): bump tokio in /linkerd/transport-header/fuzz (#1063)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.5.0 to 1.7.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.5.0...tokio-1.7.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit abc97d81ec65546a791c1208a7bd5031f0175fee
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:24:31 2021 -0700

    build(deps): bump tokio from 1.5.0 to 1.7.0 in /linkerd/dns/fuzz (#1062)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.5.0 to 1.7.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.5.0...tokio-1.7.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e9bb0db8ad89b13c5f46015d829c4207ee79d84d
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:24:22 2021 -0700

    build(deps): bump tracing in /linkerd/transport-header/fuzz (#1061)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.25 to 0.1.26.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.25...tracing-0.1.26)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit e343da9e50a8b20efac05616f73c43e538addcf9
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:24:01 2021 -0700

    build(deps): bump libfuzzer-sys in /linkerd/proxy/http/fuzz (#1060)
    
    Bumps [libfuzzer-sys](https://github.com/rust-fuzz/libfuzzer) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/rust-fuzz/libfuzzer/releases)
    - [Changelog](https://github.com/rust-fuzz/libfuzzer/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/libfuzzer/compare/0.4.0...0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: libfuzzer-sys
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 751172ef0814fe91d45efd58f3f863a2b5400e55
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:23:50 2021 -0700

    build(deps): bump tracing from 0.1.25 to 0.1.26 in /linkerd/addr/fuzz (#1059)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.25 to 0.1.26.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.25...tracing-0.1.26)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit a62ea361f03fa6a52fdf254c98cf424b645df122
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:23:38 2021 -0700

    build(deps): bump libfuzzer-sys from 0.4.0 to 0.4.2 in /linkerd/dns/fuzz (#1058)
    
    Bumps [libfuzzer-sys](https://github.com/rust-fuzz/libfuzzer) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/rust-fuzz/libfuzzer/releases)
    - [Changelog](https://github.com/rust-fuzz/libfuzzer/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/libfuzzer/compare/0.4.0...0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: libfuzzer-sys
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 13211d824f08bea95e1d82221bac3b59ad39b908
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:23:22 2021 -0700

    build(deps): bump tracing from 0.1.25 to 0.1.26 in /linkerd/dns/fuzz (#1055)
    
    Bumps [tracing](https://github.com/tokio-rs/tracing) from 0.1.25 to 0.1.26.
    - [Release notes](https://github.com/tokio-rs/tracing/releases)
    - [Commits](https://github.com/tokio-rs/tracing/compare/tracing-0.1.25...tracing-0.1.26)
    
    ---
    updated-dependencies:
    - dependency-name: tracing
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0a4f63da3ce5ce4f8249c9407f29fafc7c6dc0a4
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:22:47 2021 -0700

    build(deps): bump tokio from 1.5.0 to 1.7.0 in /linkerd/proxy/http/fuzz (#1056)
    
    Bumps [tokio](https://github.com/tokio-rs/tokio) from 1.5.0 to 1.7.0.
    - [Release notes](https://github.com/tokio-rs/tokio/releases)
    - [Commits](https://github.com/tokio-rs/tokio/compare/tokio-1.5.0...tokio-1.7.0)
    
    ---
    updated-dependencies:
    - dependency-name: tokio
      dependency-type: direct:production
      update-type: version-update:semver-minor
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 91b36054d2712d6435e1cc052c619d141e40681b
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:11:39 2021 -0700

    build(deps): bump libfuzzer-sys in /linkerd/addr/fuzz (#1054)
    
    Bumps [libfuzzer-sys](https://github.com/rust-fuzz/libfuzzer) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/rust-fuzz/libfuzzer/releases)
    - [Changelog](https://github.com/rust-fuzz/libfuzzer/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/libfuzzer/compare/0.4.0...0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: libfuzzer-sys
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit df3adc03fa0c7bdf278539eded48d317ae056d40
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:10:08 2021 -0700

    build(deps): bump libfuzzer-sys from 0.4.0 to 0.4.2 in /linkerd/tls/fuzz (#1053)
    
    Bumps [libfuzzer-sys](https://github.com/rust-fuzz/libfuzzer) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/rust-fuzz/libfuzzer/releases)
    - [Changelog](https://github.com/rust-fuzz/libfuzzer/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/libfuzzer/compare/0.4.0...0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: libfuzzer-sys
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 0e09b5142cc17f6888ba36fe5a11bd9f3461dd45
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 10:09:45 2021 -0700

    build(deps): bump libfuzzer-sys in /linkerd/transport-header/fuzz (#1052)
    
    Bumps [libfuzzer-sys](https://github.com/rust-fuzz/libfuzzer) from 0.4.0 to 0.4.2.
    - [Release notes](https://github.com/rust-fuzz/libfuzzer/releases)
    - [Changelog](https://github.com/rust-fuzz/libfuzzer/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/rust-fuzz/libfuzzer/compare/0.4.0...0.4.2)
    
    ---
    updated-dependencies:
    - dependency-name: libfuzzer-sys
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>
    
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>

commit 7f12a514a7e10c8e84f6bb46210fce4d5bc60160
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 09:38:33 2021 -0700

    build(deps): bump softprops/action-gh-release from 0.1.5 to 1 (#1051)
    
    Bumps [softprops/action-gh-release](https://github.com/softprops/action-gh-release) from 0.1.5 to 1.
    - [Release notes](https://github.com/softprops/action-gh-release/releases)
    - [Changelog](https://github.com/softprops/action-gh-release/blob/master/CHANGELOG.md)
    - [Commits](https://github.com/softprops/action-gh-release/compare/b7e450da2a4b4cb4bfbae528f788167786cfcedf...91409e712cf565ce9eff10c87a8d1b11b81757ae)
    
    ---
    updated-dependencies:
    - dependency-name: softprops/action-gh-release
      dependency-type: direct:production
      update-type: version-update:semver-major
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>

commit 9bea77acd59ece1c79d5862e9e705148941f3209
Author: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
Date:   Wed Jun 16 09:37:46 2021 -0700

    build(deps): bump actions/upload-artifact from 2.2.3 to 2.2.4 (#1050)
    
    Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 2.2.3 to 2.2.4.
    - [Release notes](https://github.com/actions/upload-artifact/releases)
    - [Commits](https://github.com/actions/upload-artifact/compare/ee69f02b3dfdecd58bb31b4d133da38ba6fe3700...27121b0bdffd731efa15d66772be8dc71245d074)
    
    ---
    updated-dependencies:
    - dependency-name: actions/upload-artifact
      dependency-type: direct:production
      update-type: version-update:semver-patch
    ...
    
    Signed-off-by: dependabot[bot] <support@github.com>

commit c7d47dd23d7ec4ae1880065a41c76a88e4eeee43
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 16 09:34:34 2021 -0700

    Fixup dependabot configuration (#1049)
    
    The GitHub UI reports an error with our dependabot config:
    
    > The property '#/updates/0/versioning-strategy' value "increase-if-necessary" did not match one of the following values: lockfile-only, auto
    
    This change removes the version-strategy setting.
    
    Furthermore, this change adds configurations for each fuzzer directory,
    since they have separate lockfiles.

commit d4bdf768c760b112be210284030f61ac8973da7f
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 15 16:31:25 2021 -0700

    Add a dependabot configuration (#1046)
    
    This should configure automated PRs to update our dependencies.

commit e13dde7d69c2b0fbfaaf2bb31d053ff21206e6b3
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 15 16:30:56 2021 -0700

    Add codecov integration via cargo-tarpaulin (#1047)
    
    This change exercises test coverage as an optional workflow, uploading
    results to codecov.io.

commit dea0b093f676ce72c845fd04a6d132ba0d8c5331
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 14 14:07:42 2021 -0700

    retry: Enforce a cap on max replay buffer size (#1043)
    
    This branch adds a limit to the maximum number of bytes a `ReplayBody`
    will buffer as a defense-in-depth against unbounded buffering.
    Currently, the retry policy should ensure that requests whose
    `content-length` header is over the limit will not be wrapped with
    `ReplayBody`. However, if there's a bug in the retry policy, or if a
    request claims to have an acceptable `content-length` but keeps sending
    data past that length, we might buffer a potentially unbounded amount of
    data. This limit is intended to _ensure_ we don't buffer data over the
    limit despite the `content-length`-based retry policy.
    
    The limit is checked whenever new data is added to the buffer, and if it
    is reached, the buffer is discarded and the `ReplayBody` will cease
    buffering additional data. However, the body will be allowed to continue
    streaming so that the _initial_ request may still complete --- but
    attempting to retry it will fail, because the buffer was discarded. This
    way, in the event of a request that somehow passes the limit, we won't
    fail that request immediately, but instead will fall back to not
    retrying it.
    
    In order to make this change nicely, the `ReplayBody` has to be
    constructed by the retry policy, rather than by the `Retry` service.
    This is because the policy knows what the size limits for retries is. To
    allow this, I did some refactoring. In particular, I introduced a new
    trait for retry policies that's an extension of `tower::retry::Policy`,
    but with the addition of a method that's called to modify the request
    for a retry. This method returns an `Either`, with `Either::A`
    indicating that the request should be retried, and `Either::B`
    indicating that it should not; and in the retry case, the policy may
    change the request's type. This allows the retry policy to be
    responsible for wrapping the request in a `ReplayBody`, rather than
    doing that in the `Retry` service. A nice side-effect of this change is
    that the `linkerd-retry` crate no longer needs to be HTTP-specific. All
    the HTTP-specific code now lives in `linkerd_app_core::retry`, with the
    exception of the `ReplayBody` type, which I put in its own crate (mainly
    just to allow running its tests without having to compiel all of
    `app-core`).
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 59b9ad337c0d4ea2074652a4e73cbcd6c1822178
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 11 10:57:32 2021 -0700

    tap: return an error when a `PortRange`'s min > max (#1044)
    
    The quickcheck tests for tap that were re-enabled in PR #1042 have
    caught a bug: when a `PortMatch` message has a `min` value that's
    greater than its `max` value, the tests expect that `TcpMatch::try_from`
    should return an error (since the range is obviously invalid). However,
    we don't currently do that.
    
    This change updates PortRange parsing to error if a non-zero max value
    is not less than the min value and updates the test to set the proper error
    cases.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit aabd5a572a11dab9908ef38df4bc86a97af91ba7
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 10 13:01:55 2021 -0700

    Add a 'rustfmt' feature to crates that use gRPC (#1041)
    
    Sometimes we need to be able to read generated code. The
    linkerd2-proxy-api's 'rustfmt' feature flag makes this behavior
    optional. This change adds this feature flag to the linkerd crates that
    depend on linkerd2-proxy-api.

commit 81197722a63a83cb5f0a27dc6db604c0742efcd3
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 10 13:01:13 2021 -0700

    tap: Restore tap matching tests (#1042)
    
    The tap tests were disabled in #568. This change restores these tests,
    updating them to use quickcheck v1.

commit 9318075ddf95936e4c4e12cc753b8345b6a4eecb
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 9 14:55:33 2021 -0700

    retry: only wrap bodies when a request can be retried (#1039)
    
    Currently, the decision of whether or not a request can be retried is
    made in the `clone_request` implementation for the `Retry` type in
    `linkerd_app_core`. This is problematic, because by the time
    `clone_request` is called, the request body has _already_ been wrapped
    in a `ReplayBody`. The `ReplayBody` will buffer _regardless_ of whether
    or not it's cloned. This means that the maximum length to buffer doesn't
    _actually_ stop us from buffering --- it just determines whether we will
    actually attempt to retry on failure, and whether we will retain that
    buffer past when the request ends. The request will still buffer all
    body data, but it will be dropped when the single instance of the body
    is dropped. This means that for very long streaming bodies, we may
    buffer increasingly large amounts of data as long as that request is in
    flight.
    
    This branch fixes this by moving the determination of whether a request
    is retryable to *before* we wrap it in a `ReplayBody`, so that requests
    over the maximum buffered length are not buffered. We do this by
    introducing a new trait that serves as a predicate for whether or not a
    request is retryable, and checking that predicate before wrapping the
    body _or_ calling `clone_request`.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit f4a2a6b6df9f503a2987eafdafe60c3b39d160d1
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 9 11:59:39 2021 -0700

    service-profiles: Wrap receiver types (#1038)
    
    We should be able to cache profile resolutions independently of the
    stack; but the fact that the the profile modue's `Receiver` type is just
    an alias for `watch::Receiver<Profile>` means that we can't attach
    the additional metadata needed for cache entry retention.
    
    In anticipation of caching profiles by lookup address, this change
    creates an explicit `Receiver` type that hides the underlying
    `watch::Receiver`, exposing only methods used by other crates/modules.
    
    This change also replaces the boxed watch stream with a
    `tokio_stream::wrappers::WatchStream`--also wrapped by a
    profile-specific type--to avoid needless allocation and support
    retaining additional resources.

commit 2a87f89626d8324a2cf0cff1a9d8098031b64088
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 8 07:32:35 2021 -0700

    Introduce the tonic-watch crate (#1034)
    
    The service-profiles client includes some complicated manual-polling
    machinery for publish a `tokio::sync::watch::Receiver` from a streaming
    gRPC endpoint.
    
    This change moves this logic into a `linkerd-tonic-watch` crate that
    is generic over the watch type and the underlying gRPC lookup
    functionality. Furthermore, this is code is ported to use async/await
    syntax to dramatically simplify state management.
    
    This is being done in anticipation of upcoming inbound-discovery
    infrastructure, where a similar watcher pattern will be used.

commit 2057ba937ca1aa5ec3d367c039c3321bfe55c4db
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 7 18:42:09 2021 -0700

    Implement reconnect as a NewService (#1032)
    
    In order to make the reconnect module more flexible--so that it can more
    easily be used in different parts of the stack--this change modifies the
    `reconnect` crate to be implemented in terms of `NewService` rather than
    a `MakeService`.
    
    Furthermore, tests are added to exercise reconnect.
    
    This change sets up changes to reconnect behavior so reconnection is
    only used when service discovery is responsible for evicting endpoints
    from a balancer.

commit d94f6cac0b75bf4c535621a63049af4f383ccf03
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 7 16:55:04 2021 -0700

    Update tokio, hyper, and socket2 (#1037)
    
    This change updates `tokio`, `hyper`, and `socket2` (from v0.3 to v0.4).
    This has a few implications:
    
    * `tokio::select!` can now be used in place of
      `futures::select_biased!`;
    * We now only depend on the core `futures` functionality with all
      features disabled.
    * `socket2` had several small API changes that have been addressed.

commit 8d9c8df406d4a8e6b8cb1db4aaaddcc40f1d5e57
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 7 15:24:40 2021 -0700

    ingress: Add failfast to the forwarder (#1035)
    
    The ingress-mode proxy's forwarding stack--used when a request does not
    set the `l5d-dst-override` header--has no failfast implemetation. This
    means that when a connection can't be obtained for the endpoint,
    requests are buffered indefinitely.
    
    This change adds a failfast layer so that these requests are failed
    eagerly after 3s of unavailability, causing the serverside connection to
    be dropped (so that the application client may re-resolve the endpoint).
    
    This is really a temporary solution. We should probably avoid
    implementing reconnection at all in this case so that connection errors
    can be used in place of failfast errors.
    
    Related to linkerd/linkerd2#6184

commit 122344732ec1ca60f81cc89ffe31e08a146cd8c9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 7 14:45:11 2021 -0700

    outbound: don't double-wrap replay bodies (#1036)
    
    In PR #1020, the retry code was changed so that bodies are only wrapped
    in a `ReplayBody` when the request will be retried. The intention was to
    remove the `replay::layer` pushed to the stack before the retry layer,
    so that bodies are only wrapped when retries are enabled for the route,
    and not for all routes in a profile.
    
    However, I somehow managed to not remove the `replay::layer` from the
    stack (possibly due to a messed up rebase). Oops. This meant that all
    bodies for endpoints with service profiles were wrapped, and when the
    route has retries enabled, it's wrapped twice. When wrapped twice, this
    means that we potentially buffer the body data *twice*.

commit 0e6df7c4c0b908399c3c9d4b0f4cab6409a3e591
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 7 13:40:18 2021 -0700

    proxy-api: Update proxy-api to use the main branch (#1029)
    
    While we prepare for upcoming policy work, we should move the proxy to
    use the updated crate from the main branch of the repo. This updated
    version exposes a feature for each API--and for server- and
    client-generation--so that we can more narrowly express dependencies in
    the proxy.

commit d4f72c1aa4555f395007b628145b6b27707602c2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jun 4 15:57:25 2021 -0700

    inbound: Simplify protocol-detection skipping (#1031)
    
    The inbound proxy's layer that switches between routed and passthru
    stacks uses an unnecessary explict type for its predicate. In order to
    setup for further changes to this stack, this change eliminate the
    specialized type in favor of a closure.
    
    We also ditch the use of IndexSet as there's no functional need for it.

commit a254414c0619dc84ddcb9c4685bfcbf769bf0efd
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 3 16:09:39 2021 -0700

    app: Move the admin server into a subcrate (#1028)
    
    The proxy's admin server is split across `linkerd/app` and
    `linkerd/app/core/` -- with the former implementing the stack and the
    latter implementing the HTTP server.
    
    This change unifies these modules into `linkerd/app/admin`, which is no
    longer needed to compile the inbound and outbound proxies. The admin
    crate has a dependency on the inbound crate, as they currently share
    target types.

commit bc98cdef17f19bee3a3a0cb4c269ec45dbf07c73
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 3 12:37:42 2021 -0700

    Repace linkerd-drain with drain from crates.io (#1027)
    
    The linkerd-drain crate has been split out into its on repo at
    https://github.com/linkerd/drain-rs and published to crates.io. This
    change removes the `linkerd/drain` directory and replaces dependencies
    with `drain v0.0.1`.

commit 6a9c2135238d32c5569907232ecdb7209f3ecd95
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 2 17:18:42 2021 -0700

    tracing: Simplify initialization (#1026)
    
    The `Settings::build` method is fairly large and complex. This change
    splits into a few smaller units and reduces boilerplate--especially
    around reading the settings from the environment.
    
    This change is being made in service of #601 to help avoid making the
    build method even more complicated.

commit cafa93d87a57e10aee0e277306401ff092a697b4
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 2 15:42:43 2021 -0700

    tracing: Split HTML-formatting into admin module (#1025)
    
    The tracing crate is fairly core to all of our functionality, and so
    it's preferable to avoid pulling in HTML-specific dependencies here. In
    order to keep the tracing crate limited to only tracing-related
    functionality, this change moves the HTTP handlers to the
    `app::core::admin`, which includes the rest of the HTTP serving logic
    used by the admin server.
    
    There is no functional change.

commit a9f40121ce693f346f7c06cc347f0e5b2f13822a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 2 07:42:57 2021 -0700

    deps: update `futures` to 0.3.15 (#1022)
    
    This branch updates the `futures` crate to v0.3.15. This includes a fix
    for task starvation with `FuturesUnordered` (added in 0.3.13). This may
    or may not be related to issues that have been reported in the proxy
    involving the load balancer (linkerd/linkerd2#6086), but we should
    update to the fixed version regardless. This may also improve
    performance in some cases, since we may now have to do fewer poll-wakeup
    cycles when a load balancer has a large number of pending endpoints.

commit dfed4bf41642b9fb5413ea0572a6fba7d9f460f0
Author: Rahul Muttineni <rahulmutt@gmail.com>
Date:   Wed Jun 2 16:35:00 2021 +0200

    Fix MacOS conditional build in telemetry::process (#1023)
    
    On MacOS, the module `telemetry::process` in `linkerd-app-core` fails
    to build because the `info!` macro is used on non-Linux systems, but
    it is not imported.
    
    Signed-off-by: Rahul Muttineni <rahulmutt@gmail.com>

commit cd6da0fd40a6ee90f6b1e6611c18d870184da318
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 1 11:38:40 2021 -0700

    control: Build the identity client each time its used (#1021)
    
    We currently build the identity client at startup and hold it to be used
    fairly infrequently: the client is used once per day by default, and
    even in extremely aggressive scenarios is unlikely to be used more
    frequently than once every few minutes. As such, there's very little
    benefit to holding the client (and buffers, DNS resolutions, etc) open
    continually. Instead, it seems preferable to instantiate the identity
    client only as it's needed.
    
    Practically, we see issues like linkerd/linkerd2#6184 where the identity
    client may try to reconnect to stale endpoints when the identity
    deployment is rescheduled (because there aren't a steady stream of
    requests on this client).
    
    This change makes the controller stack a `NewService<()>` so that
    clients can be instantiated lazily. The identity module now creates a
    new connection for each identity request. Other controller clients are
    unaffacted, continuing to use long-live clients.

commit 99e3c06750525c4367418498441bf3b3237c84e6
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jun 1 10:39:31 2021 -0700

    retry: only buffer request bodies when retries are enabled (#1020)
    
    PR #1017 added support for retries on requests with bodies. This
    requires buffering the body data so that it can be sent as part of a
    retry request.
    
    In #1017, all requests in the profile HTTP route stack have their bodies
    wrapped in a `ReplayBody` type that buffers the request data. Although
    the buffering strategy is lazy (the request can be sent before the
    client finishes sending the body, so we don't introduce the latency of
    waiting to buffer the entire body) and fairly lightweight (the buffered
    body data is not copied an additional time, and is cloned only by
    increasing the reference count on the buffer it was read into from the
    wire), there is still some additional overhead that could be avoided
    when retries are not configured on a route.
    
    This branch updates the `Retry` service so that buffering is only added
    on routes which have a retry policy. If there is no retry policy, we
    avoid wrapping the request's body in a `ReplayBody`.
    
    The `retry` crate is now called `http-retry`.

commit d17b239bc3aa804086db9d562ede2f579f047df0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri May 28 13:19:37 2021 -0700

    retry: retry requests with <=64KB bodies (#1017)
    
    Linkerd's proxy does not currently support retries on requests with
    payloads. This precludes Linkerd from retrying gRPC requests, which is a
    substantial limitation.
    
    This PR adds support for retries on requests with bodies, if and only if
    the request has a `Content-length` header and the content length is <=
    64 KB.
    
    In order to retry requests with payloads, we need to buffer the body
    data for that request so that it can be sent again if a retry is
    necessary. This is implemented by wrapping profile requests in a new
    `Body` type which lazily buffers each chunk of data polled from the
    inner `Body`. The buffered data is shared with a clone of the request,
    and when the original body is dropped, ownership of the buffered data is
    transferred to the clone. When the cloned request is sent, polling its
    body will yield the buffered data.
    
    If the server returns an error _before_ an entire streaming body has
    been read, the replay body will continue reading from the initial
    request body after playing back the buffered portion.
    
    Data is buffered by calling `Buf::copy_to_bytes` on each chunk of data.
    Although we call this method on an arbitrary `Buf` type, all data chunks
    in the proxy are actually `Bytes`, and their `copy_to_bytes` methods are
    therefore a cheap reference-count bump on the `Bytes`. After calling
    `copy_to_bytes`, we can clone the returned `Bytes` and store it in a
    vector. This allows us to buffer the body without actually copying the
    bytes --- we just increase the reference count on the original buffer.
    
    This buffering strategy also has the advantage of allowing us to write
    out the entire buffered body in one big `writev` call. Because we store
    the buffered body as a list of distinct buffers for each chunk, we can
    expand the buffered body to a large number of scatter-gather buffers in
    `Buf::bytes_vectored`. This should make replaying the body more
    efficient, as we don't have to make a separate `write` call for each
    chunk.
    
    I've also added several tests for the new buffering body. In particular,
    there are tests for a number of potential edge cases, including:
    
    - when a retry is started before the entire initial body has been read
      (i.e. if the server returns an error before the request completes),
    - when a retry body is cloned multiple times, including if the client's
      body has not yet completed,
    - dropping clones prior to completion
    
    Closes linkerd/linkerd2#6130.
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c188444e805787a6e271782bba2442f2a8ed0387
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 24 18:20:39 2021 -0700

    Forbid unsafe code in most module (#1018)
    
    This change adds the `forbid(unsafe_code)` directive to most modules,
    ensuring that these modules are "safe". There are three modules this
    cannot apply to:
    
    - `duplex` -- due to the implementation of `BufMut` for `CopyBuf`; and
    - `proxy::transport` -- due to socket option interactions.
    - `system` -- for system-level counter access
    
    Furthermore, this change adds `deny(warnings)` directives to a few
    modules that were missing it.

commit 94dec9193548cb80f8c55c9b38bcfead5c968888
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 24 17:28:50 2021 -0700

    ci: Restict permissions in Actions (#1019)
    
    This change adds a `permissions` block to all actions and ensures that
    we use SHA-pinned versions of all external actions. This helps ensure
    that our actions use limited GitHub permissions.
    
    This change also removes the unused docker CI workflow.

commit a07b33d77e3e549a868e05298e54a63b900ac12b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 24 12:37:09 2021 -0700

    ingress: Restore original dst address routing (#1016)
    
    In f8cc918e, we started requiring the `l5d-dst-override` header. As
    described in linkerd/linkerd2#6157, this breaks some ingress
    configurations, especially those that may route to out-of-cluster
    resources.
    
    This change restores original-dst-addr routing for requests that do not
    include the `l5d-dst-override` header.
    
    Internally, this change centralizes the `DST_OVERRIDE_HEADER` and
    related utilities to the ingress module, as no other modules should have
    to know anything about it.

commit 4ab0eaf98b3bbca6bf3096d36152df261d4ad9ca
Author: Aleksandr Tarasov <aatarasoff@gmail.com>
Date:   Sat May 22 07:45:16 2021 +0300

    Make span name without query string (#1013)
    
    Query strings shouldn't be included in span names, as this prevents
    tracing consumers from properly aggregating spans, etc.
    
    This change modifies span names to only include URI paths.
    
    Signed-off-by: aatarasoff <aatarasoff@gmail.com>

commit 3d028667d0d710e142c74167385c49932464916f
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 20 17:17:25 2021 -0700

    control: Ensure endpoints are driven to readiness (#1014)
    
    When there are multiple replicas of a controller--especially the
    destination controller--the proxy creates a load balancer to distribute
    requests across all controller pods.
    
    linkerd/linkerd2#6146 describes a situation where controller connections
    fail to be established because the client stalls for 50s+ between
    initiating a connection and sending a TLS ClientHello, long after the
    server has timed out the idle connection.
    
    As it turns out, the controller client does not necessarily drive all of
    its endpoints to readiness. Because load balancers are designed to
    process requests when only a subset of endpoints are available, the load
    balancer cannot be responsible for driving all endpoints in a service to
    readiness and we need a `SpawnReady` layer that is responsible for
    driving individual endpoints to readiness. While the outbound proxy's
    balancers are instrumented with this layer, the controller clients were
    not configured this way when load balancers were introduced.
    
    We likely have not encountered this previously because the balancer
    should effectively hide this problem in most cases: as long as a single
    endpoint is available requests should be processed as expected; and if
    there are no endpoints available, the balancer would drive at least one
    to readiness in order to process requests.

commit 9abd27ddaf9531df5ba1f5e68b552dfafe045f3d
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri May 14 18:46:45 2021 -0700

    ci: Update/pin action dependencies (#1012)

commit d370783b2c47c00652fdd22e69945793b1390b02
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri May 14 10:10:37 2021 -0700

    Box all stack modules (#1011)
    
    Building a release-mode proxy currently consumes significant resources:
    
            Elapsed (wall clock) time (h:mm:ss or m:ss): 4:23.84
            Maximum resident set size (kbytes): 23751132
    
    With this, change we reduce memory consumption by >50%:
    
            Elapsed (wall clock) time (h:mm:ss or m:ss): 2:18.08
            Maximum resident set size (kbytes): 10144624
    
    This is accomplished by boxing each top-level module. This is made
    explicit by modifying the signature of these stack builders to
    explicitly reference boxed types (instead of using `impl`).
    
    Furthermore, we add a `BoxNewService` wherever the inner new service is
    cloned into a returned `Service`. This most commonly happens with layers
    like `http::NewDetectService`` `NewDetectTls`, and `NewRouter`.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 251fa8bf049b0b69154beb088f73332f2e3fda4c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 13 09:56:53 2021 -0700

    outbound: Box HTTP endpoint stack (#1008)
    
    This change ~halves compile-time and memory usage of release builds
    
    Before this change:
    
            Command being timed: "cargo build -p linkerd2-proxy --release"
            User time (seconds): 3233.32
            System time (seconds): 49.02
            Percent of CPU this job got: 583%
            Elapsed (wall clock) time (h:mm:ss or m:ss): 9:22.92
            Maximum resident set size (kbytes): 57377268
    
    With this change:
    
            Command being timed: "cargo build -p linkerd2-proxy --release"
            User time (seconds): 1935.21
            System time (seconds): 32.59
            Percent of CPU this job got: 594%
            Elapsed (wall clock) time (h:mm:ss or m:ss): 5:31.18
            Maximum resident set size (kbytes): 23842208

commit dae07f415306f5e3c98f9384e84727cf6efe4117
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 13 09:28:30 2021 -0700

    ci: Use a matrix of fuzzer targets (#1007)
    
    The fuzzer build CI takes >2x as long as any other CI task.
    
    This change moves the fuzzer building CI task to use a matrix of targets
    so that they may be built in parallel. Furthermore, fuzzers are now
    excluded from the check task.

commit 27b6af383fd22fcaf59e98ec939fde4d19a63522
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 12 18:41:31 2021 -0700

    tracing: just control ansi colors with feature flags (#1006)
    
    Now that we have updated the proxy to Rust 1.52.1, we can use the
    `resolver = "2"` cargo feature, which results in feature flags enabled
    by dev-dependencies *not* enable features in the main build. This lets us
    toggle ANSI colors on and off using a dev-dependency without them being
    enabled in the primary release build.
    
    Furthermore, all tracing initialization for tests is now instrumented via the
    `linkerd-tracing` so that it can be more easily reused.
    
    Closes #997

commit dec8958f12f7192f7b03279db252486beb9e8a11
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 12 16:03:59 2021 -0700

    chore: update Rust toolchain to 1.52.1 (#1005)
    
    This branch updates the Rust toolchain to 1.52.1. This includes a [major
    bugfix][1] for an issue effecting incremental compilation. Additionally,
    Rust 1.51 enabled the `resolver = "2"` feature in Cargo.toml, which can
    be used to fix the feature flagging issues with tracing in a more
    principled way than the current solution.
    
    A *very* large amount of new lints were added since Rust 1.49.0; in
    particular:
    
    * clippy now warns when an `Into` impl could be a `From` impl, because
      `From` impls provide `Into` impls for free, but the reverse is not
      the case
    * panic messages must now *always* be `format_args!`
    * exact comparisons of floating-point numbers (rather than within an
      error margin) now produce a warning
    
    This branch also fixes all the new warnings.
    
    [1]: https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 61f7e3a0d385fedcff7a784e098e4b5ada845d45
Author: James Roper <james@jazzy.id.au>
Date:   Thu May 13 08:17:14 2021 +1000

    inbound: Set the l5d-client-id header (#981)
    
    Applications have no way to know whether a request was transported
    via Linkerd's mTLS and, if it was, what the client's identity was.
    
    This change sets the `l5d-client-id` header with the value of the client's
    identity name. Furthermore, any prior values for this header are stripped
    from inbound requests so that client identities may not be spoofed.
    
    This header is set on all inbound requests over meshed connections. This
    behavior may be made configurable in the future.
    
    Related to linkerd/linkerd2#3342 and linkerd/linkerd2#3756

commit d326f4435cee8b34879092599f1e218a94e1688f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 12 14:00:08 2021 -0700

    http: Remove `identity_from_header` helper (#1004)
    
    The `proxy::http::identity_from_header` helper is only used in one place
    and doesn't need to be exposed by the proxy::http module. Similarly the
    `L5D_REQUIRE_ID` constant does not need to be used outside of the
    outbound HTTP endpoint stack, though it is defined in `app::core`.
    
    This change renames the `require_identity_on_endpoint` to
    `require_id_header` and consolidates all related logic & constants into
    the module. The module is now responsible for clearing the header as
    well (rather than pairing the module with a generic strip-header layer).

commit de5d42f9bd9b0666e6bdf21410942006d5881c02
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 12 11:09:36 2021 -0700

    Prepare for Rust 1.50+ by boxing large futures (#1003)
    
    Version 1.50 of the Rust compiler introduced a regression
    (rust-lang/rust#84873) that results in the compiler using extremely
    large amounts of memory (and eventually getting OOM killed) when
    compiling code involving very large nested types. This regression is
    triggered by a number of future types in the proxy.
    
    This change adds several `BoxService` layers--primarily within
    `switch` layers--to reduce the size of future types so that the proxy
    can successfully be compiled on Rust 1.50+.
    
    This change does not update the Rust toolchain version.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 660f0e8b7479b4d7fee7fe68705f4c4b3af986bb
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 12 10:49:23 2021 -0700

    improve diagnostics for rejected profile discovery (#998)
    
    Currently, the proxy uses the `tonic::Status` type with particular gRPC
    error codes to indicate that profile discovery should not be performed
    for an address. This works, because this error type will be returned
    when the Destination service returns `InvalidArgument`. However, this
    doesn't include much information on _why_ that address was rejected ---
    we may have recieved an invalid argument response from the control
    plane, or we may have rejected it due to the DNS suffixes or IP subnets
    configured by the `LINKERD_PROXY_PROFILE_GET_$whatever` env variables.
    This can be confusing for users, since the logs won't indicate why a
    profile lookup was rejected without setting a very verbose log level.
    
    This branch adds a richer error type that actually includes this
    information.

commit 626b2ee0e9dda405c016bfc7a283f632b87790b7
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 11 12:03:06 2021 -0700

    outbound: Decouple endpoint & logical stacks (#1002)
    
    In #963 we began to split the outbound stack so that logical stack was
    only built when a profile resolution was successful. However, this
    incorrectly handled the case when a profile resolution included an
    endpoint in its response.
    
    This change introduces a `outbound::switch_logical` module that takes an
    optional profile and builds either an endpoint stack or a logical stack.
    Logical stacks always have a profile resolution and (named) logical
    address. Endpoint stacks are built otherwise, optionally with metadata
    from the profile resolution.
    
    In order to test this--and to simplify/focus tests, in general--I've
    moved tests from `outbound/src/{tcp,http}/tests.rs` into the modules
    they test. Now each test more narrowly targets the stacks whose logic
    they test, rather than composing an entire outbound stack. It was
    becoming cumbersome to support mocking each component of the larger
    stack. Now, we more intentionaly test targeted logic in each stack
    (including the newly fixed endpoint/logical stack switching).

commit d2ec1c1b66f4a9e696a6a584226b08b36cf7acb7
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 10 12:56:12 2021 -0700

    tests: Use io::Error in mocked connector (#1001)
    
    The tcp endpoint stack requires that connectors return `io::Result`, but
    the connector mock uses Boxed error types. This change modifies the
    mocked connector to use io::Errors.
    
    We also improve re-exports from the linkerd_io module to reduce import
    boilerplate.

commit 6527a3085733566769d31776c9895aff85da68d0
Author: DavidKorczynski <david@adalogics.com>
Date:   Thu May 6 17:59:39 2021 +0100

    docs: Add fuzzing report (#1000)
    
    This change adds docs describing our recent fuzz testing project
    and a description of how to add new fuzz tests.
    
    Signed-off-by: davkor <david@adalogics.com>

commit d87d0dba8afb0912073e9d3b767c252ac7774f88
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Mon May 3 11:50:12 2021 -0400

    Pickup linkerd-await wrapper in docker build (#999)
    
    Updates the docker runtime base image to use cr.l5d.io/proxy:edge-21.4.5
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit bba24dcdeda40105615db8d33e3fa04f980cf128
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Apr 30 14:26:23 2021 -0700

    Decouple tcp forward stack from Endpoint target (#996)
    
    the TCP forward stack is target-agnostic. This change relaxes the hard
    dependency on the `Endpoint` target type.

commit bae44e1a23b1c1b2f1ff775c4005a063bfdf2f63
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Apr 30 14:08:31 2021 -0700

    outbound: Do not support TCP-forwarding in ingress-mode (#995)
    
    The ingress-mode proxy has some simplistic support for TCP forwarding;
    but this is somewhat of a misfeature. Specifically, we don't do any
    mTLS/discovery for these connections, so detection failures can manifest
    as unexpected insecure connections.
    
    For now, we should remove TCP-forwarding support from ingress-mode
    proxies. This will help support further simplifications to the
    ingress-mode proxy.

commit f8cc918e83084503db13d1ab34bc2b0971ab1569
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 29 12:31:52 2021 -0700

    ingress: Require the l5d-dst-override header (#992)
    
    The outbound ingress-mode proxy generally relies on the
    `l5d-dst-override` header to be set, but it still tries to handle other
    cases (mostly to satisfy type constraints we needed previously). This is
    unnecessary.
    
    This change modifies the ingress-mode outbound proxy to require that the
    `l5d-dst-override` header be set to a named address (i.e., not an IP
    address). When this header isn't set, requests are failed a descriptive
    error is emitted.
    
    Furthermore, the inbound proxy no longer honors the `l5d-dst-override`
    header. It never should have supported this header, but this was likely
    copied from the outbound router. The header is only intended for
    ingresses.

commit f916868174a41df687538eba1b0f66c0d6510c91
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 28 18:21:06 2021 -0700

    trace: explicitly disable ANSI terminal colors (#994)
    
    * trace: explicitly disable ANSI terminal colors
    
    Currently, the use of ANSI terminal color codes by `tracing-subscriber`
    is controlled by a feature flag, which is only eenabled by
    `dev-dependencies` when building tests. However, despite this, the
    feature flag appears to still be enabled in release builds --- despite
    `cargo tree -e features -e no-dev -i tracing-subscriber` indicating that
    it isn't enabled by any non-dev dependency.
    
    Since this results in mangled logs in Kubernetes (fluentd doesn't handle
    ANSI escape codes), this branch changes the proxy's tracing setup to
    explicitly disable them outside of tests.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 69d5d9108eb89e2736c3087dff435c7ae3eb4871
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 28 11:02:27 2021 -0700

    outbound: Make the Endpoint::logical_addr field optional (#991)
    
    The `outbound::Endpoint::logical_addr` field must currently _always_ be
    set, even when it just duplicates the endpoint's target address and
    there is no "logical" address.
    
    This change makes this field optional and changes its type to require a
    `LogicalAddr` (as returned by a profile lookup).
    
    As a result of this, the `authority` endpoint metrics label is now only
    set when a logical address is present.

commit 5cdd21a745f4f7ec397fdb846204e9f8cd459ed3
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 27 17:03:12 2021 -0700

    tower: update dependency to 0.4.7 (#990)
    
    This updates `tower` to v0.4.7. This picks up tower-rs/tower#581, which
    fixes a task leak in `SpawnReady` that resulted in a memory leak in the
    proxy.

commit 5e717fbffddd15e2c6d8897404ee93d3dde84d57
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 26 14:44:54 2021 -0700

    fuzz: allow client requests to fail  (#989)
    
    Currently, the inbound HTTP fuzz tests are failing when the fuzzer
    generates invalid HTTP headers and the proxy rejects the request by
    closing the connection.
    
    This is because the test-support HTTP request helper expects the client
    request to never fail --- valid behavior for the tests where this is
    used, but not for the fuzz logic. This branch changes these functions to
    return `Result`s so that the test that uses them can choose whether or
    not to panic.
    
    The test helper code currently uses `expect` messages to provide context
    for _where_ a particular error occurred (e.g. were we driving the client
    to readiness, or actually making a request?). Changing the test helpers
    to return `Result`s would remove some of this context. Therefore, I
    added a quick error wrapper type to wrap an error with a message,
    allowing us to indicate where an error occurred while still returning a
    `Result` that the test can choose to unwrap.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 0c71e0345a031d6896ae3b665cb00523f902fbcf
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 22 08:51:43 2021 -0700

    Commit lock files for fuzzers (#984)
    
    Remove per-fuzzer gitignore files in favor of adding these directories
    to the top-level gitignore.
    
    Ensure that the DNS version is pinned so that we don't get automatically
    updated to trust-dns v0.20.2, which does not include a fix we depend on
    for fuzz tests.
    
    Finally, this change removes _fuzzing_ feature flags in favor of gating on
    `cfg(fuzzing)` for both dependencies and fuzzing code.

commit 5dec0de7a695561a208b9b0778d7782b7140fa9e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 21 15:42:17 2021 -0700

    fuzz: don't panic when the proxy closes the conn (#986)
    
    Currently, the inbound HTTP fuzz tests are failing. This is because they
    reuse the test-support code for making an HTTP request to a proxy stack
    and running the futures necessary to drive that request in the
    background. This code currently unwraps both the `JoinHandle`s of the
    spawned tasks (which would be `Err` if the task panicked) _and_ the
    returned `Result` from those `JoinHandle`s (which is an `Err` if the
    `Service::call` future returned an error, or if the client returned an
    error). If the future completes with an error, then the proxy simply
    tears down the connection.
    
    In the integration tests, we currently `expect` _both_ of these
    `Results` --- since the inputs are valid, we want to assert the proxy
    doesn't return an error incorrectly. However, the fuzz tests can and
    will generate malformed HTTP requests, and in this case, the proxy will
    reject those requests by returning an error and closing the connection.
    This is *not* incorrect behavior. Instead, we want to ensure that the
    proxy doesn't panic in the face of potentially malformed requests.
    
    This branch changes the test-support HTTP code to return the `Result` of
    serving a request, and unwrap it in the integration tests rather than in
    the support code. The fuzz logic is updated to simply log errors
    returned here, since returning an error is expected behavior when we
    receive invalid inputs.
    
    If we wanted to be _really_ fancy, a potential follow-up would be to
    extend the fuzz logic to determine whether or not a fuzz spec should
    result in an error, and assert that errors are only returned for invalid
    requests...but, doing this without using any of the code that's being
    exercised in the fuzz test (e.g. all of `hyper`'s request parsing etc)
    would be a _lot_ of work...
    
    Depends on #985
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 826655dd660c5b7ad809db80d150778cea238670
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 21 14:48:51 2021 -0700

    fuzz: Add logging to fuzz targets (#985)
    
    In order to make debugging fuzz test failures easier, it's useful to be
    able to get logs from the proxy and libraries during a fuzz run.
    However, because running the fuzz targets with a fuzzer will generate a
    massive number of imputs, we probably don't want verbose logs by default
    --- this would produce a huge amount of mostly useless data.
    
    This branch adds a simple tracing setup to the fuzz targets. When
    running without the `RUST_LOG` environment variable set, each run won't
    log anything. This means the current behavior on cluster-fuzz is
    unchanged and we won't output giant amounts of logs. However, when
    running a minimized reproducer locally for debugging, we can enable any
    amount of logging by setting `RUST_LOG`, which should make it easier to
    diagnose fuzz failures.

commit 90819e503172a6af542d1c675fb8833c32a6366f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 20 17:35:53 2021 -0700

    chore: Fix deprecations on nightly (#983)
    
    Currently, the fuzz targets don't build locally without warnings. This
    is because they must be built on nightly, and
    `Atomic$Ty::compare_and_swap` has been deprecated in favour of
    `compare_exchange`. Additionally, the fuzz crates don't honor the global
    lockfile, so they pick up `tower` 0.4.6 which deprecates
    `ServiceExt::ready_and` and renames it to `ServiceExt::ready`. This
    means that the fuzz targets can only be built with warnings disabled.
    
    This branch makes the following changes:
    
    * remove the unused `handle_time` module, which was responsible for
      several `compare_and_swap`s. we never actually use this in the proxy,
      and it contains a deadlock bug, so if we want to put it back, it
      probably needs to be rewritten anyway.
    * replace two uses of `compare_and_swap` in the testing code with
      `store` (these never needed to be compare-exchange ops, i was
      just being overly clever)
    * updates to `tower` 0.4.6 and replaces `ServiceExt::ready_and`
      with `ServiceExt::ready`
    
    The fuzz targets should build without warnings now! :D

commit 832bb859735b1a83e4cdd0c44acffcf157c141fc
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Apr 20 15:47:37 2021 -0700

    admin: Assume meshed connections are HTTP/2 (#982)
    
    We've recently updated the admin server to assume that protocol
    detection timeouts indicate that the client was just HTTP/1; but this
    will almost never be true for meshed connections, which are transported
    over HTTP/2.
    
    This change updates the fallback logic to account for this. Detection
    timeouts on meshed connections are now assumed to be HTTP/2. When we get
    TLS connections that we can't terminate, we now return an error message
    that includes the SNI value to more clearly indicate that the client
    expected an alternate server identity.

commit 0eaf53ddb14f5d607e3931065a3ccc4de6c7751c
Author: DavidKorczynski <david@adalogics.com>
Date:   Tue Apr 20 22:48:57 2021 +0100

    app: inbound: fuzzer: generalise fuzzers and solve coverage build (#978)
    
    This PR is an effort to generalise the inbound fuzzer by
    allowing it to sending an arbitrary number of random packets.
    
    This PR also moves the structs used by the structure-aware to
    be defined outside the fuzz_*.rs files. This solves the coverage
    compilation problems we currently have - as such, following
    this PR we will be able to get nice coverage reports shown by
    OSS-Fuzz.
    
    Signed-off-by: davkor david@adalogics.com

commit 00c3394ab36eeff14192e6ae52c41238376daabd
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 19 14:23:18 2021 -0700

    reduce error boilerplate with `thiserror` (#980)
    
    The [`thiserror` crate][1] provides a `#[derive(Error)]` macro that can be
    used to generate `std::error::Error` implementations. Using this results
    in significantly less boilerplate required by most of the error types in
    the proxy, replacing almost all of the manual `Error` implementations.
    
    There were a few cases where the `Error` impl either required complex
    formatting logic (it has a conditional in it), or complex `source` logic
    (the `Arc`ed `SharedError` type). I left these alone, but was able to
    replace every other manual implementation of `std::error::Error`.
    
    No functional change. :)
    
    [1]: https://github.com/dtolnay/thiserror#deriveerror
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 78b95acd2c953da87cba764f56c5b5a7d8fe10e9
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 19 11:21:32 2021 -0700

    admin: Fail connections when HTTP detection fails (#979)
    
    fce8c4ae updated the admin server to try to handle connections that fail
    HTTP detection. The intent of this was to handle connections that
    don't emit any HTTP request within the first few seconds of the
    connection. However, we also try to handle connections on which we have
    read data and affirmatively indicated that the connection is not HTTP.
    These connections manifest with errors about an invalid HTTP method,
    which can be ambiguous to users.
    
    This change handles this latter case explicitly with an error that
    describes the client so that users have better diagnostics without
    having to enable debug logging.

commit 3a3f25fa2ebcb4473eb6f21790e7c0e4f648cf3e
Author: DavidKorczynski <david@adalogics.com>
Date:   Thu Apr 15 20:57:38 2021 +0100

    app: inbound: add fuzzer (#977)
    
    The focus of this PR is adding a n end-to-end style fuzzer.
    
    The fuzzer is largely inspired by `unmeshed_http1_hello_world`
    https://github.com/linkerd/linkerd2-proxy/blob/863ef23976cdf3821eea83b78ee8466bdfa46772/linkerd/app/inbound/src/http/tests.rs#L49
    
    Signed-off-by: davkor <david@adalogics.com>

commit 94c7796351de6a7dc3ec6740e60a355719c37ecd
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 14 10:21:37 2021 -0700

    outbound: only build logical stacks for profiles with logical addrs (#972)
    
    Depends on #971
    
    Currently, the proxy should only perform `Destination.Get` resolutions
    for logical (named) addresses provided by `Destination.GetProfile`
    lookups, and never for IP addresses. However, this is not *guaranteed*;
    as the destination resolver still accepts a `LookupAddr` type which may
    be either a logical named address *or* an IP address.
    
    In order to remove support for IP lookups from the control plane's
    `Destination.Get` implementation, we should ensure that the proxy will
    *never* attempt to resolve an IP (see linkerd/linkerd2#5246). Now that
    the `Logical` target type and the logical stacks are only constructed
    when a profile is resolved (as of PR #963), we can now change the proxy
    to ensure statically that this never happens.
    
    This branch makes the following changes:
    
    * Currently (as of #963), the `Logical` target type has an
      `Option<LogicalAddr>`. We attempt to unwrap the `Option<Receiver>`
      returned by a profile lookup, and build a logical stack when there is
      a profile. The `Logical` target is with `Option<LogicalAddr>` from
      that profile.
    
      However, this is not actually the ideal behavior: ideally, we would
      only contruct the logical stack when there is a resolved profile *and*
      the profile includes a logical address. Therefore, this branch changes
      the `push_unwrap_logical` function added in #963 to use a custom
      filter predicate that only constructs the `Logical` target when the
      profile resolution is `Some` _and_ the profile's `addr` field is
      `Some`. Now, `Logical` targets are only built when there is a known
      logical address.
    
    * The `Destination.Get` resolver requires a target type that implements
      `Param<ConcreteAddr>`. Currently, a `ConcreteAddr` is a newtype around
      `Addr`, which may be either a named address or an IP address. This
      branch changes `ConcreteAddr` to a newtype around `NameAddr`. This
      means that the resolver now ensures `Destination.Get` queries are only
      performed for named addresses at the type level.
    
    * Similarly, the `Target` type in `linkerd-service-profiles` is changed
      to store a `NameAddr` rather than an `Addr`.
    
    * Several of the outbound stack tests now test invalid behavior that
      should no longer happen --- building a logical stack and calling it
      with a target that doesn't include a logical address. I rewrote these
      tests so that the tests without logical addresses don't build a
      logical stack, and added a new test for calling the logical stack
      with a logical address. In the process, I did some cleanup and
      refactoring in the outbound TCP stack tests.
    
    * Finally, while debugging test failures, I noticed that the
      `fmt::Debug` output for some of the target types that include
      `NameAddr`s was a little unnecesarily verbose. I added new custom
      `Debug` impls that should make these a bit more concise.
    
    This is the proxy component of linkerd/linkerd2#5246.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 576d720bb718d3d8119f2c27ab93d172c97b0c71
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 13 15:46:40 2021 -0700

    outbound: move target types into stack modules (#971)
    
    Depends on #967
    
    This branch refactors the `linkerd-app-outbound` crate so that each
    stack target type is now defined in the module for the stack that uses
    it, rather than in one big `target` module. For example, `Logical` is
    now defined in `logical.rs` and `Endpoint` is defined in `endpoint.rs`.
    
    There should be no functional change in this PR --- it just moves code
    around.

commit dbc30362f56b668b1b0ae10c1ea6e90b0af54e8f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 13 15:19:22 2021 -0700

    profiles: make receiver param in `route_request` non-optional (#967)
    
    This branch changes the `linkerd_service_profiles::http::route_request`
    layer to require a `Param<profiles::Receiver>` rather than a
    `Param<Option<profiles::Receiver>>` target type. This is possible
    because the inbound and outbound logical destination stacks are now only
    built when a profile is resolved (as of PRs #963 and #966).
    
    Depends on #963
    Depends on #966

commit ecfca57b91f61b79897f6b931d2bf3f610c729f2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 13 15:01:51 2021 -0700

    inbound: only build profile route stacks when a profile is resolved (#966)
    
    This is similar to PR #963 but on the inbound side. Since the inbound
    proxy only requires logical targets in the HTTP profile route layers,
    this change is much simpler --- protocol detection etc are all above the
    profile resolution layer. We can simply add an `UnwrapOr` layer that
    skips the profile route layers.
    
    This change is much less important than the corresponding outbound
    change, but the two changes together will permit us to simplify the
    profile route layer by taking a `Param<profiles::Receiver>` rather than
    a `Param<Option<profiles::Receiver>>`.
    
    This does also require adding an additional `BoxResponse` layer to erase
    differing response body types based on whether or not profile route
    metrics are recorded.

commit 04310712e37d17ed4b32d3af4ccda7ac9c71d41d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 13 14:38:48 2021 -0700

    split: change traffic splits to require a profile (#964)
    
    This branch builds on #963 by changing the traffic split service to
    require its target type implement `Param<profiles::Receiver>` rather
    than requiring `Param<Option<profiles::Receiver>>`. This lets us
    simplify the implementation significantly by removing the "default" case
    that's built when no profile was discovered.
    
    Depends on #963
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 6584c24d31a7012151ccf88c4aed2637140c7350
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 13 10:01:20 2021 -0700

    outbound: skip logical stacks when no profile is discovered (#963)
    
    Currently, the outbound proxy's `Logical` target type contains an
    `Option<profiles::Receiver>`. When no profile is discovered, this field
    is set to `None`; the per-profile layers in the logical stack do nothing
    when this field is `None`. However, we still *construct* this whole
    stack for all destinations, even those without logical addresses.
    
    This PR refactors the outbound proxy so that the `Logical` targets
    *always* have discovered profiles, and the logical stack is skipped when
    no profile is discovered. Profile discovery still returns an
    `Option<profiles::Receiver>`, but we unwrap it in one place immediately
    after the profile discovery layer, and skip directly to the endpoint
    stack when it is `None`.
    
    This means that we can now avoid constructing layers like traffic split
    etc when there is no profile for a target, rather than building a
    traffic split that does nothing.
    
    Note that some of the layers in the logical stacks currently *do* still
    have code for handling the case where a `Logical` target has no profile.
    These layers currently take targets that are bounded with
    `Param<Option<profiles::Receiver>>`. The `Logical` type still has its
    `Param<Option<profiles::Receiver>>` impl, it just always returns `Some`
    now. I chose to leave this code as-is since this branch is already a
    fairly large refactor. We can simplify a lot of this code in a follow-up
    (although some layers may also require a similar change on the inbound
    side).
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 863ef23976cdf3821eea83b78ee8466bdfa46772
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 12 11:19:01 2021 -0700

     addr: fix `to_http_authority` panic with IPv6 (#976)
    
    Currently, the `Addr::to_http_authority` method panics when called on a
    `SocketAddr` which is an IPv6 address with port 80. This method does not
    panic when called with IPv4 addresses, or with IPv6 addresses whose
    ports are *not* port 80. This was initially caught by oss-fuzz; see
    [here][1] for details.
    
    The panic occurs because when an IPv6+ address occurs in an authority,
    it must be within square brackets, as per [RFC3986, Section 3.2][2]. The
    square brackets distinguish between colons in the IPv6 address and the
    colon separating the address and port. When the `SocketAddr`'s port is
    not port 80, we format it including the port, and the `fmt::Display`
    output from IPv6 `SocketAddr`s includes the square brackets as expected.
    
    However, when the socket's port *is* port 80, we have special logic for
    eliding the port from the authority. This works fine for IPv4, where we
    can just call `addr.ip().to_string()` to nicely format the address.
    However, with IPv6 addresses, this only formats the address itself,
    *not* the square brackets. According to RFC3986, square brackets are
    mandatory for *all* IPv6 addresses, even when port 80 is elided.
    
    This branch fixes the panic by changing `Addr::to_http_authority` to
    include square brackets when formatting IPv6 `SocketAddr`s with port 80.
    
    I've also improved on @olix0r's original test cases from
    dbf898a to include IPv6 addrs with and without
    shorthand, and to test ports that are and are not port 80. These tests
    helped catch the panic, and may be useful to guard against future
    regressions.
    
    Fixes linkerd/linkerd2#6020
    
    [1]: https://oss-fuzz.com/testcase-detail/6502844766224384
    [2]: https://tools.ietf.org/html/rfc3986#section-3.2
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit e0c2abaef9d3743fd4e38e2be8fc8f1ce8ab9083
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 12 08:30:31 2021 -0700

    Update trust-dns to fix possible panic (#975)
    
    Our fuzz tests trigger a panic in trust-dns when resolving names through
    the search path (i.e., in `/etc/hosts`) as described in
    bluejekyll/trust-dns#1447.
    
    This change patches our trust-dns dependencies to use include
    bluejekyll/trust-dns#6dfc6713 (which has not yet been released to
    crates.io)
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33123

commit eadc81385a1157faafd892cce746caba578fead3
Author: ihc童鞋@提不起劲 <ihciah@gmail.com>
Date:   Mon Apr 12 04:07:29 2021 +0800

    transport: Fix orig-dst compilation on non-Linux targets  (#974)
    
    The `orig_dst_addr` helper function does not compile when the target OS
    is not Linux. This change fixes the signature and return value of the helper
    for non-Linux targets

commit a2ee6b74cf0ac5670a5d0a86c25e09f8cd4002f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Apr 11 13:03:28 2021 -0700

    http: Do not fail fuzz tests when all IO is not read (#973)
    
    The HTTP detection fuzzer fails if all data is not read from the socket;
    but there is no expectation that the `DetectHttp` will read all data
    from the socket--it only reads to the point where it can make a
    determination about whether the stream appears to be HTTP; and it may
    leave unread data on the socket.
    
    This change replaces the use of a mocked I/O type with a duplex stream
    so that leftover data does not cause a test failure.
    
    Fixes https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=33130

commit 0ac5775024dddff5abd646292b41ae2952d05a0e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Apr 9 08:53:16 2021 -0700

    concurrency-limit: use `tokio-util`'s `PollSemaphore` (#968)
    
    Currently, our concurrency limit middleware uses
    `tokio::sync::Semaphore` to implement the concurrency limit. Because
    acquiring permits from the `Semaphore` type is only possible via the
    `acquire` and `acquire_owned` methods, which are `async fn`s returning
    unameable futures that are `!Unpin`, we cannot simply poll the semaphore
    in `poll_ready`. Instead, to allow polling the concurrency limit service
    to acquire a permit, we box the `acquire_owned` future in `poll_ready`.
    This means that every time we try to acquire a new concurrency limit
    permit, we must allocate a new box.
    
    The `tokio-util` crate has a [`PollSemaphore`][1] type which allows
    wrapping a `tokio::sync::Semaphore` to add a `poll_acquire` method to
    poll the semaphore to acquire a permit. Unlike our implementation,
    `PollSemaphore` uses the [`tokio_util::sync::ReusableBoxFuture`][2] type
    for boxing the `acquire_owned` future returned by the `Semaphore`.
    `ReusableBoxFuture` is a safe abstraction around unsafe code that allows
    *one* allocation to be reused for storing multiple type-erased
    `Box::pin`ned futures. This means creating a single allocation for each
    clone of a `ConcurrencyLimit` service, rather than having each clone of
    the concurrency limit service allocate once *every* time a new permit is
    acquired and drop that allocation once the permit is acquired.
    
    This should reduce the overhead of the concurrency limit layer a bit. It
    also makes the code much simpler! :)
    
    [1]: https://docs.rs/tokio-util/0.6.5/tokio_util/sync/struct.PollSemaphore.html
    [2]: https://docs.rs/tokio-util/0.6.5/tokio_util/sync/struct.ReusableBoxFuture.html
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 4959a7296ea2b74b1df403039dcab6642bb13268
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 8 13:38:05 2021 -0700

    replace `linkerd-channel` with `tokio-stream` (#970)
    
    Depends on #969.
    
    It turns out that the trait impls for `linkerd_channel::Sender` in
    `linkerd-trace-context` were just never being used at all. If we remove
    them, we can remove the custom pollable channel implementation in
    `linkerd_channel` entirely. Then, this crate will provide only stream
    wrappers. Similar wrappers are also provided by `tokio-stream`. If we
    replace the use of `linkerd-channel`'s stream wrappers with
    `tokio-stream`, we can remove this crate entirely.
    
    This branch completely removes the `linkerd-channel` crate and converts
    all uses of its stream wrappers to use `tokio-stream` instead.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit bb671d52be5f5dea9809328f1bb85688e1a61396
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 8 11:52:37 2021 -0700

    discover: replace `linkerd-channel` with `tokio-util` `PollSender` (#969)
    
    This commit replaces the use of `linkerd-channel`'s pollable MPSC in the
    `linkerd_discover` crate's `buffer` module with `tokio-util`'s
    [`sync::PollSender`][1] type, which also implements a pollable sender.
    The `PollSender` type is likely more efficient than our channel
    implementation, since it uses the [`ReusableBoxFuture`][2] type from
    `tokio-util`, which avoids allocating a `Box` for _every_ message sent
    to the channel, and instead reuses a single allocation. It also wraps
    the `tokio::sync::mpsc` `Sender`, rather than reimplementing the
    capacity limit on top of the `UnboundedSender` type. This reduces
    complexity and should hopefully be less error-prone.
    
    [1]: https://docs.rs/tokio-util/0.6.5/tokio_util/sync/struct.PollSender.html
    [2]: https://docs.rs/tokio-util/0.6.5/tokio_util/sync/struct.ReusableBoxFuture.html
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 74a163218dbcfc6456c3079e3734e33c44cf9245
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Tue Apr 6 11:02:51 2021 -0400

    Fix caching in ingress mode (#965)
    
    When the proxy is in `ingress` mode, requests with different
    `l5d-dst-override` headers but the same address share the same key in the
    cache. This causes consecutive requests to the same address to all go to the
    value of the first `l5d-dst-override` header, ignoring the header values of
    later requests—unless the services are evicted from the cache.
    
    This occurs because each key into the cache is calculated based off
    `LogicalAddr`'s `orig_dst` and `protocol` fields. When the proxy is in
    `ingress` mode, the value of `orig_dst` is overridden to `0.0.0.0:port` This
    results in an easy key conflict: two different requests with the same port
    and protocol with result in the same key.
    
    To fix this, the `logical_addr` field is added to `LogicalAddr` and is used
    as a third field in calculating the cache key. `logical_addr` is the value of
    the `l5d-dst-override` header which means requests to the same address but
    with different header values will result in different keys.
    
    Fixes linkerd/linkerd2#5975
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit b4017463a04b30aa6a761f4a9ff1ebc0fded8a42
Author: DavidKorczynski <david@adalogics.com>
Date:   Tue Apr 6 00:31:22 2021 +0100

    Initial fuzzer integration (#961)
    
    Adds a set of fuzzers for various `linkerd` crates.
    
    The goal of this PR is to create an initial fuzzer infrastructure as well as
    fuzzers that can be integrated with OSS-Fuzz for continuous fuzzing.
    
    The way I set it up was to place the fuzzers for a given crate within the
    crate folder itself. I then put in a `fuzz_logic` module in the source code
    that is to be fuzzed, thus following the low of how the existing tests are
    written. The majority of additions in this PR are independent of the
    linkerd2-proxy source code, but there are a few changes.
    
    Signed-off-by: davkor <david@adalogics.com>

commit 07e9249769474f19e11904f9beed29a01dda7fe5
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Mar 31 14:30:36 2021 -0700

    transport: introduce Bind trait and move orig dst to the type level (#957)
    
    This branch introduces a new `transport::listen::Bind` trait that
    abstracts over binding and listening on a socket. Now, rather than
    owning an instance of  the `BindTcp` type, `ServerConfig`s are passed as
    a parameter to a type implementing the `Bind` trait. This will
    eventually allow end-to-end testing without creating actual TCP sockets,
    as `Bind` produces a `Stream` of an IO type and an `Addrs` type.
    
    PR #955 changed the proxy stacks to be a target type which implements
    the `Param` trait for various types of address, rather than a fixed
    type. This PR also changes the inbound and outbound proxies to take
    targets which implement `Param<OrigDstAddr>`, rather than requiring
    `Param<Option<OrigDstAddr>>` and punting fallibility to every point
    where original dst addresses are used.
    
    The `BindTcp` type is now generic over a more general `GetAddrs` trait,
    rather than a `SO_ORIGINAL_DST`-specific `OrigDstAddr` trait. Rather
    than always producing a `listen::Addrs` with an `Option<OrigDstAddr>`,
    we now produce a variable addresses type, which may or may not incldue
    the original destination address (the admin and tap servers don't
    require SO_ORIGINAL_DST). This allows whether or not original
    destination addresses are included to be determined at compile time
    rather than at runtime.
    
    Finally, the incorrect feature flagging of mock original destination
    addresses has been fixed, The "mock-orig-dst" feature has been removed,
    and the integration tests now simply construct their own mock `GetAddrs`
    function that's used to configure the test proxy. In the future, we
    should be able to refactor the tests to avoid this by simply passing in
    their own mock `Bind` types which produce streams of in-memory mock
    connections, rather than actual TCP connections.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 110e9bea59ed394f80e25e78ce1a0a767ce63cb3
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 30 10:43:39 2021 -0700

    admin: Handle connections that fail protocol detection (#960)
    
    The HTTP detect module may fail to detect an HTTP protocol if the first
    read does not return at least 14 bytes. This has caused spurious
    failures as described in linkerd/linkerd2#5672.
    
    This change updates the admin server's protocol detection to handle
    these connections as HTTP/1 so that the HTTP server can try to process
    them and fail on its own if the connection really is not HTTP.

commit bb00dc6b091c2eaee5c46a92dd72f42bd4001b83
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 30 08:36:06 2021 -0700

     tls: Test SNI detection (#959)
    
    7d2bdbb fixed an issue with TLS detection. This change adds a test for
    this behavior.
    
    In order to implement a test, this change modifies the `detect` helper
    to not be responsible for SNI matching & TLS termination. The `detect`
    helper is replaced with a `detect_sni` function that only reads the
    ClientHello without terminating TLS. A test has been added for the
    `detect_sni` helper.

commit 7d2bdbb54569f805f04bf35bf4ed6988906bd641
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Mar 26 17:28:56 2021 -0700

    tls: Fix inbound I/O when TLS detection fails (#958)
    
    When the proxy performs inbound TLS detection, it may break TLS streams
    for application-terminated TLS connections.
    
    Typically, inbound TLS detection does not actually need to buffer data
    from the socket to determine the SNI value for a connection. However,
    non-proxy clients may send enough ClientHello extensions such that
    detection cannot be completed from a single peek of 512B. In this
    situation, the proxy buffers data from the socket to determine the
    SNI value, but it unfortunately does not preserve this buffered data as
    it forward the connection.
    
    This change updates the TLS detection logic to properly preserve any
    data buffered from the socket in forwarded connections.

commit fce8c4aecd2120c5b2cde9b23469fc7a8814565f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Mar 23 14:16:54 2021 -0700

    inbound, outbound: `Param`-ify `listen::Addrs` (#955)
    
    This PR changes the `Service`s constructed by the inbound and outbound
    stacks from always taking the `listen::Addrs` type as a target, to being
    parameterized over a target type that implements `Param` for various
    address types.
    
    This required changing some middleware layers that were previously
    hardcoded to `listen::Addrs`, and adding `Param` impls to
    `listen::Addrs` for various address types. I also added a new
    `TcpAccept::from_local_addr` constructor, which sets the target address
    based on the server's listen address, rather than from the
    SO_ORIGINAL_DST address. This is used by the admin server, which doesn't
    configure its listening socket to include original dst addresses.
    Previously, the `From` implementation for `TcpAccept` just always tried
    the orig dst addr and fell back to the listen addr if it was not
    present. Now, we have separate behavior for the admin server and the
    proxy servers --- admin always uses the local addr, and the proxies only
    try SO_ORIGINAL_DST or fail.
    
    There's no functional change here, but this will set up for a future
    change to make stacks generic over SO_ORIGINAL_DST detection, allowing
    us to remove the currently quite awkward feature flagging.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 32e459be643d98c1c9f2164c4888b0d4e557af68
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 18 17:04:07 2021 -0700

    Update profile response to include a logical address (#954)
    
    Profile responses optionally include a service name, but we only ever
    use it in the context of an address (i.e. with a port).
    
    This change introduces a `profiles::LookupAddr` param type that is used
    as input into the profile client -- the lookup address may hold either a
    named or numbered address. Service profile responses now include a
    `LogicalAddr` that must be a named address.
    
    This sets up for requiring that concrete addresses are named.

commit affd645975640dda50c9067ec6d88def0e3ce9cc
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 18 16:27:59 2021 -0700

    outbound: Make the HTTP server stack generic (#953)
    
    The HTTP server stack is unnecessarily bound to a target type.
    
    In order to support more flexible stack composition, this change makes
    the outbound HTTP server stack generic over its target type.

commit cac988e23933992de1ecc0b560b89eb96f973a23
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 18 16:04:05 2021 -0700

    outbound: Make HTTP endpoint stack generic on its target (#952)
    
    The HTTP endpoint stack is coupled to the Endpoint target type.
    
    In order to make the outbound stack more flexible so that the endpoint
    stack can be used without the logical stack, this change updates the
    outbound HTTP endpoint stack to be generic over its target type.

commit 827762d1bc65522c815b86567a1c29012c4e3f2b
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 18 15:33:00 2021 -0700

    outbound: Decouple the TCP connect stack from the target type (#951)
    
    In order to make the server and logical stack more flexible, we need to
    make stacks generic over their input target type.
    
    This change modifies the innermost `tcp::connect` stack to not depend on
    a concrete target type, instead relying on `Param` constraints. A new
    `tcp::Connect` target type is introduced to be constructed by the TCP
    connect stack.

commit 1009645dc0bb46022a684c8dc15f84fb75c59632
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 18 14:36:51 2021 -0700

    outbound: Configure endpoint construction in logical stack (#949)
    
    ebf67d6b moved endpoint construction logic out of the logical stacks. In
    doing so, the gateway was incorrectly configured to mark endpoints with
    disabled identity, preventing mTLS between the gateway and destination
    service.
    
    This change moves endpoint construction into each logical stack so that
    it need not be configured on each instantiation.

commit 5e9d673a405131a6c9bce52e31ed8648676d2c06
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 18 14:11:58 2021 -0700

    Update MAINTAINERS to point at the main repo (#950)
    
    Update links to refer to the `main` branch.

commit e4c19cc876f1add153a5fd3c6c315010703d2fcb
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 16 10:01:27 2021 -0700

    Handle FailedPrecondition errors from the control plane (#948)
    
    The control plane may return a FailedPrecondition error when the cluster
    is in an unexpected state -- when there are more than one pod for a
    single IP address. The proxy currently retries these lookups ad nauseum.
    
    This change updates the proxy's error handling to avoid retries when
    this error is returned, as if the IP were a non-cluster resource.

commit 7e27e5de640eab22680fd700d9172c861b94cf6c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 15 17:50:09 2021 -0700

    tracing: Avoid high-cardinality client in INFO spans (#947)
    
    Our default TCP server sets an info-level tracing span that includes the
    client IP and port. This client-level metadata is potentially
    high-cardinality, it's not helpful on the outbound side, and it is only
    rendered in rare situations.
    
    This change modifies the server to set its `accept` span on the debug
    level. The inbound and outbound proxies handle setting info-level spans
    with the relevant metadata -- the inbound proxy includes only a server
    port, and the outbound includes the original dst address. The error
    responder has been modified to include the client address in warning
    messages so that it need not be derived from span metadata.

commit e6aec6ef30527a8deea910c26f7b4c00d140d68c
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Mar 12 09:43:52 2021 -0800

    http: Parameterize authority overriding (#946)
    
    The authority override module still uses a dedicated trait,
    `CanOverrideAuthority`. This change replaces this trait with a newtype,
    `AuthorityOverride`, which is provided via `Param`.

commit f7760afc2da85385405c922028265659b42ca9dd
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 11 11:43:24 2021 -0800

    Prevent fixed-address resolutions from ending (#945)
    
    When a controller client is configured with a fixed IP address and not a
    resolveable name, we build that client with a resolution that terminates
    immediately after the client is configured with the fixed address. This
    causes warnings to be emmited even though the client is configured
    properly.
    
    This change updates theses resolutions to avoid termination so these
    warnings are not logged.

commit acf250f2cee54eac69617fa9663ccc8ba42715e1
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 9 12:00:15 2021 -0800

    duplex: Ensure written data is flushed (#944)
    
    In testing Postgres dumps through Linkerd, we see some situations where
    data is written to rustls but does not become visible to the client.
    Rustls documents that written data may need to be flushed.
    
    This change updates the `HalfDuplex::copy_into` function to flush data
    when all available data has been read. This change also increases the
    copy buffer from 4KB to 64KB to reduce processing overhead.

commit f481c66229bfff857ffd357a2aef3fcbe8fb0484
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 8 14:44:57 2021 -0800

    Prevent server errors from panicking the proxy (#943)
    
    The TCP server currently returns an error if an `accept(2)` call fails
    with an error. This error can cause the proxy to panic.
    
    This change handles this error gracefully, emitting a warning. The
    server task no longer returns a Result-type.

commit 4399726d6e54090b841e589be106345d162ae24f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 8 13:05:29 2021 -0800

    outbound: Mock the original destination address in ingress-mode (#942)
    
    The ingress-mode outbound proxy currently does not work as expected:
    resolutions are performed for each unique endpoint so that a service
    with 10 endpoints would manifest as 10 distinct balancers (with 20
    resolutions).
    
    While we should ultimately rework the outbound stack to have target
    types that prevent this problem (i.e. by removing the original
    destination address from the Logical target type), this change
    implements a hack to avoid the observed cardinality issues: In
    ingress-mode, the original destination address is now mocked out with an
    IP address of 0.0.0.0 so that only a single cache entry is created per
    logical destination.

commit 77e2016ccc35c98995eaf836e0da16def0bdd5b1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 8 12:24:27 2021 -0800

    Make stack trace initialization lazy (#940)
    
    The stack-tracing module eagerly initiates its spans once per service;
    but when the service is cached, this locks the service to its original
    parent span so that log messages from subsequent accessors appear to
    have the wrong parent span information.
    
    This change modifies the stack tracing helper to (1) be
    NewService-specific and (2) to initiate unique spans for each call. The
    instrumented `Service` constructs a new span the first time `poll_ready`
    is called, and consumes that span in `call`, so the `poll_ready`s that
    drive a service to readiness and the subsequent `call` that consumes
    that readiness are both considered one individual span for that request.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 3b6aa2403b68fe2c8952166fa58fafa17ece444b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Mar 8 11:43:32 2021 -0800

    duplex: include src/dst peer in logs (#937)
    
    The `linkerd_duplex` crate emits trace events for every read and write
    operation performed, but these events don't make it clear which peer
    performed the read or write. This branch adds names to the trace event
    to make it possible to determine whether a read/write was performed by
    the source or destination peer.
    
    This does make the `Duplex` struct two words larger. Not sure if we
    care. It might theoretically be possible to encode this using type
    parameters to avoid the `&'static str`s; I'm not sure if this is worth
    adding some wacky code to avoid two words of string constant pointer.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 05f9c5db125bb678adbad1857f416dbf53907661
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 8 11:23:34 2021 -0800

    http: Parameterize header module (#941)
    
    The module responsible for adding HTTP headers from target types expects
    the target to be coerced to a `HeaderValue`. This means that a target
    can only instrument a single header; and it creates some ambiguity.
    
    This change updates the header insertion module to use a Param-type to
    represent a key-value header pair, making uses clearer.

commit b453c044126509b5bbd754af38e5e5c0f7691c07
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Mar 5 16:01:40 2021 -0800

    errors: always teardown connections on errors (#939)
    
    Currently, the proxy tears down connections on unhandled errors, unless
    those errors are timeouts. We special-case errors which are timeouts and
    don't close connection in those cases.  However, this can result in
    connections failing to be torn down when the host is unreachable. If the
    proxy continues trying to reconnect after a connection error, the
    connection error won't be what makes it to the errors layer --- instead,
    the request will eventually time out while reconnecting. This gets the
    request 503ed, but the connection remains open --- which, when a client
    is trying to talk to a stale endpoint, results in the connection
    entering a stuck state.
    
    This branch fixes this by removing the special-case logic for timeouts,
    and always tearing down connections. I validated this change using the
    repro in linkerd/linkerd2#5871 and confirmed that the issue is resolved
    after removing the special handling for timeouts.
    
    This fixes linkerd/linkerd2#5871.

commit ebf67d6b4ae2e3ca97b735ffa4c294829ee62050
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 4 18:19:34 2021 -0800

    outbound: Decouple the resolver from concrete target types (#938)
    
    The endpoint resolver module currently has a fixed dependency on the
    `Concrete` and `Endpoint` target types.
    
    This change extracts endpoint-type construction so that the HTTP logical
    stack is agnostic of its endpoint target type. It also updates the
    `EndpointFromMetadata` type to be responsible for marking identity as
    disabled when appropriate. Finally, we are able to re-enable the
    outbound TLS hinting test.

commit bf760fb898bf099038060f9f6f6e289661c33388
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 4 14:18:05 2021 -0800

    outbound: Use the OrigDstAddr type in stack targets (#936)
    
    The outbound stack is ambiguous about the type of orig_dst/target
    address it uses.
    
    This change modifies the outbound stack types to use the `OrigDstAddr`
    type. The outbound stacks now error when an `OrigDstAddr` type is not
    present.

commit f0fce1c4568f9243f533670a50a1bbdd25d6d22e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Mar 4 13:43:55 2021 -0800

    outbound: Simplify Endpoint type (#935)
    
    The outbound proxy's `Endpoint` target-type is currently coupled with
    the `Logical` type and it contains two `SocketAddr` values that are
    undifferentiated.
    
    This change updates the `Endpoint` type to be decoupled from the
    `Logical` type and to hold a single `addr` value.

commit 1ae78aa148bc88c741c3da31e092320b66ffd85c
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Mar 3 18:14:58 2021 -0800

    inbound: Remove unnecessary connection stack cache (#934)
    
    The inbound proxy caches each HTTP server stack, but this stack's cache
    key includes client address information, so this cache ends up requiring
    an entry per connection and stacks are not reused.
    
    This change removes this unnecessary cache.

commit 6a4ad07fba7b824ba08487cc81917633fc802cc5
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Mar 3 09:09:03 2021 -0800

    ingress: Instrument outbound TCP metrics (#933)
    
    In ingress mode, the HTTP endpoint stack is not configured with the TCP
    endpoint layers, so outbound connections are not properly tracked in
    metrics.
    
    This change restores this functionality.

commit 8c70d7325657d73f74e7c574b87768f4dcbf774c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 1 11:07:30 2021 -0800

    server: Log non-i/o errors at INFO (#932)
    
    8c87c5de updated the server to log errors at DEBUG; but this will hide
    proxy-generated errors like detection timeouts.
    
    This change logs all i/o errors at DEBUG and restores other errors to
    the INFO level.

commit 8c87c5ded1eb713fb5a9c69581818cd08e4f203e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 1 10:10:03 2021 -0800

    server: Log connection closed messages at DEBUG (#931)
    
    Per linkerd/linkerd2#5331, it seems that "Connection closed" log
    messages, which in many cases are compltely innocuous, cause concern
    when people see them in production.
    
    This change moves these messages from the INFO to DEBUG log level so
    that they are only observed when explicilty configured.

commit 530774284e33db6e0a6c1d9e943ea54d74332517
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 25 11:53:37 2021 -0800

    Remove the tcp_connection_duration_ms histogram (#930)
    
    The TCP connection histogram is pretty useless in its current form: its
    granularity in milliseconds is generally unsuited to long-lived
    connections; and it ends up being extremely high cardinality.  And on
    top of all that, the value isn't currently consumed in our UIs.
    
    This change removes the `tcp_connection_duration_ms` histogram from the
    proxy.
    
    Relates to linkerd/linkerd2#5818

commit 371c44a0a146532610211cc8c252868cc93ddac7
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 24 10:47:53 2021 -0800

    detect: Surface timeouts to inner stack (#929)
    
    In 95498395, the detect service was modified to handle detect timeouts
    gracefully; but, we can't differentiate this situration from other
    detection mismatches.
    
    In order to use the detect trait more generally--especially for TLS
    detection, this change modifies the `Detect` trait to pass an error into
    the inner stack when detection fails. Uses are updated to either fail on
    or log when an error is countered, as appropriate. This will be relied
    on in followup changes.
    
    Furthermore, the `Detect` trait's I/O type is moved to be a
    trait-generic (rather than a method-generic) so that implementations may
    impose further type constraints.

commit 10f5deff79e06f0c787061eb9f59fe2dd5a509ac
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Feb 23 10:08:15 2021 -0800

    trace: set `log` global max level when reloading (#928)
    
    In order to ensure that disabled `log` records are skipped by taking the
    fastest path the `log` crate offers whenever possible, we should set the
    `log` max level every time the `tracing` filter is reloaded.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 849c4e2296bb03b91c7abd341d13a09b44759c88
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Feb 22 14:38:06 2021 -0800

    deps: Update `tracing-subscriber` to 0.2.16 (#927)
    
    This picks up tokio-rs/tracing#1247, tokio-rs/tracing#1248,
    tokio-rs/tracing#1251, and tokio-rs/tracing#1254. Collectively, these
    changes should result in a significant performance improvement when
    using `tracing-log`'s compatibility layer for converting legacy `log`
    records to `tracing` events.
    
    Since we have some dependencies which use the `log` crate, this should
    hopefully reduce the overhead of those dependencies' logging. I'm not
    sure how much `log` we have in the hot path by this point, but it's
    probably a good idea to pick up the change regardless.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b644c453b6c045d7ec859369b86fe3263d6b58fe
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 22 14:37:17 2021 -0800

    Add support for TLS v1.3 (#926)
    
    TLS 1.3 has been available in rustls for a while now, giving us some
    confidence that it's stable.
    
    This change adds TLS 1.3 to the list of supported TLS versions. With
    this change, proxies will prefer TLS 1.3 when both peers include this
    change and will downgrade to TLS 1.2 when communicating with an older
    proxy version.
    
    I've tested that this behaves as expected by upgrading just the
    emojivoto app's _web_ and _voting_ services with debug logging. Older
    proxies communicate with newer proxies via TLS 1.2 and newer proxies
    communicate via TLS 1.3.

commit a206018a6a3c15270c5d2bec5d8a5f2e7a12605b
Author: Tarun Pothulapati <tarunpothulapati@outlook.com>
Date:   Tue Feb 23 01:48:55 2021 +0530

    make proxy builds work on windows (#925)
    
    Currently, The proxy builds fail on windows because of the absence
    of `future::preludes`. That does not seem to be required anymore
    and the windows ctrl_c signal can be used similar with that of
    the unix signals.
    
    This PR updates the `shutdown` fn in imp for windows to be just
    like the unix ones. I'm aware that the proxy is not intended to be run
    on windows machines but this was an easy fix to make builds work.
    
    Signed-off-by: Tarun Pothulapati <tarunpothulapati@outlook.com>

commit 0495fc7e52ed5d4867eadd87e76694a61508495a
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 18 12:52:53 2021 -0800

    outbound: Prevent connections on the loopback interface (#924)
    
    linkerd/linkerd2#5764 reports proxy OOMs, apparently caused by traffic
    looping from the outbound proxy back to the inbound proxy. While we
    don't understand the underlying circumstances, we should *never* proxy
    outbound connections on the loopback interface in normal operation.
    
    This change modifies the outbound TCP connection stack to prevent
    connections on loopback addresses. A feature flag, `allow-loopback`, is
    provided to disable this functionality. This is necessary so that our
    local integration tests can continue to pass.

commit c30e2afe5c53af74621de9c01a10b0f1c4bd8bde
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Feb 17 15:45:39 2021 -0800

    buffer: replace `linkerd-buffer` with `tower::buffer` from upstream (#922)
    
    The proxy currently has its own implementation of a `tower` `Service`
    that makes an inner service `Clone`able by driving it in a spawned task
    and buffering requests on a channel. This also exists upstream, as
    `tower::buffer`.
    
    We implemented our own version for a couple of reasons: to avoid an
    upstream issue where memory was leaked when a buffered request was
    cancelled, and to implement an idle timeout when the buffered service
    has been unready for too long. However, it's no longer necessary to
    reimplement our own buffer service for these reasons: the upstream bug
    was fixed in `tower` 0.4 (see tower-rs/tower#476, tower-rs/tower#480,
    and tower-rs/tower#556); and we no longer actually use the buffer idle
    timeout (instead, we idle out unresponsive services with the separate
    `Failfast` middleware, note that `push_spawn_buffer_with_idle_timeout`
    is never actually used).
    
    Therefore, we can remove our _sui generis_ implementation in favour of
    `tower::buffer` from upstream. This eliminates dead code for the idle
    timeout, which we never actually use, and reduces duplication (since
    `tonic` uses `tower::buffer` internally, its code is already compiled
    into the proxy). It also reduces the amount of code I'm personally
    responsible for maintaining in two separate places ;)
    
    Since the `linkerd-buffer` crate erases the type of the buffered
    service, while `tower::buffer` does not, I've changed the
    `push_spawn_buffer`/`spawn_buffer` helpers to also include a
    `BoxService` layer. This required adding a `BoxServiceLayer` type, since
    `BoxService::layer` returns a `LayerFn` with an unnameable type.
    
    Also, this change ran into issues due to a compiler bug where generators
    (async blocks) sometimes forget concrete lifetimes,
    rust-lang/rust#64552. In order to resolve this, I had to remove the
    outermost `async` blocks from the OpenCensus and identity daemon tasks.
    These async blocks were used only for emitting a tracing event when the
    task is started, so it wasn't a big deal to remove them; I moved the
    trace events into the actual daemon task functions, and used a `tracing`
    span to propagate the remote addresses which aren't known inside the
    daemon task functions.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 0bd3ada77fe77840cadf0720ede7afdc07028494
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 17 14:49:05 2021 -0800

    transport: Introduce a Keepalive type (#923)
    
    When handling `Duration` values, it can be ambiguous as to the value's
    intended use.
    
    This change introduces a `Keepalive` new-type that wraps an optional
    `Duration`. This will allow keepalive values to be parameterized without
    ambiguity (in future changes).
    
    No functional changes.

commit 0c1e0deb076701bee4d87b6e6ab02faea03e3a7f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 17 14:12:50 2021 -0800

    transport: Introduce address new-types (#921)
    
    Throughout the codebase, we handle many types of `SocketAddr`s. It's
    easy to use these instances in an incorrect context.
    
    In preparation for upcoming changes to listen module and target types,
    this change introduces a family of new-types to disambiguate these uses:
    
    - `ClientAddr`  -- a client's (ephemeral) address
    - `ServerAddr`  -- a server's address
    - `OrigDstAddr` -- an address set by the `SO_ORIGINAL_DST` socket option
    
    Additionally, `Local` and `Remote` address types are introduced to
    further disambiguate the above types:
    
    - `Remote<ClientAddr>` -- a server connection's peer address
    - `Local<ServerAddr>`  -- a server connection's local address
    - `Remote<ServerAddr>` -- a client connection's peer address
    - `Local<ClientAddr>`  -- a client connection's local address
    
    A special `ListenAddr` type is introduced to indicate an unbound address
    to be used to bind a server. The `OrigDstAddr` trait is renamed to
    `GetOrigDstAddr`.
    
    No functional change.

commit 629f2fbb663198ef35406b310f504fa6901f9f9f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Feb 16 20:18:42 2021 -0800

    update tracing-futures, rm old pin-project (#920)
    
    This PR updates the dependency on `tracing-futures` to 0.2.5, which
    updates that crate to depend on `pin-project` 1.0. After removing one
    last `pin-project` 0.4 dependency, we can now remove `pin-project` from
    the duplicate dependency versions allowlist!

commit 32eab117d67ed95e29362d770d321357a1b5c9fd
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 15 12:55:50 2021 -0800

    Move proxy stack initialization into modules (#915)
    
    The inbound and outbound proxy stacks & servers are constructed in the
    `app` module. This change moves all inbound & outbound server
    initialization into the `inbound` and `outbound` modules.
    
    This simplifies `app` initialization.

commit e73c4b7ee54a53aad49bda2806284aad454cb5ab
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 15 12:02:37 2021 -0800

    Update dependencies (#918)
    
    This update addresses [RUSTSEC-2021-0023][1], which shouldn't actually
    impact Linkerd's use of `rand`.
    
        Updating git repository `https://github.com/linkerd/webpki`
        Updating crates.io index
        Updating git repository `https://github.com/linkerd/linkerd2-proxy-api`
        Updating git repository `https://github.com/hawkw/tokio-trace`
        Updating httparse v1.3.4 -> v1.3.5
        Updating idna v0.2.0 -> v0.2.1
        Updating libc v0.2.84 -> v0.2.86
        Updating libmimalloc-sys v0.1.18 -> v0.1.20
        Updating mimalloc v0.1.22 -> v0.1.24
        Updating parking_lot_core v0.8.2 -> v0.8.3
        Updating pin-project v1.0.4 -> v1.0.5
        Updating pin-project-internal v1.0.4 -> v1.0.5
        Updating quote v1.0.8 -> v1.0.9
        Updating rand_core v0.6.1 -> v0.6.2
        Removing redox_syscall v0.1.57
        Removing redox_syscall v0.2.4
          Adding redox_syscall v0.2.5
        Updating ring v0.16.19 -> v0.16.20
        Updating serde_json v1.0.61 -> v1.0.62
        Updating thread_local v1.1.2 -> v1.1.3
        Updating tokio v1.1.1 -> v1.2.0
        Updating tokio-macros v1.0.0 -> v1.1.0
        Updating tokio-stream v0.1.2 -> v0.1.3
        Updating unicode-normalization v0.1.16 -> v0.1.17
    
    [1]: https://rustsec.org/advisories/RUSTSEC-2021-0023

commit 9695b6b1620021d840281b5bd0d11f0f663c9eb9
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 15 10:23:36 2021 -0800

    transport: Replace async-stream with tokio-stream (#914)
    
    The TCP listener creates an async-stream of accepted connections; but
    the tokio-stream crate provides a stream utilitity for TCP listeners.
    
    This change swaps the implementation of BindTcp. The tokio-stream
    implementation should be lighter-weight to compile; and this sets up for
    refactoring the listener so that TCP binding is not required for tests.

commit bb20740bfde5e1cce3714f6813db5ac508ee4cae
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 15 10:22:44 2021 -0800

    Re-export stack::Param as svc::Param (#917)
    
    This is a purely superificial change that shortens a very common import.

commit 20619fb1782216df515cd7927c764cfa58b6e46c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 11 16:22:14 2021 -0800

    Log warnings when controller components do not resolve (#913)
    
    The `dns` module currently swallows resolution errors so that these
    errors never hit the error handler.
    
    This change modifies the `dns` module to propagate these errors so they
    are handled by the resolver recovery module. The control plane's
    recovery implementation is updated to log these errors and to use the
    DNS TTL for backoffs, when present.
    
    We now see errors like:
    
        WARN ThreadId(01) identity: linkerd_app_core::control: Failed to resolve control-plane component error=no record found for name: linkerd-identity-headless.linkerd.svc.cluster.local. type: SRV class: IN

commit 86002fcb68d449438485cbb3c268df0845dd8506
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Feb 11 08:10:30 2021 -0800

    channel: use `tokio-util`'s `PollSemaphore` (#912)
    
    The `linkerd-channel` crate currently uses a custom wrapper around
    `tokio::sync::Semaphore` to permit polling the semaphore manually, by
    boxing the futures returned by `Semaphore::acquire_owned`. This means
    that every time a message is sent to the channel, reserving capacity
    requires allocating and deallocating a `Box`.
    
    The `tokio-util` crate now has a `PollSemaphore` type which allows
    polling the semaphore to acquire permits without requiring an allocation
    per message. This is implemented using the `ReusableBoxFuture` type, which
    allows using a single allocation per sender for every `acquire_owned`
    future that sender creates.
    
    This should be somewhat more efficient and also reduces the complexity
    of our code a bit.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 50fcfce4125c594ba0c1bc7dfcad8d6130985290
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Feb 11 08:08:35 2021 -0800

    update Tower to v0.4.5 (#911)
    
    The recently released v0.4.5 of Tower includes a change to
    `tower::buffer` to use `tokio-util`'s `PollSemaphore`, which should
    reduce allocations when polling `Buffer` services. Additionally, it
    includes a fix for `tracing` spans not being propagated to the tasks
    spawned by the `SpawnReady` middleware.
    
    No functional changes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 076c13750f91267f522ca57d936d25fffb236ff9
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 10 19:32:52 2021 -0800

    Parameterize resolution targets (#908)
    
    The proxy's destination API clients need to turn target types into a
    resolveable address. The implementations currently use only `ToString`
    and we provide wrappers that handle dispatching the proper value -- but
    this is fragile.
    
    This change parameterizes both the api-resolve and service-profile
    clients with newtypes: `ConcreteAddr` and` LogicalAddr`, respectively.
    The test infrastructure has been simplified to no longer be generic over
    the target type (instead relying on `Addr` which ultimately backs both
    of these types).
    
    This change sets up future stack changes.

commit c8bf2761f504e538d1768c18f445cfb004ef94a1
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 9 15:06:54 2021 -0800

    Fix HTTP gateway for protocol downgrading (#910)
    
    80f432d0 updated the gateway to use the transport header metadata for
    request routing, but this ignored the request-level HTTP version which
    may be modified by orig-proto downgrading.
    
    This change reintroduces a request router onto the HTTP gateway so that
    the request version may be used.

commit 80f432d06fe4d5eedb84fd1bb31623d4795173df
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 9 10:49:51 2021 -0800

    gateway: Transport TCP connections (#909)
    
    The proxy's gateway mode can only transport HTTP requests; but, with the
    introduction of the transport header (informed by TLS ALPN), the gateway
    now has enough context to route TCP connections through the gateway.
    
    This PR modifies the gateway stack to handle transported connections
    differently from legacy HTTP connections. When clients connect to a
    gateway with a transport header, the header's metadata is used for all
    routing/discovery so, in the HTTP case, a request router is not
    necessary. A TCP gateway is also introduced when a transport header does
    not include a protocol hint. The same discovery is performed and
    connections are dispatched through the TCP logical stack to balance and
    forward connections within the gateway cluster.
    
    More testing is needed on this, but I plan to address this in followup
    changes that make the outbound stack more flexible and amenable to
    testing.

commit 8bea5cc8832b9002009b858ad58b82554ea70e64
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 8 12:32:21 2021 -0800

    outbound: Unify the TCP logical stack (#907)
    
    The protocol detection stack currently instruments TCP traffic splits.
    
    This change renames `tcp::balance` to `tcp::logical` and updates the
    stack builder to include weighted distribution. The `ShouldResolve` type
    is moved to `Logical::or_endpoint` and updated to provide an endpoint
    when discovery should not be performed.

commit 125c209f950cc3b2d150274047ceff6fc6e3f182
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 8 12:00:46 2021 -0800

    Improve stack builder ergonomics (#906)
    
    Some stack builders were not converted to be functions on the `Inbound`
    or `Outbound` types because they had no obvious underlying stack type.
    
    This change modifies `Inbound` and `Outbound` to be built with a
    unit-typed stack by default. They each now have a set of common utility
    functions used to bind the unit-typed stack to a service-stack.
    
    No functional changes.

commit a47c915b77af7bd248f70837d9df38a03d57f11f
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 5 18:00:37 2021 -0800

    Update Hyper for  RUSTSEC-2021-0020 (#905)
    
    Advisory: https://rustsec.org/advisories/RUSTSEC-2021-0020
    
        hyper's HTTP server code had a flaw that incorrectly understands some requests
        with multiple transfer-encoding headers to have a chunked payload, when it
        should have been rejected as illegal. This combined with an upstream HTTP proxy
        that understands the request payload boundary differently can result in
        "request smuggling" or "desync attacks".

commit 740c9fb68e8f483552398b3f59916924f91ddcc9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Feb 5 17:51:35 2021 -0800

    tracing: update to 0.1.23, remove `tracing-futures` (#904)
    
    This branch updates the proxy's dependency on the `tracing` crate to
    v0.1.23. It also removes the dependency on the `tracing-futures` crate
    entirely, as the `Instrument` trait and `Instrumented` macro for
    `std::future`s are now provided by `tracing` itself, and we don't use
    any of the other functionality provided by `tracing-futures`. This
    simplifies our dependency tree a bit and will allow us to stop allowing
    an outdated `pin_project` in our cargo-deny config.

commit 12110d4017b6ef43ecf01eb5ca08f63b5f62ed13
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 5 11:59:59 2021 -0800

    Prevent outbound connections on the loopback interface (#903)
    
    The outbound proxy attempts to prevent loops by preventing connections
    to the proxy's outbound server port; but the outbound proxy **only**
    listens on the loopback interface, so port-based matching is
    ineffective.
    
    We *should* prevent all outbound connections on the loopback
    interface--it indicates an iptables misconfiguration; but this would
    unfortunately break many of our integration tests
    
    This change removes outbound loop prevention.

commit 201c563a1274aac9ad7e75fea0926c6da6eaa5ea
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 4 15:32:12 2021 -0800

    Simplify inbound stack composition (#902)
    
    18e568a changed how outbound stacks are built, replacing free functions
    with an `Outbound` builder type.
    
    This change applies this pattern to the inbound proxy, reducing
    boilerplate.

commit 18e568a77d0b0c4a21b1f1b00e7c7e3a445711e5
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 4 14:37:42 2021 -0800

    Simplify outbound stack composition with builders (#901)
    
    Outbound stack construction is instrumented from a mess of
    free-functions that take a large number of arguments. Many stack
    functions accept the same arguments. This leads to a lot of boilerplate
    and makes it inconvenient to reconstruct stacks, as many values are
    needed.
    
    This change simplifies outbound stack construction by introducing two
    new types:
    
    - `core::ProxyRuntime`, which holds all common runtime configuration
      (metrics, tap, tracing, drain, etc); and
    - `outbound::Outbound`, a helper that holds the outbound config, the
      proxy runtime, along with outbound-specific stack constructors.
    
    All outbound stack constructors are now implemented in terms of these
    types. This makes it simple to construct stacks without passing around
    the same set of values ad-nauseam.

commit 2b975c3f5b0fa1399628825cd3bd27f3e1f3dfe6
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 4 10:59:53 2021 -0800

    Simplify opencensus stack composition (#900)
    
    The tracing infrastructure exposes its implementation details (via type
    signatures) to stack layers.
    
    This change renames `app::core::spans` to `app::core::http_tracing`
    which provides helpers that bundles the `TraceContext` layer with a
    `SpanConverter`. It also provides a `OpenCensusSink` type alias so
    that proxy stack builders can be ignorant of its actual type signature.
    
    The `SpanSink` trait is updated to expose `is_enabled` which must be
    called before constructing a span so that the `TraceContext` type isn't
    required to hold an `Option<SpanSink>`.

commit fe1605ddc7200fc22c42567bb355f7fc1e5cffc2
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 3 18:04:51 2021 -0800

    outbound: Split outbound::server into multiple modules (#899)
    
    In order to support TCP gateway, the outbound stack will need to be
    constructed without its HTTP server, profile discovery, etc.
    
    This change splits the `outbound::server` module into several distinct
    modules:
    
    * The `outbound::server::cache` helper is now `outbound::discover`. It
      is now responsible for caching profile discovery;
    * The HTTP server logic is moved into `outbound::http::server`;
    * `outbound::server` now includes only protocol detection and TCP
      forwarding; and
    * `outbound::stack` composes these stacks for non-gateway outbound
      proxying.

commit 2e4b7c02f2646a3cae2459c85bb371ccde1546d2
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 2 14:42:20 2021 -0800

    Extract protocol detection into the gateawy crate (#898)
    
    The inbound proxy's direct stack has been responsible for performing
    HTTP detection to dispatch requests through an HTTP gateway. In
    anticipating of supporting a TCP gateway, the gateway module needs to
    change to accept TCP streams to be routed.
    
    This change modifies the gateway stack to accept TCP streams and perform
    protocol detection as needed to satisfy HTTP gateway requests.
    
    No functional changes are included. TCP gateway support will follow in a
    separate change.

commit 95498395581089bf755d0a12c5bf2ba4c7511df1
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 2 13:56:51 2021 -0800

    detect: Return unknown protocol on detection timeout (#896)
    
    The inbound proxy does not need to transparently detect transport
    headers. The header is always indicated by TLS protocol negotiation.
    
    This change decouples the `transport-header` module from the `Detect`
    trait. The inbound direct stack is modified to require a transport
    header when ALPN has determined that a header should be expected. Legacy
    HTTP gateway support is attempted when no header is negotiated.
    
    This sets up changes to the `Detect` server implementation.
    
    * detect: Return unknown protocol on detection timeout
    
    When performing HTTP detection, we always instrument a detection
    timeout; and, if the timeout expires, we fail the connection. This leads
    to confusion and complexity, especially when getting started with
    Linkerd.
    
    This change modifies the detect module to handle these timeouts
    gracefully: instead of failing the connection with an error, we indicate
    that no protocol could be detected and continue processing the
    connection as a non-HTTP protocol. Furthermore, this change unifies the
    timeout logic into the `DetectService` implementation to avoid
    unnecessary boxing (due to async-trait).

commit 43b298d90444000d6c98e3d4b2b5b981a3ed445d
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 2 11:05:23 2021 -0800

    inbound: Use ALPN to determine transport header (#895)
    
    The inbound proxy does not need to transparently detect transport
    headers. The header is always indicated by TLS protocol negotiation.
    
    This change decouples the `transport-header` module from the `Detect`
    trait. The inbound direct stack is modified to require a transport
    header when ALPN has determined that a header should be expected. Legacy
    HTTP gateway support is attempted when no header is negotiated.
    
    This sets up changes to the `Detect` server implementation.

commit c49bca12a79a9093f015ec8e7f5fee59e78d52ab
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 2 11:01:36 2021 -0800

    Bias HTTP detection towards availability (#894)
    
    1b97e57 changed HTTP detection to bias towards correctness. Instead of
    performing a single read, the HTTP detection module reads data until a
    newline is encountered so that a dispositive determination can be made.
    Practically, this causes many non-HTTP protocols to fail with a
    connection timeout because a newline is never transmitted.
    
    This change reverts the HTTP detection logic to perform a single read
    and to use that data to make a determination. A minimum of 14B is
    required to handle a connection as HTTP.

commit 53c770b4f69b02c91c2e9926b2bd694d52be1ae5
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 2 07:57:47 2021 -0800

    Reorganize the gateway crate (#897)
    
    In preparation for upcoming gateway changes, this PR moves some things
    around:
    
    * The `config` module is lifted to `lib.rs`, with a free-fn stack
      builder.
    * A `tests` module has been split out into a distinct file.
    * The `make` module has been consolidated with the `gateway` module.

commit dca2a6468d086f34c2b4183442cf88bfbb8740df
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 1 18:05:02 2021 -0800

    inbound: Cache HTTP gateways per destination (#893)
    
    When handling the HTTP gateway connections, the inbound proxy includes
    the client's ID in the gateway's cache key so that a gateway service is
    created for each (client, target) pair. Furthermore, the HTTP server
    cache includes client _addresses_ in its key, so that a service is
    cached for each _connection_ (which makes no sense).
    
    In preparation for TCP gateway support, this change simplifies
    inbound gateway handling by creating distinct target types used only by
    the direct stack. Connections that lack identity or a target are failed
    as early as possible, simplifying the gateway implementation. Client
    identity is provided to gateway by setting the identity as a request
    extension before the service is cached.

commit a093de71a7d0f1d48b9ee83aa69ec73a85066947
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 1 11:26:51 2021 -0800

    outbound: Avoid building balancers when no concrete name (#890)
    
    The outbound balancers are always built, even when there is no
    resolveable concrete address.
    
    This change modifies the outbound `Concrete` target to require a
    resolveable address. When no address is present, the balancer stack is
    skipped in favor of an endpoint stack.

commit 7c9e1608da50f8ee2134074d398ae9b41dafac92
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 1 10:38:26 2021 -0800

    Track stack metrics within failfast (#891)
    
    Our stack metrics are generally applied outside of failfast modules
    so we have no insight into how long services are actually stuck in
    pending.
    
    This PR addresses this as follows:
    
    1. The stack metrics `Service` impl no longer implements `Clone`. It
       doesn't really make sense to track idleness across clones. Stacks
       that require clone are no longer tracked by metrics.
    2. `poll_total_ms` is now updated on each pending poll so that we need
       not wait until a state change to update the value; and
    3. All applicable uses of failfast have been updated to include stack
       metrics. This gives us a better sense of the behavior of buffered
       services.

commit e41f7bf10139f74d3cb40337341c2d16fd9b2383
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 1 08:28:52 2021 -0800

    stack: Make the router fallible (#888)
    
    The `Router` service looks at each request to produce a routing key; but
    it may not always be possible to satisfy a key for al requests. In these
    cases, we currently need to encode the error case into the key type and
    fail request on its inner stack. This is needlessly cumbersome.
    
    This change modifies the `router::RecognizeRoute` trait to return a
    `Result` so that requests can be failed eagerly by the router.

commit a3d5b80737efbe3b462014d851e98d480a0ab6e0
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 1 08:20:14 2021 -0800

    Update crate dependencies (#892)
    
    * Picks up tokio v1.1.1 which fixes a potential memory leak tokio-rs/tokio#3477
    * Updates `log` to remove an outdated dependency on `cfg-if`

commit 65afd0f69671397300cfc5a9d2029d360ae32b5c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 1 08:07:57 2021 -0800

    Update http::Insert to use `Param` (#889)
    
    The `http::insert` module provides a utility to insert the target value
    into each request's HTTP extensions. But it's not always desirable to
    insert the entire target. We may want only insert a single parameter
    from the target.
    
    This change replaces the `insert::target` module with an
    `insert::NewInsert` type that uses `Param` to extract a value from the
    target.
    
    In doing this, I also noticed that 58c78596 changed the extension type
    needed by tap::Inspect. This change fixes this and sets up further
    improvements to use narrower-scoped param types so that this can't break
    as easily moving forward.

commit 3995dc82af8bfc0bb5ec260ca3fdd5903c2a7536
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sun Jan 31 10:18:18 2021 -0800

    opencensus: rewrite span exporter using async/await (#789)
    
    This branch rewrites the `linkerd_opencensus` crate's `SpanExporter` to
    use async/await rather than a manual `Future` implementation.
    
    The new code is a bit clearer and easier to read, and may also be
    slightly more efficient, since it can use Tokio 1.0's `mpsc` without
    allocating to poll. Additionally, the new code adds a timer after which
    any batched spans are flushed, thanks to @olix0r.

commit 58c785962c227e2db58e581cab972138c2e25a00
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 29 14:58:22 2021 -0800

    http: Parameterize the HTTP server (#887)
    
    The HTTP server requires that targets are in the form `(Version, T)`.
    This is inflexible, though.
    
    This change updates the HTTP server to instead require that targets
    satisfy `Param<Version>` so that tuple types are not required. This
    requires the introduction of a new HttpAccept type in the inbound proxy.

commit 1f70655d626272638662cddbf5e94bac7e194c30
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 29 07:19:04 2021 -0800

    http: Parameterize normalize_ur::DefaultAuthority (#886)
    
    The NormalizeUri module needs is configured with a fallback authority in
    case we're dealing with poorly-formed HTTP requests (i.e., HTTP/1.0).
    Currently, the module is parameterized on a `SocketAddr`, because on the
    outbound side this makes sense as a default value. But on the inbound
    side, especially in a gateway configuration, it doesn't make sense to
    support a default value. It's better to just fail the request early.
    
    This change updates the NormalizeUri type to require its targets to be
    parameterized on a DefaultAuthority type. This type provides an
    _optional_ `http::uri::Authority` so the target may provide a named
    value (i.e., from a service profile response) when appropriate. It will
    also enable us to omit a default when appropriate.

commit 9b61f65dd9f09006ccdc58a8f95f724d068a684f
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 28 17:49:41 2021 -0800

    actions: Update actions to use full SHAs (#885)
    
    GitHub is deprecating short shas in GitHub actions.
    
    This change updates our actions to use full SHAs. It also updates
    actions/checkout to v2.

commit 55e6b69130e92aa07d2042741320430c7513284d
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 28 07:14:29 2021 -0800

    Use transport header protocol hint for HTTP gateway (#883)
    
    122d263d introduced session protocol hints to the transport header, but
    the inbound direct stack was not updated to use this hint when deciding
    whether to pass connections to the TCP gateway.
    
    This change:
    
    1. Updates the inbound direct stack to use the header-provided hint so
       that, when set, HTTP detection can simply be skipped -- the value is
       used to inform the HTTP server directly.
    2. The outbound proxy could incorrectly set the protocol hint to the
       original protocol, ignoring HTTP/2 upgrade hinting. This has been
       fixed.
    
    These changes have been tested against Linkerd2's multicluster
    integration tests.

commit 5fe39a1545ce4d8b107ac20b6b8bf614cb43804b
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 28 06:34:16 2021 -0800

    metrics: Report build_info metric last (#882)
    
    When spot-checking proxy metrics, it's extraordinarily helpful to be
    able to spot-check the proxy's build info by having it be the last line
    in the metrics output. #787 introduced identity metrics, appending them
    to the end of the report.
    
    This change moves identity metrics to the start of the metrics dump so
    that build_info remains the final metric emitted.

commit 2a645b7244793d7e71e937c0516280bc0c4d8bf0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 27 16:00:17 2021 -0800

    inbound: normalize URIs after downgrading to HTTP/1 (#881)
    
    Somewhere between stable-2.8.1 and stable-2.9.0, we introduced a bug
    when downgrading HTTP/1 traffic that originated in origin form. See
    linkerd/linkerd2#5298 for details.
    
    Hyper's `Client` type requires all URIs to be in absolute form when
    constructing the request, because the URI is used as a key for the
    connection pool and to discover connect targets, but will write the
    request out on the wire in origin-form unless explicitly configured not
    to. Therefore, we normalize all HTTP/1 URIs to absolute-form before
    handing them over to Hyper's `Client`, but only configure it to actually
    send the request in absolute form if the request was received in
    absolute-form. The `NormalizeUri` layer performs the absolute form
    normalization and sets a request extension of the request was in
    absolute-form originally.
    
    The bug is that, when an orig-proto downgrade request is received in
    origin form, it no longer gets normalized. It turns out that this is
    because the `NormalizeUri` layer is in the inbound stack _above_ the
    `orig_proto::Downgrade` layer --- so the request is still HTTP/2 when it
    hits `NormalizeUri`, and is therefore not normalized.
    
    This branch fixes the issue by separating the normalization from setting
    the `WasAbsoluteForm` request extension, and moving the `NormalizeUri`
    layer _after_ downgrade. The request extension is now set by a new
    `DetectAbsoluteForm` layer.
    
    I've also added new stack tests for inbound orig-proto requests in both
    absolute- and origin-form. The origin-form test would have found the
    issue, since it hits a debug assertion that requests are in
    absolute-form, which none of the existing tests hit. Also, since inbound
    didn't previously add any stack tests, I also added a simple unmeshed
    http1 hello world test as well. This was mainly added as part of the
    process for writing other stack tests: I wanted to have a working basic
    request test before trying to write a test to reproduce the specific
    issue.
    
    Finally, I generalized a bunch of the utilities that were written for
    the outbound stack tests so that they can also be used in inbound.
    
    Fixes linkerd/linkerd2#5298.

commit 381260aca22c383453308ee5287d51bc3938a824
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 27 14:45:03 2021 -0800

    stack: Replace switch with Filter and NewEither (#880)
    
    When switching between stacks based on target values, we frequently want
    to alter the target type so that the primary and secondary stacks may be
    parameterized on different target types. This is the case with the
    `unwrap_or` stack helper, for instance.
    
    This change removes the `Switch` trait and module, replacing uses with a
    mix of `Fitler`, which modifies target types, and a new `NewEither` helper,
    which takes `Either`-typed targets.
    
    This change renames `NewUnwrapOr` as `UnwrapOr` and simplifies its
    implementation to use `Filter` and `NewEither`
    
    This change also removes various unused `MakeService` implementations.

commit 616917f46d5111417813e3d722a0b703c956a894
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 27 10:05:49 2021 -0800

    profiles: Use a LogicalAddr param type (#878)
    
    The profiles stack expects targets to satisfy `Param<Addr>`, which is
    ambiguous. This change introduces a `profiles::LogicalAddr` type and
    updates the target types to provide `Param<profiles::LogicalAddr>`.

commit 980f8154881a91acc6154644fe49a41d3a29ffcd
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 27 10:00:20 2021 -0800

    transport: Add a ConnectAddr parameter type (#879)
    
    The `connect` module currently depends on a `SocketAddr` parameter, but
    `SocketAddr` is domain agnostic (i.e., it can refer to source addresses,
    local addresses, or target addresses).
    
    This change introduces a `ConnectAddr` type to make target
    implementations clearer.

commit 122d263dc0f2e7e3f10aa0de12ce7d53078cb5cd
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 26 11:33:40 2021 -0800

    transport-header: Encode session protocol (#877)
    
    In order to transport both opaque and non-opaque protocols with the
    transport header, especially for multicluster gateways, the inbound
    proxy needs to be able to discover whether the session protocol is known
    by the client.
    
    This change adds a field and enum type to the transport header protobuf
    message and wires it through so the outbound proxy parameterizes its
    target type on the session protocol.a
    
    Inbound handling of this field is not yet implemented and will be added
    in a followup change.

commit 9394aa6fee315d43b9292090af6dce90cccfa184
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 26 10:54:21 2021 -0800

    stack: Introduce the Param trait (#876)
    
    When configuring a stack module, we are usually generic over the target
    type, yet we need static assurances about the target's ability to
    produce configuration values. Our current approach is to use awkward
    type constraints like:
    
        for<'t> &'t T: Into<Config>
    
    which is invoked as:
    
        (&target).into()
    
    This is cumbersome and doesn't clearly express intent, especially in
    implementations.
    
    This change formalizes this pattern under a dedicated trait,
    `stack::Param`. Stack modules are updated to express constraints like:
    
        T: Param<Config>
    
    and is invoked as:
    
        target.param()
    
    This change includes one minor change in functionality: the identity
    client's TLS configuration is now obtained the module's `LocalCrtKey`
    instead of its `TrustAnchors`. When using `TrustAnchors`, the client
    would never initiate a client-authentcated mTLS session to the identity
    service. When using the `LocalCrtKey`, the local identity may be used to
    establish mTLS sessions when refreshing existing certificates.

commit 607cfea249216fabd549cfeabd5a565af028f172
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 25 17:48:35 2021 -0800

    Use TLS ALPN to negotiate transport header support (#874)
    
    An outbound proxy may not always know a priori whether a destination
    supports transport headers. This is especially the case when
    communicating with remote multi-cluster gateways, where the target
    cluster may not be running a compatible proxy version. We can detect
    this at runtime by using TLS's Application-Layer Protocol Negotiation
    (ALPN) to determine whether the target proxy supports transport headers.
    
    To accomplish this:
    
    1. The inbound direct stack is modified to add ALPN configuration when
       accepting direct traffic. No ALPN is advertised when accepting
       connections on ports other than the proxy's inbound port.
    2. The TLS server includes the negotiated protocol in the `ServerTls`
       stack target.
    3. The TLS client's target type is modified to include an optional list
       of ALPN protocols. When this is configured by the stack target, the
       client modifies its TLS configuration to include these ALPN
       protocols.
    4. The `tls::HasNegotiatedProtocol` trait is introduced and implemented
       for our IO types. This enables stack modules to inspect a
       connection for an ALPN-negotiated protocol. This will only be set
       when both the client and server include common protocol
       advertisements.
    5. The outbound `Endpoint` type is modified to advertise support for
       transport headers when an opaque hint is provided OR an authority
       override is set (i.e., for gateways).
    6. The outbound `OpaqueTransport` module is modified to account for
       authority overrides when constructing a `TransportHeader`; and it
       uses the connection's negotiated protocol to determine whether a
       header should be written. This modules tests have been updated to
       exercise mocked ALPN discovery.
    
    This has been tested with server-first protocols. Inbound gateway
    support has not yet been implemented and will follow this change.

commit b8c2aa7168d93eda3ea5f2e3b7fc6a9910cf0c4f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 25 14:46:11 2021 -0800

    Improve diagnostics around the SwitchReady module (#875)
    
    The `SpawnReady` module is used by the inbound stack to short-circuit
    the profile stack when resolutions are not forthcoming (i.e. because the
    destination service is unavailable).
    
    This changes the module as follows:
    
    - Logs about important state transitions are now emitted at DEBUG
      instead of TRACE;
    - The poll_ready function has been restructured for clarity, including
      additional comments;
    - When an error is encountered while waiting, the state transitions back
      to primary. Errors are always terminal for `poll_ready`;
    - The module's tests have been updated to use `time:pause`;
    - The error-propagation test has been split into two tests because it's
      not appropriate to continue polling the service after an error; and
    - Finally, the inbound HTTP logical stack has been modified so that the
      both the primary and secondary services are instrumented with
      `SpawnReady`, so that each service may be driven to readiness
      independently.

commit 3cc419cfc427bdc396b7527f8b4acc5482450484
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 25 13:23:08 2021 -0800

    inbound: Split stack into modules (#872)
    
    * inbound: Decouple HTTP server from router
    
    This change moves the RequestTarget router from the http_server stack to
    the http_router and direct stacks.
    
    This sets up decoupling the target types for these stacks, as both
    stacks should share HTTP server logic but may route requests
    differently.
    
    * inbound: Extract stacks into a separate files
    
    This change creates new inbound::http and inbound::direct modules that
    handle stack constructions.
    
    No functional change.

commit 1b4f8d1969c8ec9b3e0aea9eca18cc5b3a76df35
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 25 11:31:45 2021 -0800

    test: Disable tracing-subscriber by default (#873)
    
    When running tests, we encounter panics like:
    
    ```
    tcache_thread_shutdown(): unaligned tcache chunk detected
    ```
    
    Disabling tracing-subscriber eliminates these panics. This change
    disables the tracing subscriber for these tests until the underlying
    issue is resolved.

commit 124141af9bd621a38f6d6848038658dc6041d051
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sat Jan 23 12:36:57 2021 -0800

    admin: Record transport & HTTP metrics (#871)
    
    This PR adds HTTP request/response, transport, and stack metrics for the
    admin server to the proxy's inbound metrics. The `target_addr` labels
    added in #861 and #866 disambiguate these metrics from other inbound
    metrics.

commit ef695ea39f09bb2925b7e059ad31f4a6eb7c08e2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 22 19:22:20 2021 -0800

    tls: Report SNI values for non-Linkerd TLS (#869)
    
    The proxy's TLS server parses the SNI value for all TLS connections.
    This value is immediately discarded; but it's valuable information we
    may want to repor to users.
    
    This change modifies the TLS server to extract non-local SNI values and
    pass them to the server as a stack parameter. This value is now exposed
    as a metric & tap label, paired with a `tls="passthru"` label.
    
    This change sets up extracing additional information on the TLS server
    like ALPN values.

commit f12988b773796b4fe46f5554bf5c2ad4b28f7f9b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jan 22 15:51:12 2021 -0800

    admin: stackify admin server (#868)
    
    This branch refactors the proxy admin endpoint to build a server stack
    using the same primitives used for the proxy servers. This is intended
    primarily to allow us to easily add metrics to the admin server by just
    slotting in the existing proxy metrics layers.
    
    This change also has some side benefits:
    
    * We now reuse more existing code for building the admin server, rather
      than writing separate versions of our accept & serve HTTP code
      specifically for admin,
    * We now support HTTP/2 for the admin server :)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1a5a205ce116d67b22eeb740ce1157913e09ed14
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 22 15:50:49 2021 -0800

    Update tokio to v1.1.0 (#870)
    
    https://github.com/tokio-rs/tokio/releases/tag/tokio-1.1.0

commit 88015a95f87774a6918858bd0cc02c2a50884c1f
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 22 09:34:28 2021 -0800

    inbound: Avoid HTTP detection when a transport header is present (#867)
    
    In 1a7de34a, the inbound proxy was updated to hold a unified `direct`
    stack; but in this change we started doing HTTP protocol detection even
    when a transport header is present. But, currently, the existence of a
    transport header indicates that the connection is likely opaque and so
    such protocol detection must not be performed.
    
    This change updates the direct stack to avoid HTTP detection when a
    transport header is present.

commit 1a7de34ae44e04ce3acc32d10c54ee3032b8e0a3
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 21 15:01:12 2021 -0800

    inbound: Handle direct connections with a dedicated stack (#863)
    
    Currently, the inbound proxy handles direct connections--connections
    where the original destination is the inbound proxy port--in two places.
    TCP forwarding is handled distinctly from HTTP forwarding (for
    gateways).
    
    This change modifies the inbound proxy to dispatch these connections to
    a dedicated `direct` stack that does its own protocol detection and
    routing.
    
    This sets up to (1) modify the server to configure ALPN on only these
    connections and (2) support transport-header-based gateway routing.

commit df48ca46321bbeb6eba974b6e65c1958ec2260d2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 21 14:09:30 2021 -0800

    metrics: add `target_addr` labels to HTTP metrics (#866)
    
    This branch builds on #861 and adds `target_addr` labels to HTTP metrics
    as well as transport metrics. These labels contain a string
    representation of the original destination address of the connection on
    which that request was sent.
    
    Additionally, I've made some more improvements to the metrics tests:
    after the test code failed to catch a missing commma in labels, I
    changed the metrics matching code to check that the metric is correctly
    formatted, as well as containing the expected labels and values.
    Furthermore, after rebasing onto `main` made some labels in tests added
    in this PR incorrect, I modified the tests so that a majority of the
    expected labels are defined in a single place by the text fuxtures,
    since they don't actually differ between tests.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3db1728da15b20b81930ed2749acf2f3ddec64a7
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 20 15:20:10 2021 -0800

    outbound: Strip endpoint identity when disabled (#862)
    
    When the proxy's identity is disabled, we may still mark outbound
    endpoints as having a peer identity (even though a TLS connection is
    never established.
    
    This change modifies the outbound HTTP and TCP endpoint stacks to
    optionally strip server identities before metrics are recorded.

commit f388bc2bfc60ec26a376cf8c98e4538e95de2ef5
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 20 13:50:05 2021 -0800

    metrics: add `target_addr` label for accepted transport metrics (#861)
    
    This branch adds a `target_addr` label to the Prometheus metrics
    generated for accepted (`peer="src"`) connections, containing the
    original destination address of the accepted connection.
    
    When we add the proxy's admin listener to the inbound metrics,
    this will allow distinguishing between admin and inbound proxy
    traffic. Additionally, it allows partitioning transport metrics by
    the client's target address.

commit 253756060df2de08174535151e74b52f2c29f69a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 20 13:32:27 2021 -0800

    Update cargo dependencies (#865)
    
    Eliminates several duplicate dependencies.

commit fc9d9d0241109b7551f1f231bdb6ef5d4880e1bb
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 20 13:27:26 2021 -0800

    Update to tower v0.4.4 (#864)
    
    This release reduces the cost of using `SpawnReady` by eliminating
    unnecessary allocations.

commit 0d6471c46e50aad7afdf509b4ecac080c53e56d5
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 20 11:22:48 2021 -0800

    tls: Disambiguate client and server identities (#855)
    
    The `tls::PeerIdentity` type is used to describe both remote clients and
    servers. This can easily lead to confusion, as it can be ambiguous as to
    whether an identity is a client's identity or a target server's
    identity.
    
    This change introduces new marker types:
    
    - `identity::LocalId`: The local proxy's ID;
    - `tls::server::ClientId`: A remote client ID; and
    - `tls::client::ServerId`: A target server ID.
    
    Furthermore, the `tls::ReasonForNoPeerName` has been split into distinct
    `tls::server::NoClientId` and `tls::client::NoServerId` types. This
    change eliminates the `tls::HasPeerIdentity` and `tls::{client,
    server}::HasConfig` types, in favor of simple `Into` coercions.
    
    This change requires changes to the metric labeling.

commit 3541f76b418fc46fc0ff9249e8a93048a22f0ff2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jan 19 17:18:59 2021 -0800

    test: reduce repetition in metrics tests (#860)
    
    
    Currently, the metrics tests have a bunch of code that's repeated
    between tests in the inbound and outbound directions. This makes
    modifying the tests much more painful, since the code needs to be
    changed multiple times. Also, the file is hard to navigate.
    
    This commit changes this by factoring out the shared code into functions
    which are called by the differing code (e.g. metrics labels) as
    parameters. This means that the common behavior is only defined once, so
    it should be somewhat easier to edit. This has a significant advantage
    over the approach we use elsewhere, where similar tests are generated by
    macros: it doesn't mess up the compiler diagnostics for errors in the
    tests. We may want to refactor other tests to use a similar style in the
    future.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1e98a5b15b8d7a0832e8f699d001bf2f7bfa6be1
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 19 14:31:45 2021 -0800

    Annotate socket-level errors with a scope (#852)
    
    We frequently encounter socket errors like:
    
        Connection closed error=Transport endpoint is not connected (os error 107)
    
    While the handler is generally scoped with tracing context to tell us
    information about the server-side connection, we lack information about
    which socket actually failed. For every "logical" TCP stream, we
    generally have two concrete connections: One on the server-side of the
    proxy and another on the client-side.
    
    This change introduces a new `io::ScopedIo` wrapper type that annotates
    all I/O error messages with a `client` or `server` prefix. Then, the
    proxy's clients and servers are wrapped with this type so that all
    socket-level error messages are disambiguated.

commit adaa67eb4f756a90a88d054fb493ac7b0faed59f
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 19 14:01:16 2021 -0800

    Rename tls::accept to tls::server (#854)
    
    This change clarifies the `tls::accept` module name as `tls::server`.

commit e6a1ee7e53b302f39bfe0067167ad79cff7bcb72
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 19 14:00:06 2021 -0800

    metrics: Reorder metrics labels (#856)
    
    This is a superficial change that moves the `direction` label before the
    `authority` label on HTTP endpoint metrics.

commit bae93ef3726c4f1a8c62fe9646cc8aaa1a87efe9
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 19 13:28:28 2021 -0800

    metrics: Handle NoPeerIdFromRemote properly (#857)
    
    When the server terminates a TLS connection on which there is no client
    ID (for instance, when the identity service gets a proxy's first
    identity request), the `tls` label is not set to _true_.
    
    This change explicitly handles this case, reporting an empty `client_id`
    label.

commit f5f25d69818f5762aabfb86a737e26748edcf532
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 19 13:27:51 2021 -0800

    Decouple tls::accept from TcpStream (#853)
    
    `tls::accept` has a `Detectable` trait which allows TLS detection to use
    `TcpStream::peek`; but this is inflexible if we want to wrap `TcpStream`
    with any additional behavior and it limits our ability to write tests
    for this module.
    
    This change introduces a new `io::Peek` trait to model
    `TcpStream::peek` and removes the `tls::accept::Detectable` trait.

commit ac6e5b2339f2f9b54dca247b644cf13d13fda8b9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jan 19 11:34:30 2021 -0800

    tests: replace string matching on metrics with parsing (#859)
    
    This branch changes the metrics integration tests so that we no longer
    make assertions about metrics by searching the entire metrics scrape for
    a specific string. Instead, we now have a simple builder API for
    constructing a type that tries to parse the metrics scrape to find
    individual metrics with certain label combinations and/or values.
    
    Advantages of the new approach include:
    - it's not ordering dependent --- changing the label ordering doesn't
      change whether or not the match succeeds. for example, changes
      like #856 won't break the tests.
    - the presence of *additional* labels doesn't break the assertions
      (although we may want to add an "exact" matching mode in case we
      *do* want to assert that other labels are not present).
    - metrics can easily be matched with and without values
    - the failure reporting is *much* better. when the scrape doesn't
      contain the required metric, we can now report the metric we wanted
      in a nicely formatted way, and show only a list of the "similar"
      metrics that were found. with the previous code, panics included the
      entire metrics scrape, which was very hard to read and debug.
    
    This should make it much easier to modify the tests to add new metric
    labels or add existing ones, since we no longer depend on specific
    hard-coded strings, but are instead making assertions about the
    properties we actually want to find.
    
    Example of the new errors:
    
    ```
    thread 'tests::telemetry::response_classification::inbound_http' panicked at 'did not find a `response_total` metric
      with labels: ["authority=\"tele.test.svc.cluster.local\"", "direction=\"inbound\"", "tls=\"disabled\"", "status_code=\"200 OK\"", "classification=\"success\""]
    found metrics: [
        "response_total{authority=\"tele.test.svc.cluster.local\",direction=\"inbound\",tls=\"disabled\",status_code=\"200\",classification=\"success\"} 1",
        "response_total{authority=\"tele.test.svc.cluster.local\",direction=\"inbound\",tls=\"disabled\",status_code=\"304\",classification=\"success\"} 1",
    ]
      retried 5 times (73.314652ms)', linkerd/app/integration/src/metrics.rs:128:51
    stack backtrace:
        ... snip ...
    ```
    
    These *could* probably be improved even more, for example, by
    highlighting the specific label that was missing. However, this felt
    like a pretty significant improvement for a first pass.
    
    In a follow-up, I'll also reduce some of the code duplication between
    the tests that are repeated for inbound and outbound. While working
    on this change, I found that modifying the tests was much harder since
    almost all of them were duplicated on the inbound and outbound halves
    of the proxy. I'll merge that in a separate PR to reduce the size of
    this diff, though.

commit a5c06f2ce5e7d9774671546d834c6933e910c989
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 19 10:19:56 2021 -0800

    Ensure services in failfast can become ready (#858)
    
    When a Service is in failfast, the inner service is only polled as new
    requests are processed. This means it's theoretically possible for
    certain service tasks to be starved.
    
    This change ensures that these layers are paired with a `SpawnReady`
    layer to ensure that the inner service is always driven to readiness.
    
    This could potentially explain behavior as described in
    linkerd/linkerd2#5183; though we don't have strong evidence to support
    that. This seems like a healthy defensive measure, in any case.
    
    This change also improves stack commentary to favor larger descriptive
    comments over layer-level annotations.
    
    While auditing services for readiness, an unnecessary buffer has been
    removed from the ingress HTTP stack.
    
    Finally, this change updates the inbound connect timeout to 300ms to
    accommodate especially slow endpoints.

commit 2910a611386c3d38b2766ab903a164b56e51d60f
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Jan 17 09:14:48 2021 -0800

    stack: Implement Clone for ResultService (#851)
    
    `stack::ResultService` cannot implement `Clone` because it holds an
    error type. This error is always coerced to `Error`, so its type is
    unimportant.
    
    This change wraps the service's error type in an `Arc` (instead of an
    `Option`) so that `ResultService` can safely be cloned.

commit c3c01689185e8b67b0df96fa583fd75a00e40368
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 15 15:48:37 2021 -0800

    Update the base docker image (#850)
    
    This change updates the base docker image to use
    ghcr.io/linkerd/proxy:edge-21.1.2. This removes a dependency on the old
    gcr.io repository.

commit 79c95af82ace6997caf4ff20ddaee9b3ebe66e15
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 15 13:59:56 2021 -0800

    failfast: Improve diagnostic logging (#848)
    
    Failfast errors can be difficult to track down. This change updates the
    failfast module to emit more descriptive log messages. A `WARN`-level
    message is emitted when a service enters failfast.

commit 8a22c387cc317641789f1b214ce732116a27ccd7
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 15 13:25:34 2021 -0800

    Update tonic to v0.4 (#849)
    
    Updates the proxy-api version to a tagged release.

commit 8e036476f7dbb55b65bc8f41b3cac33dac64f3b0
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 15 13:25:07 2021 -0800

    Correct gRPC 'max-concurrency exhausted' error messages (#847)
    
    When the proxy hits a fail-fast error when proxying gRPC messages, it
    reports 'max-concurrency exhausted' in the `grpc-message` response
    header. This is because failfast was introduced to bound the time a
    service may be at-concurrency; but now failfast is used everywhere a
    request may be buffered to bound the time a request can stay in the
    proxy: if a buffered service fails to become ready within a timeout, the
    service goes into 'fail-fast' so that requests are failed eagerly until
    the service is ready.
    
    Recently, we've improved failfast errors to indicate which failfast is
    being triggered. This change replaces the _max-concurrency exhausted_
    `grpc-message` with this more-descriptive error message.

commit f90f58e9075580447104bb8212ca84f5f68bb1b2
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 14 15:31:53 2021 -0800

    inbound: Separate HTTP server logic from protocol detection (#843)
    
    In order to set up for a TCP gateway implementation, this change
    decouples HTTP protocol detection (and TCP fallback) from the HTTP
    server stack.
    
    In doing so, this change restructures the inbound builder helpers (and
    renames them).

commit 5eaab9fa2f2fb0d6cf77572220410627838f3900
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 14 11:59:36 2021 -0800

    service-profiles: Prevent Duration coercion panics (#844)
    
    When an invalid duration is provided by the control plane, retry budget
    conversion can panic. This error is triggered by quickcheck tests.
    
    This change explicitly handles these negative values to avoid panicking.

commit 675cd0529bc1d84979de4433bcb580c13dea86e2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 14 11:51:12 2021 -0800

    integration: improve tracing in tests (#846)
    
    In stack tests, we set a fairly verbose `tracing` filter, since the logs
    are captured by libtest and only printed if a test fails or when the
    `--show-output` flag is passed. However, in integration tests, we
    disable most tracing, because earlier versions of Rust did not support
    output capturing for spawned threads, and the integration tests run the
    proxy in a separate thread (see #771).
    
    Now that we're on Rust 1.49, however, libtest now supports output
    capturing for spawned threads, so this PR changes the integration tests
    to enable more verbose logging. This should help with debugging test
    failures.
    
    I made a few other minor improvements to tracing in tests. In
    particular:
    * Share the *same* tracing subscriber between the test thread and the
      test proxy. This should resolve the issue where logs from the proxy
      in an integration test and logs from the test code have timestamps
      that are relative to different start times, making the logs appear
      to time travel.
    * Replace some `println!`s with tracing events.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a209634b29087c108bee61dd3a79c4994a281603
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 14 11:49:13 2021 -0800

    replace `FutureService` with Tower's upstream impl (#839)
    
    Tower 0.4 included a `FutureService` type which is basically identical
    to the version we implemented for converting a `MakeService` into a
    `NewService`. This branch replaces our implementation with the upstream
    implementation from Tower.
    
    It was necessary to add `MapErr` layers to convert the error types into
    boxed errors, since our `FutureService` did that automatically, while
    Tower's does not.

commit c39f51d08447fb551fbf81e522fb9393f4d6ef50
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 14 10:08:55 2021 -0800

    tracing: fix incorrect field format when logging in JSON (#845)
    
    When configuring the `tracing` subscriber to emit JSON logs, we're
    currently configuring it to use a JSON _event_ formatter, but not a
    JSON _field_ formatter. This means that span and event fields are
    formatted with the default field format, `key=val`, which is not valid
    JSON. This results in parse errors when logging events in a span with
    fields, and we format those fields as an error message instead. See
    linkerd/linkerd2#5520.
    
    Typically, the simplest way to configure a JSON `fmt` layer is to use
    the `.json()` method. This sets both the event formatter *and* the field
    formatter to emit JSON. However, since we are sharing some event
    formatter configuration across the JSON and plaintext logging modes, the
    proxy doesn't use this method; instead, it sets the JSON mode on the
    event formatter which has already been configured with the shared
    configuration, and sets it as the layer's event formatter *without* also
    setting the field format, so we continue using the default field format.
    
    This branch updates the proxy's tracing initialization code to also set
    the field format to JSON when the JSON logging mode is enabled. I've
    also added some comments to the JSON formatter configuration so we don't
    mess this up in the future.
    
    Before this change, trying to run the tests with the JSON log format
    gets a panic (malformed fields cause the JSON formatter to panic in
    debug mode, but it skips those fields in release mode so that it doesn't
    crash the app). For example:
    
    ```console
    $ LINKERD2_PROXY_LOG=linkerd=debug LINKERD2_PROXY_LOG_FORMAT=json cargo test -p linkerd-app-integration -- transparency::inbound_http1 --test-threads=1 --nocapture
        Finished test [unoptimized] target(s) in 0.10s
         Running target/debug/deps/linkerd_app_integration-d798ce4657a07303
    
    running 1 test
    test tests::transparency::inbound_http1 ... thread 'main' panicked at 'span 'test_server' had malformed fields! this is a bug.
      error: expected value at line 1 column 1
      fields: FormattedFields { fields: "version=Http1 addr=127.0.0.1:58307 test=main" }', /home/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/tracing-subscriber-0.2.15/src/fmt/format/json.rs:162:49
    stack backtrace:
        # ... snip ...
    ```
    
    Now, the tests correctly output well-formed JSON:
    
    ```console
    $ LINKERD2_PROXY_LOG=debug LINKERD2_PROXY_LOG_FORMAT=json cargo test -p linkerd-app-integration -- transparency::inbound_http1 --test-threads=1 --nocapture
        Finished test [unoptimized] target(s) in 0.11s
         Running target/debug/deps/linkerd_app_integration-d798ce4657a07303
    
    running 1 test
    test tests::transparency::inbound_http1 ... {"timestamp":"Jan 14 09:20:34.499","level":"INFO","fields":{"message":"support server running"},"target":"linkerd_app_integration::server","spans":[{"addr":"127.0.0.1:55561","test":"main","version":"Http1","name":"test_server"}]}
    {"timestamp":"Jan 14 09:20:34.499","level":"INFO","fields":{"message":"listening!"},"target":"linkerd_app_integration::server","spans":[{"addr":"127.0.0.1:55561","test":"main","version":"Http1","name":"test_server"}]}
    Http1 server running; addr=127.0.0.1:55561
    support destination service listening; addr=127.0.0.1:51487
    {"timestamp":"Jan 14 09:20:34.501","level":"DEBUG","fields":{"message":"building app"},"target":"linkerd_app","spans":[{"test":"main:proxy","name":"proxy"}]}
    {"timestamp":"Jan 14 09:20:34.502","level":"DEBUG","fields":{"message":"spawning daemon thread"},"target":"linkerd_app","spans":[{"test":"main:proxy","name":"proxy"}]}
    proxy running; tap=, identity=None, inbound=127.0.0.1:33045 (SO_ORIGINAL_DST=10.1.2.3:55561), outbound=127.0.0.1:45721, metrics=127.0.0.1:45373
    {"timestamp":"Jan 14 09:20:34.502","level":"INFO","fields":{"listen.addr":"127.0.0.1:45721","ingress_mode":false},"target":"linkerd_app","spans":[{"test":"main:proxy","name":"proxy"},{"name":"outbound"}]}
        # ... snip ...
    ```

commit bfe233baf32b868c298464ce1292862c8ef54f90
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 14 08:12:36 2021 -0800

    replace `RequestFilter` with Tower's upstream impl (#842)
    
    Tower provides a `tower::filter` utility for conditionally rejecting
    some requests and accepting others. Rather than using `tower`'s filter,
    we have a similar `linkerd_stack::request_filter`, due to two main
    issues with the filtering API in tower 0.3 and earlier:
    
    * `tower::filter`'s predicates returned futures, which we don't need
      --- all our filtering predicates are purely sunchronous
    * `tower::filter` didn't allow filters to return any error of their
      choosing --- they had to return a specific filter-rejected error.
      This doesn't work with other code where we downcast error types,
      like switch/fallback.
    
    However, Tower 0.4 includes a rewritten `Filter` API that no longer
    has these issues (tower-rs/tower#508). Therefore, we can switch to
    using the upstream implementation. This branch replaces `RequestFilter`
    with `tower::filter::Filter`.
    
    It was necessary to add an impl of `NewService` for `Filter`. This
    required an upstream change to expose access to the wrapped service,
    so that its `new_service` method can be called when it's a
    `NewService`, and to expose access to the `Predicate`. Therefore, this
    PR depends on tower-rs/tower#521 and tower-rs/tower#522, and introduces
    a Git dependency. The git dep can be removed when Tower 0.4.3 is
    released.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit ec9d063b22bf41b1379d6a8381c81c60a379efd3
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 13 11:25:40 2021 -0800

    stack: remove `map_response` (#835)
    
    The `linkerd::stack::map_response` middleware is currently unused, and
    an implementation of a similar middleware was added to `tower::util` in
    tower 0.4. Therefore, we can just remove this --- if we need it again,
    we can just use the upstream version.

commit 0ddf3afb9a811a841b8ce1fd6cd487e1eecdaa10
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 13 09:00:22 2021 -0800

    Split linkerd-detect from linkerd-proxy-transport (#841)
    
    The `linkerd2_proxy_transport::detect` module has no dependencies on
    other transport code.
    
    This chagne simplifies dependencies by moving the protocol detection
    infrastructure to a dedicated crate. We also provide a
    `NewDetectService::timeout` helper to reduce boilerplate in stack
    constructors.

commit 047634880eca610c7b372cc5c2a93ca18a9ca6fb
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Wed Jan 13 11:50:58 2021 -0500

    Remove tap status being explicitly set in config (#838)
    
    This is required as part of linkerd/linkerd2#5326 because the tap env variables
    will no longer always be set.
    
    There is a dependency on identity being enabled for tap to work. The
    status of tap is determined by the `ENV_TAP_SVC_NAME` env variable being set
    or not set.
    
    - If identity is disabled, tap is disabled, but a warning is issued if
      `ENV_TAP_SVC_NAME` is set.
    - If identity is enabled, the status of tap is determined by
      `ENV_TAP_SVC_NAME`.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 2ec0b3667fd4cb47b57aec5116c7da356eb2a79e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 13 08:16:30 2021 -0800

    stack: use `LayerFn` from upstream (#840)
    
    Tower 0.4 now has a `layer_fn` utility, obviating the need for our _sui
    generis_ `layer::mk`.

commit 1df685694bb1ad1bd89c1d6b735db79f68f5b836
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 12 14:13:38 2021 -0800

    Split linkerd-tls from linkerd-proxy-transport (#837)
    
    The `linkerd-proxy-transport` crate has too many concerns. This change
    splits out the tls module into a dedicated crate, decoupled from the
    transport types.
    
    Additionally, the transport crate no longer re-exports the `linkerd-io`
    crate.
    
    The linkerd-proxy-transport crate has a lingering dependency on
    linkerd-tls for metric labels. This will be addressed in a followup
    change.
    
    This change sets up additional simplification of the TLS infrastructure
    to support ALPN.

commit 1f0b9681e1bbcf33574174ef5bb6b2ad87fa7f23
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 12 09:47:57 2021 -0800

    Represent local identity as an Option (#836)
    
    There's only one reason we may lack a local identity: when it's
    explicitly disabled.
    
    This change decouples the local identity types from the
    `ReasonForNoPeerName` conditional, as local identity has nothing to do
    with peer names. We instead represent local identity as a simple
    `Option` type.

commit e0271b4ee4841ef86fcbdb34f86b0fe725c502e2
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 11 14:02:48 2021 -0800

    Rename crates to reflect directory structure (#834)
    
    This change renames most subcrates to be linkerd-* instead of
    linkerd2-*, matching the repository layout.
    
    The `linkerd2-proxy` and `linkerd2-proxy-api` crate names remain
    unchanged, as they reflect their respective repository names.

commit 53536ce1c35a09d819c428337cfbb6c8bd647088
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 11 12:59:30 2021 -0800

    Use cargo-deny to audit dependencies (#833)
    
    The cargo-deny utility provides a convenient way to audit the proxy's
    dependency tree to audit security vulnerabilities & licensing.
    Furthermore, it helps detect whether we have multiple versions of a
    given dependency.
    
    This change adds a `deny.toml` that configures the project to detect all
    such issues and it adds a CI task that can help prevent us from
    regressing.
    
    This change introduces a number of dependency updates to eliminate
    issues flagged by cargo-deny:
    
    * `futures` has been updated to v0.3.9 to fix safety issues;
    * `pin-project` has been updated to v1;
    * `regex` has been updated to v1;
    * `quickcheck` has been updated to v1, which caught minor issues in
      exp-backoff that have been fixed;
    
    Furthermore, this change updates our github actions to use more more
    recent versions of the base container image and updates actions/checkout
    to v2.

commit 3defe3d73beb50e36601d2c238b027c8f43dd9d5
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jan 11 12:05:35 2021 -0800

    update to Tokio 1.0 (#826)
    
    This branch updates the proxy to Tokio 1.0 and its ecosystem, including:
    
    - `tokio` 1.0 (obviously)
    - the `tokio` 1.0 versions of `tokio-test` and `tokio-util`
    - `bytes` 1.0
    - `tower` 0.4
    - `hyper` 0.14.2
    - `h2` 0.3
    - `tonic`, via git dependency
    - `prost` 0.7
    - `tokio-rustls` 0.22
    - `rustls` 0.19
    - `trust-dns-resolver` 0.20
    - `linkerd2-proxy-api`, via git dependency
    - `rand` 0.8
    
    For the most part, the change here is pretty straightforward, just
    updating the specified dependency versions. The API changes in `tokio`
    were mostly made in 0.3, so we have already tracked most of them.
    However, the following small changes were necessary:
    
    - Hyper now has feature flags that must be enabled.
    - `bytes` renamed `Buf::bytes` and `Buf::bytes_vectored` and
      `BufMut::bytes_mut` to `chunk`, `chunk_vectored`, and `chunk_mut`,
      respectively.
    - `tokio::sync::Semaphore` now has a `close` method, and `acquire`
      returns a `Result`. Updated `linkerd2-channel` to track this. This
      also allowed removing some kind of janky jury-rigged code for closing
      a semaphore.
    - The `tokio::Runtime::builder::max_threads` method was renamed to
      `max_blocking_threads`.
    
    There were also a couple of larger changes. In particular:
    
    - `tokio` no longer re-exports the `Stream` trait from `Futures`, for
      stability reasons. I added a wrapper API for implementing `Stream` for
      `mpsc`  receivers and for `tokio::time::Interval`.
    - `tokio::time::Sleep` is now `!Unpin`, since it no longer contains an
      internal heap allocation. This reduces heap overhead when used with
      async/await syntax. However, for manual `Future` and `tower::Service`
      impls, the `Box` must be added _outside_ the `Sleep` to preserve
      `Unpin`nedness. I've done this in all places where it was necessary. I
      also changed some `Service` impls (`failfast` and `switch_ready`) which
      repeatedly create new `Sleep` futures, to use `Sleep::reset` instead,
      allowing them to avoid reallocations.
    
      This also means that `tower`'s `Timeout` middleware's future is no
      longer `Unpin`. Since connect futures are required to be `Unpin`, and
      the connect stacks contain timeout layers, I added a new `BoxResponse`
      middleware layer for boxing *just* response futures, while preserving
      the type of the wrapped `Service` (so that connect stacks are still
      `Clone`).
    - Removed the `linkerd-app-profiling` crate, which has bit-rotted.
    
    The latest `tower` release also adds upstream implementations of a
    number of middlewares we've written our own versions of. As a follow-up,
    we probably want to replace some of this stuff with the upstream
    versions. However, I thought that we would probably want to do this in a
    separate PR, to minimize the size of this change.

commit ba87a155b3ef3e2c3e58e84c68ef2871b84130b9
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 11 09:10:44 2021 -0800

    Remove the unused app-profiling crate (#827)
    
    Specialized profiling utilities have been removed. This change removes
    the `linkerd2-app-profiling` helper crate, whichis now unused.

commit 840f8e7e6f3c90a23723767ef337a4d8b6bad840
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 11 08:26:07 2021 -0800

    Update ipnet to v2 (#830)
    
    We depend on both ipnet v1 and ipnet v2. This change updates all
    dependencies to v2.

commit 88f7867b8a6f4784ac815520936ab06326cba32a
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Jan 10 11:03:30 2021 -0800

    Remove dependency on tower-request-modifier (#829)
    
    tower-http is not actually production ready, and our git depenency now
    introduces outdated crate dependencies. This change replaces the use of
    tower-request-modifier with a simple one-off service.
    
    This ends up being a net reduction in code.

commit 51f5e23310f16a89342037754cb8e969e2e0ae8e
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Jan 10 10:52:45 2021 -0800

    Add a license to all cargo manifests (#832)
    
    In order to satisfy tools like cargo-deny, we should specify that all
    crates are licensed under the Apache-2.0 license.

commit af1110cb69d4e55a709f490e577bdfa2c61fed46
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 6 10:16:19 2021 -0800

    Rename opaque-transport to transport-header (#825)
    
    Transport headers may be used for non-opaque traffic, i.e., for
    multicluster.
    
    This change renames the module and changes the transport preface to
    reflect this.

commit b25329f74ea1931635b0d9bbb9258c5f989ca01e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 5 16:20:56 2021 -0800

    inbound: Decouple inbound stack from TCP connections (#823)
    
    In order to make the inbound stack testable without initializing OS
    sockets, this change decouples the inbound stack from its TCP client,
    passing in an abstract implementation to `inbound::Config::build`.
    
    This change introduces a new `stack::Fail` module that always fails.
    This is used to ensure that connections targeting the inbound server
    without an opaque port are not forwarded, removing the need for
    endpoint-level loop prevention.

commit 3492262f1b49b38e74adfd32cf41724c2a075f85
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 4 14:51:35 2021 -0800

    stack: Rename NewOptional to NewUnwrapOr (#824)
    
    The `NewOptional` module's name is a bit misleading. This change renames
    it to `NewUnwrapOr` which is a slightly better analog of what it
    actually does.

commit f3ec8b7265619ad1380169c6bfae96a44da2a32e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 4 14:03:37 2021 -0800

    Decouple TLS detection from TCP connections (#818)
    
    The TLS accept stack--the `DetectTls` type--is currently coupled to the
    `TcpStream` type; but the `TcpStream` type requires an actual OS-level
    TCP connection, which isn't ideal for testing.
    
    This change introduces a new trait `tls::accept::Detectable` and an
    implementation for `TcpStream`. This will permit us to use alternate
    implementations (e.g., for `io::DuplexStream`).
    
    This change also updates the `DetectTls` type name to `NewDetectTls`,
    and `AcceptTls` to `DetectTls`, to fit our more recent idioms.

commit 467e97978703e6266b8558f8cc0f4f772294a8ea
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 4 10:53:36 2021 -0800

    Avoid boxing I/O types for optional TLS (#817)
    
    Our tls client and server currently box the underlying I/O types so that
    TcpStreams and TlsStreams can be returned and used interchangeably.
    
    This change introduces a new `EitherIo` type that implements
    `AsyncRead`, `AsyncWrite`, and `PeerAddr` to replace uses of `BoxedIo`
    in the data path.

commit 68aacb80721e920ab53a107efbf0e44fb642f458
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 4 09:20:56 2021 -0800

    Update Rust to 1.49.0 (#822)
    
    This change updates the project to use Rust 1.49.0, which includes
    new clippy lints.

commit feb1ca66c76c1e20321079a003175b374221935e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 4 08:53:53 2021 -0800

    tap: Simplify tap initialization (#820)
    
    This change updates the tap module to look more like our other modules.
    Instead of building a layer that is passed into stack builders, the tap
    module now only produces its registry and stacks are instrumented with
    the (renamed) `NewTapHttp::layer` helper.
    
    This change removes the unused MakeService implementation and replaces
    the manual future implementation with a boxed async closure.

commit 276a9f2acc14ade3ec2cce744ec9dea8bbc9c7d0
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Dec 31 15:51:17 2020 -0800

    Remove box from inbound connector (#816)
    
    The `BoxedIo` type no longer provides special shutdown logic. This
    change removes an unncessary box from the inbound connector.

commit b4c9516639b8a873275eef5fe4df5f410bcfb554
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Dec 31 14:35:11 2020 -0800

    Rename transport types to ConnectTcp and BindTcp (#819)
    
    This change makes it clearer that these are concrete types and not
    abstract traits. It also removes the `svc::connect` helper, as its
    overly specialized.
    
    This is intended to setup decoupling TCP connections from the
    inbound/outbound stacks so that we can setup the entire stack without
    interacting with OS sockets.

commit 0fdd297f448f70f779c14735ca54fd1c0491817f
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Dec 31 11:14:15 2020 -0800

    Simplify stack type constraints (#815)
    
    We've grown a bunch of type constraints that don't actually influence
    compilation. This change removes unnecessary constraints.

commit 2a5d38a353c9b6ed4e7eef74378de59c0ad112d0
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 30 10:42:30 2020 -0800

    http: Simplify http::boxed type references (#814)
    
    The `proxy::http` module re-exports the boxed _module_ so that all uses
    are referenced like `http::boxed::BoxBody`. This is needlessly verbose.
    
    This change re-exports the `BoxBody`, `BoxRequest`, and `BoxResponse`
    types directly from the `http` module to simplify references as, e.g.
    `http::BoxBody`.

commit 63fc4b32de633df548e61f9af145a3e53cb9874e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 29 16:33:15 2020 -0800

    Remove the stack::Oneshot helper (#812)
    
    The oneshot helper is no longer used. Remove it.

commit 7e888392aaf19693f9963c0f4fa7ce0bbf43d31b
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 29 15:19:24 2020 -0800

    stack: Remove the MakeReady helper (#813)
    
    It's no longer used. Remove it

commit 24bee8cbc5413b4587a14bea1e2714ce1f1f919a
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 12:33:17 2020 -0800

    admin: Add a /shutdown endpoint (#811)
    
    Some applications, namely batch jobs, may prefer to manually signal that
    the proxy should terminate instead of relying on a SIGTERM. There's no
    good way for one container to send signals to another, though; so we
    need an admin endpoint to support shutdown.
    
    This change adds a `/shutdown` endpoint to the proxy's admin server that
    can be used to cause the proxy to initiate shutdown. Shutdown requests
    must come on the loopback interface (i.e. from within the same
    Kubernetes pod).
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 78053f1d5a970509505322c9087b56bba7831e3c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 12:10:02 2020 -0800

    Simplify BoxNewService initialization (#807)
    
    This change removes the `Stack::box_new_service` helper in favor of a
    `BoxNewService::layer` function to reduce needless boilerplate.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 471e97324a831b60538b527ae2ba08ef9456b816
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 12:05:39 2020 -0800

    Simplify drain module implementation (#810)
    
    This change updates the module's tests to avoid manual future polling.
    This change also updates method names for clarity, eliminates an
    unnecessary manual future implementation, and eliminates unnecessary
    crate dependencies.
    
    The `drain::Retain` service is now gated behind a feature flag so the
    tower and stack dependencies are optional. This is mostly helpful for
    external crates that take a Git dependency on the drain crate.

commit 4980b4eaab01c265a9c3f6bc284082dadf6213d8
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:57:31 2020 -0800

    Include scope names in failfast error messages (#791)
    
    When a `FailFast` error is triggered, we have no way to know from which stack
    this error originates.
    
    This change modifies the `FailFast` module to accept a `scope` name to
    be included in error log messages.
    
    Furthermore, this change removes the `FailFastLayer` type in favor of a
    simple `FailFast::layer` helper. It also removes the `push_failfast`
    stack helper as it doesn't really help us (and the layer type is no
    longer nameable).

commit c7d342424cdcab5235226140e5d68369b161533b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:49:12 2020 -0800

    Cleanup HTTP boxing modules (#805)
    
    Removes unneeded layer types.
    
    Removes stack helpers.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit c8ffe3b765dae7de79cdd171d646ab7d8c672fa2
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:48:56 2020 -0800

    Simplify header_from_target stack initialization (#803)
    
    Removes the `Layer` type in favor of an anonymous helper.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit a67c6b27d450ee627d8071a3368fc3fc85b20064
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:45:18 2020 -0800

    Simplify tls::client module (#809)
    
    * Simplify tls::client module
    
    The tls::client module uses an old-style manual future implementation,
    which makes it difficult to read.
    
    This change replaces the `client::ConnectLayer` type with an anonymous
    helper function and replaces the manual future state machine with an
    async block.
    
    * fixup tests

commit 9e4b3af89dd0f951e789b22754680dde2d97be17
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:43:38 2020 -0800

    Remove the override_authority::Layer type (#802)
    
    This change cleans up the `override_authority` module, removing its
    unnecessary `Layer` type.

commit 6efb35f40a890f8facc6cb274b7511b415703df3
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:43:13 2020 -0800

    Add checks to ensure support for opaque transport (#808)
    
    This change adds startup configuration checks to ensure that:
    
    1. Identity is required on the inbound port; and
    2. The inbound port is not included in the opaque ports list.
    
    This helps to ensure that the inbound proxy port is only used to
    securely proxy opaque transport messages (as well as HTTP requests for
    multicluster gateways).

commit a81896b0476702f82a9f09769258f668a13eb418
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:38:33 2020 -0800

    Simplify HTTP metrics initialization (#806)
    
    This change replaces the http_metrics::requests::Layer type with an
    anonymous helper and removes the unneeded `MakeService` and future
    implementations.

commit 7e66ec5e05d093a04c405b59699eec82662d83ce
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:32:32 2020 -0800

    Simplify http-classify stack initialization (#804)
    
    Remove the concrete `Layer` type in favor of an anonymous helper and
    rename service types to match our newer idioms.

commit 50e0608a89f4548c686d52238543014515f6692c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:28:18 2020 -0800

    Remove the strip_header::Layer type (#801)
    
    The `strip_header::Layer` type is unnecessary. This change eliminates it
    in favor of an anonymous type.

commit 88b11f134291108ecfda555b7e2c421f843667ca
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:23:49 2020 -0800

    Simplify concurrency-limit initialization (#799)
    
    This change replaces the `concurrency_limit::Layer` type with
    `ConcurrencyLimit::layer` helper. It also removes the
    `push_concurrency_limit` stack helper, since the layer type is no longer
    nameable.

commit 665230c986811d0a40f420b2b5a57d69173baf39
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:06:00 2020 -0800

    Remove unused http::add_header module (#800)
    
    The `http::add_header` module is unused. Remove it.

commit 4aa8c66301cf72a6d9f914db144f349a059a6265
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 11:04:13 2020 -0800

    Simplify NewRouter initialization (#795)
    
    * Add a NewRouter::layer helper
    
    NewRouter initialization is needlessly verbose.
    
    This change reduces boilerplate by adding a `NewRouter::layer` helper.
    
    * Fix typo; add comment

commit e76b07fe2a51d4574a5d312c4cac9a6c9086bb1a
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 10:53:38 2020 -0800

    Simplify outbound endpoint stakc creation (#798)
    
    Add a `NewRequireIdentity::layer` helper to simplify the outbound HTTP
    stack.

commit ff2fdb23e57516cda0958fe7ca9ec429a7dd301f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 10:52:39 2020 -0800

    Add a NewServeHttp::layer helper (#793)
    
    Now that `NewServeHttp` takes a single inner stack, we can instrument as
    a simple layer.
    
    This change replaces the module's constructor with a layer and
    consolidates the inbound HTTP server stack.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 0127463b6ddc7ab9e5b408eb3789eeb45ec25ab4
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 10:35:50 2020 -0800

    Simplify tcp::Forward stack initialization (#797)
    
    Add a `tcp::Forward::layer` helper to simplify stack initialization.

commit 7d7eaaf8a664a70a1ee11697e38fc12a6369b1bc
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 10:35:26 2020 -0800

    Add MakeNormalizeUri::layer helper (#794)
    
    In order to simplify stack initialization, this change renames the
    `MakeNormalizeUri` type to `NewNormalizeUri` and adds a `layer` helper.

commit ac6f762e99a4aa775c0d661114661fe804f156dd
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 10:31:26 2020 -0800

    Remove unused make_response module (#792)

commit 1537482b2cb9feb7f586396b9bf30ddb913a99f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 28 10:30:39 2020 -0800

    Simplify orig_proto::Downgrade intializaiton (#796)
    
    This change adds a helper, `orig_proto::Downgrade::layer`, to simplify
    stack initialization.

commit 1be301f2b0605367be733b4cd96de88108b8889b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Dec 22 19:59:23 2020 -0800

    identity: add `identity_cert_refresh_count` metric (#788)
    
    This commit adds a new `identity_cert_refresh_count` counter metric,
    which tracks the number of times the proxy's identity certificate has
    been successfully refreshed by the Identity service.
    
    This change was fairly straightforward, but I did make a few internal
    changes so that the counter could be passed into the daemon task. This
    resulted in a couple things moving around, but the moved code is largely
    unchanged.
    
    In the future we may want to count cert refresh errors as well, possibly
    adding labels for successes/failures, or a new metric tracking errors.

commit 28084c63642395e97ab46420efd0dba3c3980cb7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Dec 22 13:58:20 2020 -0800

    identity: add a metric tracking when the proxy's cert expires (#787)
    
    This branch adds a new `identity_cert_expiration_timestamp_seconds` to the
    proxy's Prometheus metric. When identity is enabled, this metric will
    report the time at which the proxy's current certificate expires, in
    seconds since the Unix epoch.
    
    Closes linkerd/linkerd2#5379

commit f1be3a6c379114fdbdf3ede8aa6f887da7032a82
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 22 13:44:55 2020 -0800

    Transport opaque connections over mTLS (#785)
    
    The proxy supports transporting "opaque" TCP streams, but it cannot do
    so with mTLS. Because we cannot perform protocol detection (including
    mTLS discovery) on server-first or otherwise idle TCP streams, we have
    no reliable way to instrument mTLS on these connections.
    
    This change leverages a new discovery API that annotates an
    `OpaqueTransport` hint for targets that are marked opaque but have a
    Linkerd proxy. This hint includes the inbound port of the target proxy
    and, when specified, configures the outbound proxy to:
    
    1. Connect directly to the inbound port (instead of the original target
       port).
    2. Write an "opaque transport header"--a special protocol marker and a
       length-delimited protobuf message including the original target port.
    
    This allows the inbound proxy to perform TLS discovery for these
    streams; and then the inbound proxy is able to route the connection to
    the proper application port as informed by the connection header.
    
    This change, effectively, wraps arbitrary, opaque TCP streams in a
    client-first TCP protocol so that inbound proxies can perform mTLS
    detection.
    
    This change does **not** extend the proxy's gateway mode to transport
    these connections. This change will be done in a followup.

commit 25cfa94bb3dc750dcd287359db33535a8d662b58
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 21 21:30:20 2020 -0800

    Default the protocol detection timeout to 10s (#782)
    
    The proxy fails connections that do not complete protocol detection
    within a given timeout. This timeout has been derived from the
    request-level dispatch timeout; but in practice, many applications may
    create idle connections, i.e. in a connection pool, and distribute
    requests over them as requests or events come into the application.
    
    In order to better-support these applications, we want to extend the
    detection timeout to permit idle connections to be established without
    failing them eagerly; though we do not want to increase the
    request-level dispatch timeout, as that can lead to undesirable memory
    pressure and request-level latency.
    
    This change creates a dedicated pair of configurations for the detection
    timeout, decoupled from the dispatch timeout, and sets its default to
    10s.

commit a2ef4a772adea1460a9c2cd6b02f56165ba6566f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 21 20:33:22 2020 -0800

    Ensure all forwarded TCP streams keep the proxy running (#786)
    
    The proxy is not intended to shutdown until all in-flight responses and
    TCP streams are complete. This is enforced by the `ServeHttp`
    middleware, which confusingly handles some TCP forwarding in addition to
    HTTP server initialization. But there are HTTP streams that are not
    instrumented by this middleware and will therefore be abruptly
    interrupted when a shutdown signal is received.
    
    This change modifie the `ServeHttp` middleware to only handle HTTP
    streams. a `NewOptional` middleware is introduced to conditionally build
    a TCP stack when no HTTP type has been detected; and a `drain::Retain`
    middleware is added to prevent the drain signal from being released
    until TCP streams are completed.

commit ad1b35818e5b40ae5a1b7cdeb3ff4fbffc980eed
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Dec 18 18:06:01 2020 -0800

    Remove weights from endpoint metadata (#784)
    
    Endpoint weights are unused. This change removes weights from the
    metadata struct.

commit 104ff6c69a153829c95be6328ad054f21901e2a6
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Dec 17 15:50:44 2020 -0800

    transport: expire idle TCP metrics (#781)
    
    The proxy now exposes transport metrics with per-endpoint metadata; but,
    unlike HTTP metrics, these metrics are never dropped. So an application
    that has communicated with a now-defunct pod will continue to expose
    metrics about that pod indefinitely.
    
    This branch factors out the existing code for expiring idle HTTP metrics
    so that it can be used for transport metrics as well, and adds eviction
    for transport metrics.
    
    I also fixed a couple issues in the `linkerd2_metrics::summary` module
    that were making the crate fail to compile with `--all-features`.
    
    Closes linkerd/linkerd2#5372.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 9b7e2bd3ce7dbc845cab0f58d504e4e632cb779c
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 16 14:40:37 2020 -0800

    Apply clippy to all targets, including tests (#779)
    
    There are some lints that are obfuscated by macros, so the integration
    tests have some blanket allows.

commit 3fc1cb081b85eee3774aff7aa0b718560d926157
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 16 12:49:14 2020 -0800

    Ensure each crate can be built indpendently (#777)
    
    Some subcrates have unneeded or outdated dependencies. This change
    updates most of them and adds more comprehensive checks to CI.

commit f45f04b8bd019f9400e1b1fdb8a5a036ea814bb0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Dec 16 12:33:13 2020 -0800

    trace: update task-tracking to Tokio 0.3 (#778)
    
    This branch updates the `tokio-trace` crate, which we use to implement
    the task-tracking endpoint, to a version that depends on Tokio 0.3. This
    is necessary for task tracking to work, and also removes an unnecessary
    Tokio 0.2 dep from our dependency tree.
    
    Also, the future type name field was removed in Tokio 0.3, since it's
    _far_ too long to be useful, and was replaced with spawn locations.
    Hopefully, this will make task tracking significantly more useful, and
    reduce the memory overhead.

commit 80aae19bc9c2ebf19ae97c2ae777b370732dd657
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Dec 16 12:22:05 2020 -0800

    opencensus: remove Tokio 0.2 deps (#776)
    
    The `linkerd2-opencensus` and `linkerd2-trace-context` traits currently
    depend on Tokio v0.2 to use the MPSC channel. Ideally, we shouldn't have
    any dependencies on the old version of Tokio, and everything would be on
    0.3 instead.
    
    This branch updates these crates to remove the Tokio 0.2 dependency by
    dropping in the `linkerd2-channel` crate. This is necessary because they
    currently use `Sender::poll_ready`.
    
    In an ideal world, we'd want to rewrite these crates to use async/await
    so that they don't need `linkerd2-channel` and could use the Tokio
    bounded channel, allowing senders to wait for readiness without
    allocating. But, for now, this removes the legacy Tokio deps.

commit 63ad2eca32b7a06ac3c1270269ad6bb3bf0b169b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 16 11:18:12 2020 -0800

    Enforce clippy lints (#774)
    
    We haven't run clippy on this project in a looong time. This change
    fixes or acknowledges all current clippy warnings. There should be no
    functional changes.
    
    Clippy linting has also been added to CI.

commit d491ddca537319cfeae606a25852c2f6a59c656d
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 16 09:03:37 2020 -0800

    Remove the profiling tooling (#775)
    
    Our profiling infrastructure has largely been replaced by other tools
    like https://github.com/olix0r/l2-proxy-harness and
    https://github.com/olix0r/ort. The tooling is much less flexible than
    these other tools and has bitrotted over time.
    
    This change removes the `profiling` directory.

commit 1b97e57af037a60ebb3606f30bc99c19d15164f0
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 15 12:42:34 2020 -0800

    detect: Make protocol detection more robust (#744)
    
    The existing protocol detection implementation is somewhat naive: we
    simply perform a single read on the socket and use that initial buffer
    to try to determine the protocol. This means that if the initial read
    only returns a few bytes, we won't actually have enough information to
    do protocol detection. Furthermore, because we don't actually read until
    a `\r\n`, we can incorrectly infer that a non-HTTP protocol is HTTP/1.1.
    
    This change fixes this by replacing the `Prefix` middleware with a
    `Detect` service and trait that does its own buffering as it tries to
    read from the socket.
    
    When detection times out, an error is thrown to the server. This change
    requires modifying test data to include a trailing newline (since it's
    not feasible to close these connections given the current test
    infrastructure).
    
    This change increases the default dispatch (and therefore detection)
    timeouts to 5s.

commit 147908f07ff764837814a80b5c8280851d0c9858
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 15 10:41:31 2020 -0800

    Add a protocol label to stack metrics (#773)
    
    Now that TCP stacks are getting more complex, it's worth differentiating
    them with a protocol label. This change also renames 'source' stacks to
    'server' stacks.

commit 8794cc6da65eee8f1ba5c7a1885ee01adddbaa82
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 15 09:50:23 2020 -0800

    metrics: Add support for microsecond counters (#772)
    
    Also fix broken summary support; and ensure that all features are
    checked in CI.

commit d2a25ce2b96bd62787bb2215de94647b0bb68580
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Dec 14 16:56:23 2020 -0800

    test: make integration tests shut up (#771)
    
    PR #766 changed the proxy tests to set a much more verbose default log
    filter, relying on libtest's output capturing to prevent the tests from
    spamming stdout when they don't fail. However, the integration tests run
    the proxy in a separate thread, and libtest can't currently capture
    output from spawned threads. This results in a bunch of unnecessary
    noise when running the integration tests.
    
    This branch changes the integration tests so that the spawned proxy
    thread uses the old filter settings instead. We still get more detailed
    output from stack tests, and from the main test threads in the
    integration tests. I removed some code that would set the value of the
    log level env vars, since that made this impossible — I'm not really
    sure why that code was ever necessary in the first place.
    
    Also, I fixed a compiler error in `linkerd2-app-test` due to a missing
    Cargo feature.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit cf9900de443aa5b79cba316d39aee66ce9e60be5
Author: Oliver Gould <ver@buoyant.io>
Date:   Sat Dec 12 14:59:38 2020 -0800

    cache: Only spawn a single task per cache entry (#770)
    
    In b0cf2fbb, the proxy moved eviction to be controlled by a background
    task; but this scheme spawned a task every time a service was dropped.
    
    This change modifies the cache to only spawn a single task per cached
    service and use a notification channel to signal drops. This reduces
    memory pressure, especially for HTTP caches.

commit b0cf2fbbd6f9af3a10d7afc00112fb098a4154e6
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Dec 11 17:02:02 2020 -0800

    cache: Ensure that actively held services are not evicted (#768)
    
    Cache eviction is currently triggered when a service has not processed
    new requests for some idle timeout. This is fragile for caches that may
    process a few long-lived requests. In practice, we would prefer to only
    start tracking idleness when there are no *active* requests on a
    service.
    
    This change restructures the cache to return services that are wrapped
    with tracking handles, rather than passing a tracking handle into the
    inner service. When a returned service is dropped, it spawns a
    background task that retains the handle for an idle timeout and, if no
    new instances have acquire the handle have that timeout, removes the
    service from the cache.
    
    This change reduces latency as well as CPU and memory utilization in
    load tests. Furthermore, it ultimately eliminates the need for a specialized
    buffer implementation.
    
    Fixes linkerd/linkerd2#5334

commit 7a2f2b21a1ff56c2b7540a72c13f279b56aeffc4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Dec 11 12:33:16 2020 -0800

    outbound: add stack tests for http (#765)
    
    This branch adds some new stack tests for simple HTTP/1 and HTTP/2
    meshed and unmeshed outbound requests. These tests also assert that TCP
    load balancers are not constructed when HTTP traffic is detected.
    
    The hope was that the panic on constructing TCP balancers would catch a
    bug that exists in #744, but that issue appears to be related to the
    cache instead. Still, it's probably worth having these tests.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 72f0e3dca50fea2e8536ce45a79e27fa9070cd6a
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Dec 10 19:09:31 2020 -0800

    Ensure that services are held as long they are being used (#767)
    
    Middlewares, especially the cache, may want to use RAII to detect when a
    service is idle, but the TCP server and HTTP routers drop services as
    soon as the request is dispatched.
    
    This change modifies the TCP server to hold the TCP stack until all
    work on that connection is complete. It also introduces a new
    `http::Retain` middleware that clones its inner service into response
    bodies.
    
    This is necessary for upcoming cache eviction changes to address
    linkerd/linkerd2#5334.

commit 7f6159dca6ae953c35a4e10b3b9d4ce6e67e0ea6
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Dec 10 12:28:28 2020 -0800

    trace: nicer traces in tests, clean up trace configuration (#766)
    
    This branch improves how traces are displayed in tests. In particular,
    I've made the following changes:
    
    * When running tests, use a "test writer" that participates in libtest's
      output capturing. Now, traces from tests will be displayed grouped
      together when the test fails, rather than printed to the console as
      soon as they occur. Logs can now be printed for successful tests using
      `cargo test -- --show-output`, and will still be grouped by test.
    * Because test traces are now captured, enable a more verbose default
      filter for tests. The logs will no longer be spammed to the console,
      so it's okay to have more verbose logging on by default when tests
      fail.
    * Disabled thread IDs in test mode. The tests run single-threaded
      proxies, and the new-style stack tests are completely single threaded.
      Some of the integration tests spawn test clients or servers in
      background threads, but those have their own spans which should make
      it much clearer to figure out where logs came from than just a numeric
      thread ID. Removing IDs makes the log lines a little shorter.
    
    I considered also enabling thread names in the test logs (since the name
    of a test thread is the name of the test it's running). I decided not
    to, as they end up being quite long since the module path of the test
    function is also incldued, and `--show-output` and panic output already
    groups the logs by which test output them. However, we could turn thread
    names on if we want to.
    
    I also refactored the code for setting up tracing a bit. Hopefully it's
    clearer now --- I was able to remove some complexity from how we pass
    around the handle for reloading the trace level.
    
    I also bumped some of the more verbose logs from the test support code
    down to `trace`, since they get kinda annoying to have them on by
    default (particularly the "new service" one).

commit c8d3677edad07b8b6b21349a382235330d8adfd2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sat Dec 5 11:40:23 2020 -0800

    io: simplify the `Io` trait (#762)
    
    Since `poll_read_buf` and `poll_write_buf` are now free functions in
    `tokio-util::io`, rather than trait methods on `AsyncRead` and
    `AsyncWrite`, it's no longer necessary for us to provide type-erased
    implementations of them. Therefore, the `Io` trait in
    `linkerd2-proxy-io` can be made much simpler --- now, its job is *just*
    to give a single trait for the trait object inside a `BoxedIo`, as trait
    objects may not have multiple non-marker traits.
    
    This branch simplifies  `Io` to just be `AsyncRead + AsyncWrite +
    PeerAddr`, and removes the `poll_read_buf_erased` and
    `poll_write_buf_erased` methods. It also unseals `Io`, since it's no
    longer responsible for ensuring correct propagation of vectored writes.
    
    There should be no functional changes in this PR.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 100a6b324452442837f9fae122c82584d87bd54a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sat Dec 5 11:40:02 2020 -0800

    http: more consistent names for body types (#761)
    
    HTTP bodies are represented by the `Body` trait in the `HttpBody` crate.
    Hyper re-exports this trait as `HttpBody`, and provides its own concrete
    type named `Body`, implementing this trait. Previously, Hyper provided
    its own trait, named `Payload`.
    
    In the proxy, there are several types implementing `Body`. The naming
    scheme for these types is inconsistent: some of them are named `Body`,
    and others are named `Payload`. This makes it somewhat unclear what
    these names refer to, especially when they show up in compiler errors
    like "expected type 'Body', but found type 'Body'."
    
    This branch renames these types to use a more consistent naming scheme:
    
    * The `Body` type in `linkerd2_proxy_http::glue` is now named
      `UpgradeBody`, since it deals with handling HTTP/1.1 upgrades,
    * The `Payload` type in `linkerd2_http_box` is now named `BoxBody`,
      since the "payload" terminology isn't really used elsewhere in
      the proxy codebase, and the new name makes it clearer that this
      is the boxed, type-erased body type,
    * The re-export of `glue::Body as Payload` from `linkerd2_proxy_http`
      is removed --- it turns out this wasn't being used anywhere, and the
      renaming just makes things more confusing (IMO).
    
    There should be no functional changes in this PR, just renaming.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit f977b67ea1a46da15063d4dec76ef53a2b2275b7
Author: Oliver Gould <ver@buoyant.io>
Date:   Sat Dec 5 10:55:55 2020 -0800

    Rename DetectHttp to NewServeHttp (#760)
    
    In preparation for an upcoming change that decouples HTTP detection
    logic from server initialization, this chagne renames `DetectHttp` to
    `NewServeHttp` and `AcceptHttp` to `ServeHttp`.

commit c657b3ee3e45e3428a9c042f7e8da9a8702314db
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Dec 4 14:35:25 2020 -0800

    Update the proxy to use Tokio 0.3  (#732)
    
    This change updates the proxy to use Tokio 0.3 and the Tokio 0.3
    versions of various ecosystem crates. This includes `tower` 0.4 and
    `bytes` 0.6, as well as the Tokio 0.3 versions of `tokio-util`, `hyper`,
    `tonic`, etc. Due to API changes in Tokio and in other dependencies, it
    was necessary to make some code changes as well as updating
    dependencies, but there should be no functional change.
    
    In particular:
    * Tokio's support for vectored IO changed significantly in 0.3, so this
      branch updates our use of `AsyncWrite` to participate in the new
      vectored write APIs
    * Hyper's HTTP/1.1 upgrade API changed in 0.14, so this branch changes the
      proxy's code for handling CONNECT to use the new API
    * Tokio removed support for some socket options, which now need to be
      set using `socket2`
    * Tokio removed the `poll_ready` method was removed from the bounded
      MPSC channel, so the proxy's buffers (`linkerd2-buffer` and the
      `buffer` module in `linkerd2-proxy-discover`) had to be switched to
      our own implementation (this merged separately, in PR #759).
    
    Several ecosystem crates have yet to be released, so we depend on them
    via Git dependencies for now. The patches in Cargo.toml can be
    removed as other dependencies publish their Tokio 0.3 versions.

commit 1d64a119b6a67b987c3066f21126d3727a50d68f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Dec 4 11:50:39 2020 -0800

    update buffers to use Tokio 0.3 MPSC channels (#759)
    
    This branch updates `linkerd2-buffer`, and `linkerd2-proxy-discover`'s
    `buffer` module to use Tokio 0.3's MPSC channel rather than Tokio 0.2's.
    The rest of the proxy still uses Tokio 0.2, including the 0.2 runtime.
    
    Most of the Tokio synchronization primitives lost their `poll`-based
    interfaces in 0.3 as part of the move to intrusive lists of wakers for
    synchronization primitives (see tokio-rs/tokio#2325,
    tokio-rs/tokio#2509, and tokio-rs/tokio#2861). This change takes
    advantage of the inherently pinned nature of `async fn` and `async`
    blocks to avoid needing a separate heap allocation to store the waiter
    state for a task waiting on a synchronization primitive. However, it
    means that a synchronization primitive can _only_ be waited on when the
    future that waits on it is pinned --- otherwise, there is a potential
    dangling pointer. The `poll`-based APIs allowed waiting on
    synchronization primitives from unpinned contexts, so they were removed.
    
    To wait on the synchronization primitives from contexts that may not be
    pinned, such as `poll_ready`, it's necessary to add a `Pin<Box<...>>`
    around the future that's waiting on the synchronization primitive. This
    ensures that the future will not move while it's part of the wait list.
    It's important to note that this isn't an _additional_ allocation per
    waiter versus Tokio 0.2; instead, it's the same allocation that would
    have _always_ happened internally to the synchronization primitive in
    the 0.2 API. Now, it's moved outside of the `tokio::sync` type so that
    it can be avoided when used with `async`/`await` syntax, and added by
    the user when polling the sync primitives.
    
    Because we need to poll channel senders in `tower::Service`
    implementations' `poll_ready` functions, it was necessary to introduce
    our own bounded MPSC channel type that exposes a polling-based API. When
    the buffer's channel is full, we want to exert backpressure in
    `poll_ready`, so that callers such as load balancers could choose to
    call another service rather than waiting for buffer capacity. This
    branch adds a new `linkerd2-channel` crate that implements a pollable
    bounded channel, wrapping `tokio::sync`'s unbounded MPSC and using a
    `tokio::sync::Semaphore` to implement bounding. It's worth noting that
    this is, essentially, how `tokio::sync::mpsc`'s bounded channel is
    implemented --- it also uses the semaphore. However, our implementation
    exposes a `poll_ready` method by boxing the future that waits to acquire
    a semaphore permit, which the Tokio channel does not expose.
    
    Finally, I've added some tests for the `linkerd2-channel` crate, based
    on Tokio's tests for the MPSC channel, modified where the APIs differ.
    This should help ensure we get similar behavior to what we expect from
    Tokio's MPSCs.
    
    This was factored out of PR #732.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit ee3fa1483a51a3e3414a23e51d6ef0b02c30098c
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 2 14:14:36 2020 -0800

    metrics: Support the Summary metric type (#756)
    
    Prometheus supports two distribution types: histogram and summary.
    Histograms track values over a set of fixed buckets. Summaries, on the
    other hand, track fixed quantiles over a sliding time window.
    
    This change introduces a Summary metric type that is backed by
    a ring buffer of hdrhistograms. These histograms may either auto-resize
    or have a fixed upper bound. The histograms are "rotated" so that old
    values expire after a maximum lifetime.

commit c44027ab25af01c0a3f6a7d2b7475bb8af2f80ee
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 2 09:43:16 2020 -0800

    Update *ring* to 0.6.19 (#758)
    
    Includes latest BoringSSL changes.

commit d7faa87884e7b404b6d62c59c73e6e48e58078df
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 2 09:41:46 2020 -0800

    Audit uses of SmallRng (#757)
    
    While testing another program, I was reminded that `SmallRng` can have
    surprising behavior when cloned: since a SmallRng's internal state is
    stored in a field, each clone ends up in the same state such that each
    clone produces the same sequence of values.
    
    Furthermore, the use of `SmallRng::from_entropy` uses `getrandom`
    internally, which can be quite slow, especially compared to the
    alternative `SmallRng::from_rng(&mut thread_rng())`.
    
    It doesn't appear that any of our uses of `SmallRng` are particularly
    problematic -- i.e. the services that hold a `SmallRng` are not cloned,
    so we shouldn't be in a place where we always use a single value.
    However, in the spirit of being defensive to this scenario, this change
    avoid storing a `SmallRng` in Layer and NewService implemetnations so
    that each produced service obtains a unique `SmallRng`. Furthermore, all
    uses of `SmallRng::from_entropy()` are converted to use the faster
    thread-local PRNG equivalent.

commit 876ae02af1da140fc24924b2d82b5e8a40674f8d
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 30 15:38:43 2020 -0800

    metrics: Expose process_cpu_seconds_total as a float (#754)
    
    Prometheus handles all values as `f64`, but we only expose values as
    whole integers. This means that the `process_cpu_seconds_total` metric
    only exposes whole second values, while Linux exposes process time in
    10ms increments.
    
    This change modifies the `Counter` metric type to store an additional
    marker that provides a strategy for converting the stored `u64` value to
    `f64` for export.  This strategy is employed so that we can continue to
    use `AtomicU64` to back counters and only use floats at export-time.  By
    default the unit type is used to convert counters as before, but an
    alternate `MillisAsSeconds` strategy is used to expose fractional
    seconds from a millisecond counter.
    
    This necessitates changing the histogram buckets to floats as well.
    While this change doesn't modify the bucket values, this sets up future
    changes to latency metrics.

commit 1e9a001832e405557c1d6a60dd41d12e8ca6aacb
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 30 11:08:45 2020 -0800

    io: Make peer_addr fallible (#755)
    
    The `io::PeerAddr` trait assumes that the peer addr lookup is infallible,
    panicking the process when the call fails. In practice, however, this
    call can fail when a system is under load.
    
    This change modifies the `io::PeerAddr` trait to allow this lookup to
    fail. When it fails, we propagate this failure to the connection's task.

commit 8cb51ec91fd6e04ade8c12f4d4d14e174ab6fd58
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 24 07:49:49 2020 -0800

    Change default max-in-flight and buffer-capacity (#753)
    
    There are seperate settings for the default in-flight request limit and
    the proxy's buffer capacity, but we've chosen a single default.
    
    This change restores the buffer capacity to 10K while raising the
    in-flight request limit to 100K. This is intended to allow the proxy to
    support services that do not respond promptly that may legitimitately
    have <100K pending requests.

commit b4d9d03afeb3670941e46b4d4dbec6ff98985b75
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 23 13:45:38 2020 -0800

    Increase the default buffer capacity to 100K (#752)
    
    We've received reports that the default in-flight limit may be too
    small. Now that the proxy can consume multiple cores, it seems wise to
    increase the default from 10K to 100K.
    
    This bound should prevent high-traffic workloads from hitting the
    in-flight limit in all but extreme cases, while still protecting the
    proxy against infinite growth.

commit 42a7435eef046f398075835a8320a1ade5908dc1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 23 12:29:15 2020 -0800

    concurrency-limit: Drop permit on readiness (#751)
    
    The concurrency-limit module holds permits until the response future is
    dropped. This is fine in theory, but we have reports of clients hitting
    the concurrency limit unexpectedly.
    
    This change ensures that the permit is released immediately as soon as
    the inner future becomes ready, regardless of how long the response
    future is held. This also adds trace logging when the permit is
    released.

commit f0da619a80ca2e43e4565793266f238f130c63eb
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Nov 23 11:44:05 2020 -0800

    errors: Set `content-type` for synthesized grpc errors (#750)
    
    The proxy will synthesize responses for some error conditions.
    Currently, there's special logic for synthesizing errors for gRPC
    requests: we emit `grpc-status` and `grpc-message` trailers rather than
    HTTP status codes for gRPC requests. However, we *don't* currently set a
    `content-type` header for gRPC error responses. This makes some clients
    angry.
    
    This commit adds a `content-type: application/grpc` header to
    synthesized error responses for gRPC requests.
    
    Fixes linkerd/linkerd2#5273

commit 04431a3794a39db6fea6270fa4dea1376c4a034a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Nov 18 14:17:40 2020 -0800

    style: fix some random clippy lints (#749)
    
    This commit fixes a few clippy lints, primarily the use of `.clone()` on
    types which implement `Copy`. I stumbled across this while trying to use
    clippy to find instances of passing references to `SocketAddr`s instead
    of copying them, which is inefficient...but it turns out that we don't
    actually do that anywhere...
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit f7a8ee98c63b6729e02f54a5182a9b7f56695922
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 18 10:39:25 2020 -0800

    http: Teardown serverside connections on error (#747)
    
    When the proxy encounters an error, it's usually the case that we want
    to gracefully teardown the serverside connection so that the
    application's client has an opportunity to re-resolve the endpoint
    before reconnecting.
    
    This change configures HTTP servers so that the error-handling layer
    initiates server shutdown when an error is not a request timeout. Socket
    errors, failfast errors, etc, are now met with a 502 Bad Gateway, as
    they were before; but after in-flight requests are responded to, the
    proxy's server closes its connection with the application client.
    
    Addresses linkerd/linkerd2#5209
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 605fce9d12dfbe73ae2475d4e1986df47db75a77
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 17 14:54:21 2020 -0800

    cache: Make the cache cloneable with RwLock (#743)
    
    Caches are typically wrapped with buffers so that they can be shared
    across connections. These buffers can be eliminated if the cache itself
    becomes cloneable; and this is easily achieved with a
    `std::sync::RwLock`: the cache first obtains a read lock to clone the
    inner service and a write lock is only obtained when the service is not
    in the cache.
    
    It turns out that the buffers have an important side effect, though: the
    buffers hide the inner service type, which drastically reduces the
    amount of memory needed to compile the linkerd2-proxy crate. To
    replicate this, this change introduces a `stack::BoxNewService` which
    can be used to hide the type signature of a `NewService`.
    
    Benchmarks indicate that this improves p50 latency by 2ms for HTTP/2
    traffic at 100 concurrent requests.

commit 90ba66e6f754a4401f05c1bdc4001f1f27921468
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 17 14:35:00 2020 -0800

    outbound: Avoid redundant TCP endpoint resolution (#742)
    
    This change extends the changes in linkerd/linkerd2-proxy#736 to the
    TCP-forwarding stack so that load balancer resolutions are not created
    when the control plane does not indicate that the target is a service.

commit a466ba5fc88b49f8ac06c9074ccaadf231273037
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 17 14:13:44 2020 -0800

    Add a FromStr for dns::Name (#746)
    
    We use `TryFrom<&[u8]>` in many cases we can use `FromStr`.
    This is a minor cleanup of these type coersions.

commit 5c7db67a40463bdebe8415beffe04b61719ffdd3
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 13 18:32:56 2020 -0800

    outbound: Skip endpoint resolution on profile hint (#736)
    
    Profile resolutions may provide an endpoint response when the
    target is a pod or otherwise known endpoint. When these endpoints fail
    requests with an I/O error, we assume that the endpoint is defunct and
    fail the service so that accepted connections are failed.
    
    Addresses https://github.com/linkerd/linkerd2/issues/5209
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 1df1f18600a9c2b26ec8c350441b9be65e6c3c9d
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 12 16:00:18 2020 -0800

    actions: Add timeouts to GitHub actions (#738)
    
    In order to prevent runaway tests from consuming actions resources, we
    set reasonable default timeouts for each job. This replaces the default
    6 hour(!) timeout.

commit f40ce701e320522573bf1ee4e2e6ace841c5c7ff
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Nov 12 14:19:56 2020 -0800

    h2: enable HTTP/2 keepalive PING frames (#737)
    
    This branch enables HTTP/2 PING frames in the proxy's HTTP/2 clients and
    servers. The timeout for responding to a PING frame is configured based
    on the `{INBOUND, OUTBOUND}_{CONNECT, ACCEPT}_KEEPALIVE` env variables,
    and the interval between PING frames is currently 1/4th of the timeout.
    I'm happy to change that if anyone has better ideas.
    
    Collecting metrics related to H2 PINGs probably requires support in
    Hyper that doesn't currently exist, so this PR doesn't add that. We
    can implement metrics in a follow-up, as it's lower priority.
    
    Closes linkerd/linkerd2#1580

commit 9e8dadea83e1c76fab33ed53f8b2def6a3008577
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 9 13:20:58 2020 -0800

    http: Configure client connection pools (#734)
    
    When an HTTP/1.1 client has many concurrent requests, it may create an
    arbitrary number of TCP connections. These connections are retained for
    90s before they are dropped. In HTTP/1.1. applications communicate at
    high concurrency, this can lead to elevated memory requirements.
    
    Similar behavior is observed with HTTP/2 clients (including when using
    mesh protocol upgrades) if the application communicates with many
    unique services, as is the case for Prometheus.
    
    To address this issue, we want to be more aggressive about tearing down
    idle/unused clients. This is primarily achieved by reducing the outbound
    "max idle age" setting to 5s, which matches the default Kubernetes DNS
    TTL. On the inbound side, the max idle age is set to 20s, as the number
    of clients is typically on the order of <5.
    
    Additionally, `MAX_IDLE_CONNS_PER_ENDPOINT` configurations are
    introduced to bound the number of idle connections that may be retained
    in an HTTP/1.1 client's connection pool. These pools remain unbounded by
    default, as this setting causes elevated CPU usage in load tests. It is
    generally preferable to bound the length of time an idle
    client/connection is cached.

commit feff84b27f8a1aaac684769c54755f50fb6f09dc
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 9 12:47:05 2020 -0800

    Update *ring* and rustls dependencies (#735)
    
    Additionally, prune unneeded dependencies.

commit 2e6357ff040474b5e3e2a19d671c8fcdb4e8daa6
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 2 15:47:02 2020 -0800

    Allow specifying the number of available cores via the env (#733)
    
    Kubernetes does not necessarily configure `cgroups` to limit the number
    of CPUs visible to a process when a cpu limit is set.
    
    In order to allow the proxy injector to control this setting independently
    of `cgroups`, this change introduces a `LINKERD2_PROXY_CORES`
    environment variable that augments the `num_cpus`-based detection.
    If the configured value is larger than the number of available CPUs, it is
    ignored.

commit 82579be46882edb9b5dc5eb4e148dd15e8f2c878
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 30 13:46:43 2020 -0700

    buffer: Remove readiness watch (#731)
    
    Previously, our `buffer` implementation exposed the inner service's
    (initial) readiness via a `watch`. This was primarily present due to the
    `fallback` layer which used the service's initial readiness to determine
    whether to use the service -- on failures it would fallback to another
    service.
    
    Now that fallback is no longer used, the overhead of this readiness
    watch can be removed.

commit a8482a5b6405cce30f8674cf63b4647829b5b784
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Oct 28 14:39:20 2020 -0700

    inbound: use MakeSwitch for loopback (#729)
    
    Currently, loopback connections are detected using the `PreventLoop`
    layer, which returns an error when the target address' port matches the
    proxy listener's port. The inbound router currently uses a `Fallback`
    layer to detect this error and send loopback traffic to a loopback
    service (the mutlicluster gateway).
    
    This branch changes the inbound proxy to dispatch loopback connections
    to the multicluster gateway using a `MakeSwitch` layer instead. The
    `MakeSwitch` layer inspects the target type and applies a predicate to
    it that determines which of two services to make. This is essentially
    the same behavior as using the fallback on error layer, but with fewer
    steps.

commit ee08b625672c24b9f2f3af2954bc15d95612e2a5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 26 11:25:20 2020 -0700

    Reduce tracing spans to the debug level (#730)
    
    We currently set almost all span metadata at the info level, meaning
    that these spans are recorded/maintained for all connections/requests
    even though there are virtually no logs emitted with this metadata at
    the info level.
    
    This changes all of these spans to only be recorded at the debug level.
    Exceptions to this include the per-connection `accept` span and the
    top-level "inbound"|"outbound"|etc spans.

commit 4b48dbda42b4d3e241442e01622cc783b3a756cf
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 26 10:48:40 2020 -0700

    outbound: Introduce 'ingress mode' (#728)
    
    When the `LINKERD2_PROXY_INGRESS_MODE` environment variable is set to
    `true`, the outbound proxy alters its discovery behavior as follows:
    
    * All outbound traffic is assumed to be HTTP traffic or unmeshed opaque
      TCP traffic. Discovery, routing, balancing, and mTLS is only applied
      for outbound THTTP traffic.
    * The `l5d-dst-override` request header is used to specify the target
      authority.
    * If the header is not present, the original dst address is used.
    * Service profiles, traffic split, and balancing are only applied when
      the header is present or when the original dst addr refers to a service
      address (and not a pod address).

commit bde3a1dcd8f9650b0af817623e98027dd46a93aa
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 22 18:08:32 2020 -0700

    outbound: Extract HTTP and server modules (#727)
    
    Following cf10f5f, this change splits the remaining HTTP and server
    stacks into dedicated modules.
    
    No functional changes.

commit 8145d3f90e89c577a05aa2565dd0b425b434f29c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Oct 22 17:08:54 2020 -0700

    trace: update `tracing-subscriber` to 0.2.14 (#726)
    
    This picks up the following upstream changes:
    
    * tokio-rs/tracing#1064, which fixes a bug where creating a subscriber
      would allocate a large amount of memory that was not actually used
    
    * tokio-rs/tracing#1058, which significantly reduces the overhead of
      entering and exiting spans
    
    Together, these changes should improve proxy performance when tracing is
    enabled.

commit cf10f5f75c2c0daeab39546f5e05f93047343ffc
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 22 13:01:02 2020 -0700

    outbound: Split TCP stack into dedicated modules (#725)
    
    The main `outbound/src/lib.rs` is getting large and unwieldy. Before
    making additional changes, this reorganizes outbound as follows:
    
    * `endpoint` has been renamed to `target`. It includes target types,
      one of which is `Endpoint.
    * A new `tcp` module includes TCP-specific target aliases.
    * The TCP connect stack is built in `tcp::connect`. The `PreventLoop`
      filter is now a private type within this module.
    * The TCP balance stack is built in `tcp::balance`.
    * The `resolve` module is no longer generic over its target types, now
      relying on the `Concrete` target type.
    * `allow_discovery::AllowProfile` is now `tcp::AllowProfile`, as it is
      specific to the `tcp::Accept` target type.
    * The `tcp::connect` stack is now generic over the endpoint's protocol
      (instead of hardcoding implementations for TcpEndpoint and
      HttpEndpoint). This means that separate concrete connect stacks must
      be used for each protocol.
    
    There are no functional changes.

commit 12e29f032d2d3c128c7c1bda7ad7261667ab1fe1
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 21 19:34:09 2020 -0700

    router: Use NewService instead of MakeService (#724)
    
    There's no reason for `NewRouter` to operate over `MakeService`. This
    change makes it generic over a `NewService` instead, and moves the
    implementation into the stack subcrate.

commit a11b19698db684f429f1694d302507e1e340bf76
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 19 17:16:28 2020 -0700

    tracing: Support disabling tracing entirely (#723)
    
    When the proxy log level is set to `off`, the proxy now skips all
    tracing initialization and disables the tracing admin endpoints. This
    allows us to minimize the overhead of tracing in benchmarks and
    performance-critical environments.
    
    This has a noticeable impact on _memory_. In local tests, we see
    `main` use around ~24MB with the log level set to `off`. With this
    branch, memory comes down to ~16MB.

commit 779c5241fbf716d56386ba072c8a226c7471efbd
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 19 15:26:45 2020 -0700

    tracing: Fix time formatting to ensure alignment (#722)
    
    In logs, we emit timestamps as time fractional seconds since the process
    started. These timestamps are intended to be formatted at a fixed
    length, but we don't properly truncate nanoseconds to fit the 6-digit
    field we leave for subsecond time.
    
    This change converts nanoseconds to microseconds when formatting
    the uptime so that the value fits into six digits. It also adds a test
    to validate this behavior.

commit bd0fa3e166b4cbd1583d61c75de1d4659e864ed5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 19 15:12:56 2020 -0700

    Split tracing init & admin handlers into crate (#721)
    
    The `app::core::trace` module is coupled to the handlers in
    `app::core::admin`. This change splits this logic into a dedicated
    crate, `linkerd2-tracing`.
    
    This change isolates tracing logic so that tracing overhead can disabled
    entirely in performance-critical configurations.

commit b75c69960707351558477d7755b7117d59cc4e80
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 19 11:15:18 2020 -0700

    admin: Simplify metrics server (#720)
    
    The metrics server has a lot of needless boilerplate logic. This change
    simplifies the `Service` impl to a single, synchronous `fn serve`,
    eliminates unneeded error types, and relaxes type constraints where
    possible.

commit d3f5a152a9431862cdd85fffbba90d006a9f2c64
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 16 11:53:55 2020 -0700

    Remove hardcoded list of ports to skip (#719)
    
    The configuration logic includes a default set of ports to skip, but
    with linkerd/linkerd2#5093, this policy is lifted into configuration.
    
    With that change, these hardcoded defaults can be removed from the
    proxy.

commit df5a4fb4ee69a80624a4f2a4d801d94fed055e9e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Oct 15 16:12:58 2020 -0700

    outbound: test load balancer adding/removing TCP endpoints (#717)
    
    Depends on #714
    
    This branch adds new tests for updating TCP destinations by adding and
    removing endpoints. The first test asserts that when new endpoints are
    added to a load balancer, some connections after they are added are
    routed to the new endpoint. The other test asserts that when endpoints
    are removed, they no longer receive connections.
    
    I've also done some more test cleanup & boilerplate removal.

commit da7881fb623816c828ffc0325a0173547bfa3537
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 15 14:55:36 2020 -0700

    app: Consolidate metrics types in `core::metrics` (#709)
    
    `app::core` spreads its metrics-related types over three modules:
    `metrics`, `metric_labels` and the base, `app::core`. This change
    consolidates all of these types in `app::core::metrics` to simplify
    future changes to metrics formatting.
    
    Also, we were still exporting `handle_time` metrics even though we do
    not record them.

commit da90f8bf02a3e39aaa31fe585bf808c781cb8641
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Oct 15 12:58:53 2020 -0700

    outbound: test profile search nets filtering (#714)
    
    This PR adds a new test asserting that service profiles are only
    resolved for original destination IPs within the specified search
    networks. Also, I updated the existing tests so that the mock connectors
    for endpoints which are expected to be plaintext actually assert that no
    server identity was provided.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 99c45f38157f4616263114d80bb637efecfd0675
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 15 12:24:39 2020 -0700

    outbound: Set source address in Tap metadata (#718)
    
    We recently stopped exposing source addresses on outbound Tap metadata,
    but this causes some confusion in the Tap UIs.
    
    This change introduces an `io::PeerAddr` trait that is implemented by
    all `Io` types and a `proxy::http:SetClientAddr` middleware that inserts
    a `ClientAddr` type onto requests. This middleware is now applied by the
    `DetectHttp` server to ensure the HTTP stack can access the source
    address.

commit b37c82df32d15fb58b988d9eae4290264e6fd2ba
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 14 08:11:57 2020 -0700

    telemetry: Include git SHA in build_info (#716)
    
    The `git_version` typically includes only a tag name without a SHA. But
    symbolic tags don't necessarily disambiguate commits. This change adds a
    `git_sha` label that includes the output of `git rev-parse --short HEAD`
    to identify the actual commit behind the tag.

commit 4024ce1800ea97d55d84a838d201835424f78b41
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 13 19:53:28 2020 -0700

    gateway: Ensure proper outbound metadata (#715)
    
    The gateway has two deficiencies:
    
    * Using the outbound proxy port for the outbound original dst leads to
      the incorrect port being used in the `l5d-dst-canonical` header. Now,
      we instead use the proper port with an unroutable IP address.
    * Because the source cluster's outbound proxy strips `Host` headers,
      there's no `Host` present on gatewayed HTTP/1 requests. Now, the
      `Host` header is updated on all gatewayed HTTP/1 requests.

commit 23350762888e18ab682245a73c00ee92ad7b46e8
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Oct 13 13:08:07 2020 -0700

    outbound: more TCP tests, test cleanup (#711)
    
    This branch adds two new TCP tests: one asserting that resolutions are
    cached across multiple connections with the same original destination
    IP, and one asserting that outbound TCP load balancing actually
    distributes load over multiple endpoints.
    
    In addition, I've done some more cleanup and refactoring of the new
    tests to reduce boilerplate, etc. This should make adding new tests in
    subsequent PRs easier.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 7a03fc7815bcdcaaa159c36edc1df0614cacd6c7
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 13 12:58:22 2020 -0700

    inbound: Fix URI normalization for orig-proto requests (#713)
    
    linkerd/linkerd2#5069 repors that the proxied requests can incorrectly
    end up in the absolute-form. This happens because URI normalization is
    applied after protocol downgrade (where the absolute-form is annotated
    explicitly).
    
    This change improves the inbound orig-proto test to detect this bug and
    fixes it by performing normalization before protocol downgrade so that
    the downgrade layer's behavior is not overridden.

commit 6c484f6dcdeebda18b68c800b4494263bf98fcdc
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 13 12:44:22 2020 -0700

    outbound: Use profile to inform protocol detection (#708)
    
    The outbound proxy skips protocol detection when the target port is in a
    configured list. But there's nothing that actually sets this
    configuration currently. Now that we lookup profiles before protocol
    detection, we can use the profile response to provide a more granular
    per-endpoint hint.
    
    This change stops honoring the
    `LINKERD2_PROXY_OUTBOUND_PORTS_DISABLE_PROTOCOL_DETECTION` environment
    variable. Service profiles are now used exclusively to determine whether
    protocol detection should be skipped for outbound connections.

commit 242a1f8f49d8a53417b92471e75fb15562359864
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 13 12:44:03 2020 -0700

    trace-context: Simplify implementation with async (#710)
    
    TraceContext relies on some older idioms like a manual future
    implementation.
    
    This change replaces the `TraceContextLayer` type with a
    `TraceContext::layer` function and the `ResponseFuture` implementation
    with an (optionally) boxed response future. The response future is boxed
    only when tracing is active.
    
    No functional changes.

commit 105354f32b7eefd6ecdcecd0ed48262883b6195c
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 13 12:31:42 2020 -0700

    inbound: Fix source tap annotations (#712)
    
    The inbound target type changed recently, but the tap inspector was not
    updated to fetch the new target type from the request extensions.
    
    This change adds a `peer_addr` to the `TcpAccept` target type and uses
    this to satisfy the `src_addr` tap metadata.

commit 9556038eae4ae2002ddf4d97317a560c9736f62e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 12 17:50:19 2020 -0700

    outbound: Unify TCP & HTTP target types (#707)
    
    We have target types like `{Http,Tcp}{Logical,Concrete,Endpoint}` that
    differ only superficially between the HTTP and TCP variants. This
    results in unnecessary, duplicate trait impls.
    
    This change consolidates these targets as `Logical`, `Concrete`, and
    `Endpoint`, all of which are generic over the protocol type. We provide
    `Tcp*` and `Http*` trait aliases as a shorthand and compatibility.

commit 9318001ca651a94d6d8320570a9316c5676f4a77
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 12 12:22:56 2020 -0700

    metrics: Coerce targets to metric labels by-reference (#706)
    
    The `TransportLabels` trait & types serve no real purpose and can be
    better-expressed via `Into`.
    
    This change replaces the `TransportLabels` trait with an `Into`
    constraint.  Furthermore, HTTP metrics have been updated to coerce the
    target by-reference, without cloning the whole target.

commit b33dbfdc2505ab3c5a45a097aa9f1db57dc207a1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 12 10:57:58 2020 -0700

    outbound: Discover profiles for each unique TCP target (#704)
    
    The proxy has classically discovered profiles & endpoints by looking at
    each HTTP request's headers. This change removes all per-request
    discovery. Instead, resolution is now done for each unique outbound TCP
    target (regardless of whether the connection serves HTTP or not). This
    eager resolution eliminates per-request cache binding; and supports
    using `TrafficSplit` with non-HTTP services.
    
    This has a few side effects:
    
    - The `l5d-dst-override` header is no longer honored.
    - When the application attempts to connect to a pod IP, the proxy no
      longer load balances these requests among all pods in the service.
      The proxy will now honor session-stickiness as selected by an
      application-level load balancer (see linkerd/linkerd2#4956).
    - TrafficSplits are only applied when a client targets a service's IP.
    - The proxy no longer performs DNS "canonicalization" to translate
      relative host header names to a fully-qualified form.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 81ba3c7e3a78cd74cfff2e5eecfac815af791b47
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 12 09:55:18 2020 -0700

    cache: Delete benchmarks (#705)
    
    The `cache` module has benchmarks, but they are not tested in CI and we
    don't really care about results -- the cache is basically just a
    HashMap. Let's just delete this unused benchmark.

commit 5adfd556819254abeabc5804aee70e597f0c4be3
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 9 14:02:02 2020 -0700

    Update Rust to 1.47.0 (#701)

commit 7f451046b979b4ce7e4ab968eeacd579e1279aa1
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 8 14:41:07 2020 -0700

    telemetry: Remove trailing comma in build_info labels (#699)

commit 2799587e19b4ba20e403dd4189b3eea6984e86f4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Oct 7 14:17:43 2020 -0700

    stack: add SwitchReady service (#694)
    
    This is essentially a form of fallback that falls back when a primary
    service takes too long to become ready. When the primary service's
    `poll_ready` does not return ready for over the specified duration, the
    secondary service is used until the primary becomes ready again,
    resetting the readiness timeout. Erros from both services are
    propagated.
    
    I considered naming this `ReadyFallback`, but that name was already used
    for an unrelated type in the `fallback` module. :)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 2bb66efd677c83d309908b3848480a07b8c0196d
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 7 10:56:44 2020 -0700

    Stop honoring DESTINATION_GET_* configuration (#696)
    
    In a5e0b296, we extracted profile resolution so that each component
    (inbound/outbound/gateway) makes its own filtering decisions. This
    change does the same for endpoing resolution, moving the bulk of the
    logic out of `app:dst` and into `app::outbound::resolve`.
    
    The `app::dst` module is now only responsible for providing API clients
    that transparently retry/reconnect.
    
    Furthermore, the `...DESTINATION_GET_{SUFFIXES,NETWORKS}` environment
    variables are no longer honored. Now, endpoints are resolved for all
    addresses for which a profile lookup is successful.
    
    The `Resolve` API has been cleaned up slightly: we no longer rely on the
    `TryStream` alias (as it causes confusion + boilerplate), instead relying
    on the more general `Stream`.

commit 18763caaadf1b6aa2ad3786e144280548875d546
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Oct 6 16:04:49 2020 -0700

    outbound: initial tests for TCP mTLS (with fewer moving parts) (#693)
    
    This branch introduces a second pass at unit tests for TCP mTLS in the
    outbound proxy, without the complexity of actually performing handshakes
    on mock IOs (as proposed in #658). The new tests just rely on assertions
    that the connect stack receives the expected peer identity metadata. We
    can test that the handshake is performed correctly in separate tests for
    _just_ the TLS client layer, while avoiding the complexity necessary to
    use mock IOs in the existing connect stack. This also means we don't
    have to actually load and parse all the test key material we use in the
    integration tests.
    
    If this approach seems better, I'll open further PRs to add more tests
    in this style.
    
    Closes #658
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a5e0b296cc16ffa3dde9c89833ad2e96d9d994c0
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 6 13:15:55 2020 -0700

    Only allow name-based profile discovery for inbound requests (#695)
    
    The proxy uses a single profile client for both inbound and outbound
    resolutions. We now want to perform profile discovery for all outbound
    traffic; but this is overkill for inbound traffic. We should only do
    profile lookup for traffic that includes a valid service name and not,
    for instance, healthchecks and prometheus scrapes.
    
    This changes inbound to only do resolution for valid names, skipping
    traffic that is not targeting a valid service name.
    
    In order to do this, the following has changed:
    
    - An `AddrMatch` utility is introduced to `core` so that this logic need
      not be propagated.
    - `app::dst` now simply builds a profile client without filtering or
      recovery.
    - The profile client is no longer responsible for synthesizing a
      default profile on timeout -- this will be extracted into the stack in
      a followup.
    - The `profiles::discovery::layer` utility now applies filtering and
      discovery, so that the inbound and outbound proxies may supply their own
      filters.
    - When we reject discovery and handle failed discovery, we always use gRPC
     error codes now

commit aac1e9f46880d6907244096cd471458f505f7818
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 5 08:43:00 2020 -0700

    Unify RequestFilter and Admit middlewares (#692)
    
    `RequestFilter` and `Admit` are basically exactly the same. This change
    moves `RequestFilter` into the `stack` crate and moves all `Admit`
    implementations to `RequestFilter`. This change also restores a `Stack`
    helper for `RequestFilter`, as there are now many uses.

commit 580cb288da330b1d6247142ee9e91cb03b0350f7
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 2 13:31:40 2020 -0700

    Skip endpoint resolution when profile lookup is rejected (#691)
    
    When profile lookup is rejected, this error propagates to the stack and
    is handled by falling back to an alternate stack.
    
    In order to move profile discovery out of the HTTP stack and onto the
    initial TCP accept stack, we want to avoid this sort of fallback
    behavior. So this change modifies profile discovery to make the profile
    optional. When a profile lookup is rejected/skipped, we now simply
    return a `None` profile; and in these cases we avoid performing endpoint
    resolution by omitting a concrete address.

commit 9870faa5bf51dc55e688819d616f9e88fd865521
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 2 11:30:37 2020 -0700

    outbound: Return a default endpoint on reject (#690)
    
    When the resolver rejects resolution, we currently propagate that error
    so that it can be handled via fallback. And due to recent HTTP router
    changes, these resolution errors can propagate up across splits, etc.
    
    This change simplifies this behavior by isntead synthesizing a
    resolution with a default endpoint.
    
    The `not_http` reason has been removed, as it's no longer useful.

commit 86c71ea3197729fd59382f6270dc350f09028391
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Oct 1 15:55:43 2020 -0700

    metrics: add peer identities to all TLS metric labels (#687)
    
    In order to have `linkerd edges` return non-empty values for a raw TCP
    connection's `CLIENT_ID`, the proxy's `tcp_open_total` metric needs to
    include the `client_id` label for inbound connections, like the
    `request_total` metrics for http connections does.
    
    This PR changes the `TlsStatus` metric label type to include a peer
    identity in the `Conditional::Some` case, rather than `()`. This means
    that all metrics with TLS labels will now include the peer identity as
    a label.
    
    I've manually verified that this works by running Linkerd locally and
    scraping the metrics:
    
    For example, here's an excerpt from Grafana:
    ```
    tcp_open_total{peer="src",direction="inbound",tls="no_identity",no_tls_reason="no_tls_from_remote"} 44
    tcp_open_total{peer="dst",direction="inbound",tls="no_identity",no_tls_reason="loopback"} 2
    tcp_open_total{peer="src",direction="inbound",tls="true",client_id="linkerd-prometheus.linkerd.serviceaccount.identity.linkerd.cluster.local"}
    1
    ```
    And from Prometheus
    ```
    tcp_open_total{peer="dst",authority="10.42.0.25:4191",direction="outbound",dst_control_plane_ns="linkerd",dst_deployment="linkerd-grafana",dst_namespace="linkerd",dst_pod="linkerd-grafana-65597cf467-vq456",dst_pod_template_hash="65597cf467",dst_serviceaccount="linkerd-grafana",tls="true",server_id="linkerd-grafana.linkerd.serviceaccount.identity.linkerd.cluster.local"} 1
    tcp_open_total{peer="dst",authority="10.42.0.25:3000",direction="outbound",dst_control_plane_ns="linkerd",dst_deployment="linkerd-grafana",dst_namespace="linkerd",dst_pod="linkerd-grafana-65597cf467-vq456",dst_pod_template_hash="65597cf467",dst_serviceaccount="linkerd-grafana",tls="true",server_id="linkerd-grafana.linkerd.serviceaccount.identity.linkerd.cluster.local"} 1
    ```
    
    I'd like to have automated tests for this, but I'd prefer to not have to
    write them in the integration style, and use the isolated mock service
    style instead. So, tests can be added once #658 lands.
    
    Refs: linkerd/linkerd2#4999
    Fixes: linkerd/linkerd2#5031

commit 76249f3d675560495bf1ab04625eefbe51546bb6
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 1 15:47:27 2020 -0700

    discover: Allow resolution streams to terminate (#689)
    
    In 571f4cba we accidentally introduced a busy-loop on resolution stream
    termination; and, furthermore, the buffer layer returns an error when
    the inner stream terminates.
    
    This change alters both of these to gracefully propagate stream
    termination.

commit 70bbd4221d906f28fb97428e316ba6e001b700a0
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 1 14:34:15 2020 -0700

    tracing: Set contexts in new_service/make_service (#686)
    
    * Modify stack-tracing to set contexts on the initial new_service/make_service invocation (and not just the resulting future/service)
    * Tighten up the HTTP context. `http{version=http/1.x}` was verbose and redundant
    * Avoid setting contexts around `spawn_buffer`

commit fb6e5bd6a82593cbee3731d89640e0a18cf7ff21
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 30 16:30:53 2020 -0700

    request-filter: Support altering the request type (#685)
    
    The request filter takes ownership of the request but does not support
    changing its type. Furthermore, the trait requires that the error type
    be named even though it always coerced to an `Error`.
    
    This change cleans up the request-filter module as follows:
    
    - The `RequestFilter` trait is now named `FilterRequest` (traits
      generally are verbs). This type now has a `Request` type attribute
      instead of an `Error` type attribute.
    - The `Service` has been renamed to `RequestFilter` and the
      `RequstFilterLayer` type has been eliminated.
    - The manual future implementation can be eliminated with `Either`.
    - The stack helper has been removed, as it's only used in one place.

commit 63419129f827d35f563ea1d6ddb2466e3d272e29
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 30 14:26:50 2020 -0700

    profiles: Expose the fully_qualified_name (#684)
    
    Service profiles may include an optional service name, which is
    especially useful if the profile is resolved by IP. This change attempts
    to parse this value as a DNS name. If the default (empty) name is
    returned, no name is exposed.

commit 935948114cf51cc8244019052a6e26347303913f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Sep 30 20:34:28 2020 +0000

    outbound: Remove required identity from HttpLogical (#683)
    
    Presently, the proxy extracts the required identity from the
    l5d-required-identity header into the HttpLogical target type when
    it is present, and builds endpoint stacks which require that identity.
    This was previously necessary because service discovery couldn't be
    performed for pod IPs, only for authorities. However, this is no longer
    the case, and we can now just use the identity returned by service
    discovery for these stacks. This means the required identity can be
    removed from the HttpLogical target, and identities in HttpEndpoint
    targets are only provided by the destination metadata.
    
    Fixes linkerd/linkerd2#5029

commit b03ff817824125850f15dcc82db1808319f31a56
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 29 16:28:39 2020 -0700

    http: Lazily build http/tcp stacks (#681)
    
    Currently, the `DetectHttp` layer always builds both HTTP and TCP
    stacks, even though only one is needed. Furthermore, we lose the
    information about which protocol was detected--it's never passed into
    the http stack (and instead must be inferred from individual requests).
    
    This change modifies the `DetectHttp` layer to only build inner services
    as needed, after the protocol has been detected.
    
    Furthermore, outbound caching has been moved up from the tcp balancer to
    wrap the HTTP detection layer. This was necessary so that the tcp
    balancer could be built instantaneously as a NewService while still
    being cloneable. This means that, for each outbound target ip:port, we
    will reuse HTTP and TCP stacks.
    
    However, HTTP routing remains dependent on per-request metadata. This is
    expected to change in a followup.

commit 49785a26d5df564a3073feb803e2837acb7ae4c2
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 29 15:16:27 2020 -0700

    Update proxy-api and tonic (#682)
    
    proxy-api v0.1.14 includes two new fields on profile resolutions. It
    also has been updated to use tonic-0.3. This change pulls in these
    updated dependencies.

commit 50b9a34589ecbfc79373efa5bc2fd65afc3167c2
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 29 11:34:59 2020 -0700

    outbound: Explicitly ignore the source address for tap (#680)
    
    For outbound requests, the src address is always an ephemeral port on
    localhost, which isn't particularly valuable. Furthermore, as we add
    caching outside of HTTP detection, this becomes annoying to track.
    
    This changes the outbound stack to always use a `None` src addr.

commit 8f1b967a24ba4856354a77b6e5e55d4221dd54cf
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 28 15:42:25 2020 -0700

    outbound: Restore spawn-ready (#679)
    
    The spawn-ready layer was removed in 1382e32fa; but this means that
    endpoint-level services aren't necessarily driven to readiness. This
    can manifest in TLS detection timeouts, since a client may not be driven
    through the TLS handshake.
    
    This change removes the `push_spawn_ready` helper, because it's really a
    `push_make_spawn_ready` and the make layer is totally superfluous.

commit a6ba155f133b1a18fa401d9b9bff965ffc60cc73
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 28 11:27:27 2020 -0700

    transport: Fix server address metadtata (#678)
    
    The server sets the wrong local address, mistakenly using the peer
    address instead.

commit d18730c3392954041354caf8cdd30ac89306a4c4
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 25 12:15:02 2020 -0700

    Split prefix buffering from HTTP detection (#676)
    
    This change modifies `serve` to take a `NewService` instead of a
    `MakeService`. Services specific to the accept stack have been
    updated as well
    
    `DetectHttp` has been updated to work as either a `MakeService` or
    `NewService` -- the asynchronous version is still needed by the outbound
    proxy (until caching is changed).
    
    `DetectTls` is now purely a `NewService`.

commit f4de07dcc682a6532490eb3ec01f5791f44c8e1b
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 25 11:56:16 2020 -0700

    Update the accept stack to use NewService (#675)
    
    This change modifies `serve` to take a `NewService` instead of a
    `MakeService`. Services specific to the accept stack have been
    updated as well
    
    `DetectHttp` has been updated to work as either a `MakeService` or
    `NewService` -- the asynchronous version is still needed by the outbound
    proxy (until caching is changed).
    
    `DetectTls` is now purely a `NewService`.

commit 670189201470022fbc952e85794226ac46c7ae20
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu Sep 24 21:38:00 2020 +0300

    Increase default Dns canonicalize timeout (#672)
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 048afd1e0da1dbfed460f7456fb85a5d82680088
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 24 11:32:03 2020 -0700

    Make HTTP client stacks synchronous (#674)
    
    This change implements `NewService` for `Reconnect` and other
    HTTP-client middlewares. HTTP clients are almost always coerced to
    `NewService`, so this reduces boilerplate and type complexity.

commit 2a190828dfcc66ad9246af9d5208fca1020fb73b
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 24 11:23:01 2020 -0700

    Implement profile discovery as a NewService (#673)
    
    The profile discovery layer is always coerced to a NewService. This
    change formalizes this to avoid stack boilerplate.
    
    While we're here, the GetProfile trait has ben simplified to avoid
    exposing poll_ready in its public API. Instead, we provide an impl of
    Service for GetProfile that does this (though it's not currently
    needed).

commit 571f4cba69598fae0ddfabba337f54fa82ef9300
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Sep 23 16:47:26 2020 -0700

    discover: Make endpoints with `NewService` (#671)
    
    This branch changes `linkerd2_proxy_discover::MakeEndpoint` to wrap a
    `NewService` rather than a `MakeService`, and construct endpoint
    services synchronously rather than asynchronously. This allows removing
    a great deal of complex logic for driving and cancelling `MakeService`
    futures that was previously necessary.
    
    For now, we just wrap the underlying endpoint stacks in
    `into_new_service` to create them lazily. In the future, these stacks
    will likely be changed to native `NewService` impls.

commit b7e8e5dae39c86d1cf93949dfda5dfa64d63518f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 23 16:13:07 2020 -0700

    Implement fallback for NewService (#669)
    
    This change adds an implementation of `NewService` for `Fallback`.
    
    The returned service holds a primary service and the means to build a
    fallback service if the primary service errors before becoming ready.

commit 84e40c7dcba57d35e053c3f05c16363383eba590
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 22 14:14:10 2020 -0700

    cache: Implement NewService (#668)
    
    The cache used to implement logic in its `poll_ready`; but this was
    changed some time ago. Otherwise, the cache is synchronous and
    infallible, much like the `NewService` trait.
    
    This change modifies `NewService` to take a mutable reference, as needed
    by the cache; and it modifies the cache to implement `NewService`
    instead of `Service`.
    
    The stacks then coerce the cache back into a service (via `into_make`)
    to satisfy the buffer's requirements. It is expected that this buffering
    will be decoupled from the cache in a followup change.

commit 7cda3033fd4437b79cd08ba1e2b2fb2eabb93780
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 15:30:01 2020 -0700

    integration: Bundle tests in src (#665)
    
    Integration tests are split out so each is effectively its own build
    target. While this is convenient at times, it also means that compiling
    all integration tests is SLOW.
    
    By bundling them all into the integration/src, we avoid having to
    recompile/link the proxy many times when building integration tests.

commit d5c10bd1d7cea42df2b491fb166902eb96259739
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 15:20:07 2020 -0700

    inbound: Split HTTP detection stack from TLS (#664)
    
    The `DetectTls` module only operates on `TcpStream`s (because it uses
    the `TcpStream::peek` api); but this complicates writing tests on the HTTP
    stack to validate changes like #660.
    
    This change decouples these accept stacks so that they can be tested
    more easily.

commit d7784bb38623063bc456c16e3c8320d036174534
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 13:48:46 2020 -0700

    app: Decouple stacks from listeners (#663)
    
    The inbound and outbound configs bind an accept stack to the listener
    via serve::serve; but this makes it infeasible to test the accept stacks
    without actually binding a socket.
    
    This change moves the server binding into the main app initialization so
    that the inbound and outbound stacks can be built without a listener.

commit e06982bdb56dda9562954eef33a81847dedc4c47
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 13:08:06 2020 -0700

    outbound: Reorganize outbound stacks (#662)
    
    There's no functional change here, just some general cleanup
    after recent changes, including:
    
    * The TCP balancer is no longer responsible for fallback
      forwarding. This makes the server responsible for all TCP
      forwarding. The metrics have been removed from the TCP
      balancer stack (for now).
    * Loop detection is moved to the connect stack, rather than
      the accept stack.
    * The TCP balancer tests have been simplified somewhat.
    * `tcp::Forward` no longer has a maker. `OnResponse` does
      the job just fine.

commit 6719486c2517869f7dd505b2cf7b98dab79e4172
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 12:30:59 2020 -0700

    tracing: Elide redundant info in tracing contexts (#661)
    
    The tracing context includes redundant information, particularly about
    the traffic target.
    
    This change modifies the accept stack to include both the source peer and
    target addresses in the `accept` context; and the target address has
    been removed from intermediate contexts, many of which can be moved to
    the debug level now.

commit 308a73079c25a49545d90e470e3aeb51c0084038
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 11:56:26 2020 -0700

    inbound: Apply loop detection on the connect stack (#660)
    
    a233e1af altered the accept stack so that both TCP and HTTP stacks are
    instantiated prior to performing detection on a socket. This will allow
    us to cache these stacks for each destination.
    
    However, this eager binding broke the gateway fallback logic, since the
    TCP stack's failure invalidated the HTTP stacks' fallback to the
    gateway.
    
    This change moves loop detection onto the TCP connection stack so this
    eager binding does not fail.
    
    Fixes linkerd/linkerd2#4943

commit 07a448eccb84ecfce3c6bf72b1807057dd53b6f9
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 18 10:30:21 2020 -0700

    http: Put normalize_uri back on the stack (#659)
    
    In b59172a, we moved the NormalizeUri logic into the HTTP server, but
    this misses downgraded requests.
    
    This change extracts NormalizeUri from the server, putting it back on
    the HTTP stack so that it can be applied after `orig_proto::Downgrade`
    is applied on the inbound proxy.

commit 445e7dc8a898a98a0f07ad6b28780e64f7ea236b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Sep 16 13:07:58 2020 -0700

    introduce tests for isolated services (#655)
    
    This branch introduces a new style of tests to the proxy codebase, and
    an initial implementation of new test support code for writing tests in
    this style. Rather than running an entire proxy alongside a simulated
    control plane, and binding actual network socket, as the present
    integration tests do, the new tests run individual proxy components in
    isolation, using simpler mock implementations of components like name
    resolution and IO.
    
    This approach has a few advantages. It should reduce flakiness
    significantly, since we don't perform any IO and don't need to
    synchronize events between multiple threads running test support
    servers/controllers (the new mocks all just synchronously provide values
    immediately). We can run everything in a single thread using Tokio's
    basic scheduler. Additionally, since we are testing individual
    components in isolation, these tests can live within the crate for the
    part of the proxy being tested. This means we have access to more
    internal state to make assertions on, rather than having to make
    assertions on side effects like metrics.
    
    I've added a new `linkerd2-app-test` crate that adds some initial mocks
    for this kind of testing, including a simple mock resolver and a mock
    connector using `tokio-test`'s mock IO. I've also added a simple "hello
    world" test for the outbound TCP stack written in this style. The
    intention is to use the new test support code for testing the recent
    changes adding TCP mTLS and load-balancing.
    
    In order to make this code more testable, it was necessary to move a few
    things around. In particular, the outbound TCP balancer stack is now
    constructed in a separate method, rather than in `Config::build_server`,
    so that it can be tested without requiring all the dependencies of the
    full HTTP server stack. A few other similar changes were also necessary.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 12011fb9a319bcd8253882033ec3b9c75c1cfa1d
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 16 11:27:39 2020 -0700

    Make SkipDetect more generic as stack::MakeSwitch (#657)
    
    SkipDetect is needlessly coupled to its `listen::Addrs` target type and
    the Accept stack's shape. In reality, it's pretty similar to the
    fallback module, except that decisions are made on the target rather
    than the response future.
    
    This change replaces the `core::proxy::skip_detct` module with
    `stack::switch`.
    
    Above all, this allows us to use other targets with this module, which
    is needed to do discovery before protoocl detection (and to use the
    results of discovery to inform detection).

commit b59172a0bb1d5a12c1b18695fbcdf909c9e83c08
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 15 18:20:27 2020 -0700

    http: Simplify stacks and target types (#656)
    
    Currently, various properties of HTTP requests are exposed into the
    stack target type, meaning that stacks (including their resolutions)
    cannot be shared across requests that vary by any of these settings and,
    worse, that per-request determinations must be made to determine which
    stack to use.
    
    In order to bind stacks according to connection-level metadata, where
    these request-level parameters cannot be known, we need to remove
    this metadata from the stack target.
    
    The HTTP server now applies URI normalization as an internal
    implementation detail (because it's a detail of how hyper clients and
    servers differ). This eliminates the `ShouldNormalizeUri` trait, as that
    determination can be made entirely based on the properties of the
    request without any additional stack-specific metadata.
    
    The HTTP client now takes an updated `Settings` type that explicitly
    handles the orig-proto upgrade logic (removing this from the client
    stack).
    
    Stack targets now hold an `http::Version` on the accept-side, and map
    that to a per-endpoint `http::client::Settings` for use by the http
    client.

commit 9e7fd5aafcc9b152fba5a68b4d7c3d0f691293b3
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 10 09:43:07 2020 -0700

    metrics: Add endpoint labels to outbound TCP metrics (#654)
    
    TCP metrics are pretty terse. Now that we're doing discovery for TCP forwards,
    it seems appropriate to expose endpoint labels on TCP metrics (at least to
    determine if/when mTLS is being applied).

commit 4bac42481251e80a6591a8f05e57a850bd2c6e6a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 9 16:00:01 2020 -0700

    outbound: TCP discovery and load balancing (#652)
    
    The proxy only forward TCP connections to the original destination address, never
    using the mesh's mTLS.
    
    This change modifies the outbound TCP forwarding stack to do discovery based on
    the original destination address, resolving service IPs to the individual endpoint IPs
    (and their associated identities). This enables mTLS for meshed TCP connections.
    When the endpoint cannot be discovered (i.e. due to an InvalidArgument response
    from the controller), the connection is forwarded as before.
    
    The PeakEWMA balancer is repurposed for this, using connection latency (and
    pending connections) as the load metric. In the future, this should be modified
    to count active connections towards the load (but this won't Just Work with the
    PeakEwma balancer, so this is deferred for now).
    
    This has been tested [manually](https://github.com/olix0r/init-net-test/blob/b3860861c54344667a797ece5b685a0574798fb3/k8s.yml).
    In follow-up changes, we'll extend the transparency tests to validate this behavior.

commit 1382e32fa64e8f771ec7cd2d5f95b68e5a8f762e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 8 12:05:51 2020 -0700

    outbound: Clarify Http target types (#653)
    
    The outbound `endpoint::Target` type is generic to the point of being
    useless.
    
    This change modifies the stack target types to be either `HttpLogical`,
    `HttpConcrete`, or `HttpEndpoint`. Furthermore, the `canonicalize`
    middleware no longer uses a bespoke trait, instead opting for
    `AsRef` + `AsMut`.
    
    This sets up further changes to the outbound HTTP stack.

commit b97909fdb9d79ce18848a8fe699aa516bfc5cbf5
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 8 10:32:37 2020 -0700

    proxy-http: Remove unneeded boilerplate (#651)
    
    There's a lot of needless boilerplate around the HTTP client, mostly due
    to manual future implementations. These have been converted to boxed
    futures.
    
    Furthermore, the HasSettings trait has been eliminated, in favor of
    AsRef.

commit 6c8d715741cd082991325dea54bd8f0c144ad92c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 3 11:08:04 2020 -0700

    profiles: Do not rely on tuples as stack targets (#650)
    
    Using tuples for stack targets (particularly, the input targets of the
    route_request and split modules) is a bit brittle.  Instead, we can use
    `AsRef` on the target type to access the profile receiver.
    
    This change introduces new target types to be used to satisfy these
    traits, and generally cleans up stack construction.

commit 67e99b710c0d6eaa32996ef5e77349ca93615841
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 3 09:49:23 2020 -0700

    Eliminate the ConnectAddr trait (#649)
    
    The connect module can use the more standard `Into<SocketAddr>`. No need
    for a special trait.

commit 6a85ac7553b03f6b4caf687b8991a6705e5d6a14
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 1 07:24:01 2020 -0700

    outbound: Remove unused error type (#648)
    
    The DiscoveryError type is unused. Remove it.

commit b89f58c047aa3e0ec8265d63352b514ac53e8973
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 12:24:17 2020 -0700

    outbound: Cache balancers within profile stack (#641)
    
    In an upcoming change, we'd like to do service profile discovery within
    the TCP-accept stack (and not the HTTP routing stack). But, today,
    service profile discovery is tightly coupled to the HTTP middleware
    implementations. This change splits the service profile layers (profile
    discovery, http request profiles, and traffic splitting) into several
    layers, so that the discovery logic is decoupled from the http-specific
    request-routing middleware.
    
    This change removes the balancer cache and the balancer-specific buffer
    so that balancers are owned by the split layer. The buffer has been
    moved outside of the split layer to drive all balancers in a split and
    to make the split cloneable (for the retry middleware). All of this is
    cached under the profile cache.
    
    Breaking changes:
    
    This likely breaks support for "external" service profiles, where the
    proxy resolves service profilse for domains that it cannot resolve via
    the resolver. This feature is not enabled by default and is considered
    experimental. We'll have to take care to at least document this in
    upcoming releases.
    
    Side-effects:
    
    * Latency improvements at concurrency ![image](https://user-images.githubusercontent.com/240738/91736211-2fd48280-eb62-11ea-8420-30e0242980a5.png)
    * Compile time improved by 20-25% (integration tests in CI ~20m => ~15m);

commit bf0c222aef3a388d502f6cba5895e8efc48d92df
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 09:35:56 2020 -0700

    Update tower to tower-rs/tower@ad348d8 (#647)
    
    We need tower-rs/tower@ad348d8 for an upcoming change. This PR updates
    the tower dependency in anticipation of this change. The `Balance`
    constructor has changed.

commit e478b3ef8db98d3a2d5d531867c5c7ac90c0564a
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 07:49:20 2020 -0700

    service-profiles: Cleanup crate organization (#646)
    
    * Renames `Routes` to `Profile`;
    * Renames `GetRoutes` to `GetProfile`;
    * Renames `WeightedAddr` to `Target`; and
    * Scope `Route` & co within `http` module.

commit 8c61f2aae6a8b76a25171a68dda38b2c2d19fcd2
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 07:46:52 2020 -0700

    Restore disabled portion of profile override test (#645)

commit e56bbecb9b543ac437869501f8952465adb9d50f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 07:21:42 2020 -0700

    outbound: Make discovery error detection generic (#644)
    
    The outbound proxy handles discovery rejection error with a fallback
    router. The current implementation does not allow for middlewares
    to wrap errors in a general fashion.
    
    This change updates the `is_discovery_rejected` function to examine
    arbitrary error types to determine if the underlying error matches the
    known types.

commit b61af18a3281cc1b03c1976264fe73c5b4ad2232
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 07:17:06 2020 -0700

    service-profiles: Eliminate the HasDestination trait (#643)
    
    The `HasDestination` trait isn't particularly useful, as it's basically
    just `AsRef<Addr>`.
    
    This change updates the `GetRoutes` signature to support this; and it
    updates the inbound target type to store an `Addr` instead of an
    `Option<NameAddr>` (so `Target` will be suitable for this in an upcoming
    change).

commit 8cde1d43a9bea6b5616f988106a5667ee6f9175e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 31 07:15:13 2020 -0700

    svc: Update stack diagnostic checks (#642)
    
    This change updates and extends the diagnostic stack checks that we use
    during development. No functional changes.

commit 1503b630c7a1036e420adb780cfeb52ee69982aa
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 27 14:03:24 2020 -0700

    control: Recover from failed resolutions (#640)
    
    Arbitrary (unexpected) DNS errors can blow up the control client.
    Instead, we should try to backoff & recover from these unexpected
    errors.

commit ca2fc1ff68bf7f005114961cec0ea2d643c9cecd
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Fri Aug 28 00:03:11 2020 +0300

    Recognize NXDomain Errors (#639)
    
    Due to bluejekyll/trust-dns#1171, we cannot trust the DNS library
    to return typed NXDOMAIN errors.
    
    This change detects these errors by matching the error string. The
    default TTL is updated to 5s.
    
    Co-authored-by: Oliver Gould <ver@buoyant.io>
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 095c1997a884838b7957517dd47c9156da600d28
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 26 10:24:57 2020 -0700

    Unify control plane client construction (#638)
    
    We construct three control plane clients. All of the clients are
    basically the same (at least with regard to the stack/configuration).
    Rather than duplicate this logic throughout the code, we can unify it in
    the `control` module (hiding the details of how the client is built).
    
    This change modifies how the OpenCensus collector client is
    instantiated. The `SpanExporter` no longer constructs a new client each
    time it wishes to initiate a stream, opting to just clone a single
    client instead.
    
    This change also fixes reconnect logic for these clients. When the
    control client balancer was introduced, the reconnect layer incorrectly
    wrapped the balancer (instead of the endpoint). This has been corrected.

commit 6962794b1ef3e0d17a6ece16e581bffb1dda4060
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Wed Aug 26 03:58:06 2020 +0300

    Load balance requests to the control plane (#594)
    
    Control plane clients only establish a single connection using the
    service's load balancer IP. This presents problems in the face of pod
    or node failure.
    
    This change modifies these clients to balance requests across all
    available control plane pods. The load balancer is configured by
    resolving SRV records to find each pod endpoint. If SRV records are
    not present, the client reverts to A-record lookup (as it did previously).

commit e6beab70f9a75316bac6220551a0a842480a0795
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 25 08:26:05 2020 -0700

    dns: Run DNS resolutions on the main runtime (#637)
    
    DNS resolutions are run on the admin runtime. This requires an
    unnecessary layer of indirection around the resolver, including an MPSC.
    
    Now that we allow the main runtime to use more than one thread, it's
    preferable to do this discovery on the main runtime and we can simplify
    the implementation.

commit fc7ae2ddbee28cc3f27d7220e3feaf1bfc9053a8
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Aug 24 14:55:11 2020 -0700

    test: replace `net2` dependency with `socket2` (#635)
    
    The proxy's integration tests depend on the `net2` crate, which has been
    deprecated and replaced by `socket2`. Since `net2` is no longer actively
    maintained, `cargo audit` will warn us about it, so we should replace it
    with `socket2`.
    
    While I was making this change, I was curious why we were manually
    constructing and binding these sockets at all, rather than just using
    `tokio::net::TcpListener::bind`. After some archaeology, I determined
    that this was added in linkerd/linkerd2#952, which added a test that
    requires a delay between when a socket is _bound_ and when it starts
    _listening_. `tokio::net::TcpListener::bind` (as well as the `std::net`
    version) perform these operations together. Since this wasn't obvious
    from the test code, I went ahead and moved the new `socket2` version of
    this into a pair of functions, with comments explaining why we didn't
    just use `tokio::net`.
    
    Fixes linkerd/linkerd2#4891

commit 487e85ec8b8005642d695f5e1f2090d37e77166d
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 24 07:53:25 2020 -0700

    resolve: Eagerly fail resolutions (#634)
    
    In 591191c6, the initial resolution was moved into the stream. This
    prevents the initial future from failing with an error when the control
    plane fails eagerly (as is the case with InvalidArgument errors).
    
    To preserve the eager failure, the stream is not returned until an
    initial resolution has been completed.
    
    This allows us to remove code that worked around a tonic bug.

commit 692abb82890b6ab54db2330793b56e5a56d2ba0b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 24 07:29:54 2020 -0700

    resolve: Add a Reset state (#633)
    
    The recovery layer needs to maintain its own cache for reconcilation (in
    addition to the other cache layers we keep). This caching can be
    eliminated by introducing a resolve::Update::Reset state that implicitly
    removes all endpoints not present in the endpoint set.

commit 9a21a1e9006ba518548c2f9e9964363304168008
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 20 15:34:13 2020 -0700

    Decouple discovery buffering from endpoint conversion (#631)
    
    The discovery layer handles both building a service for each discovered
    endpoint, as well as a buffer that fails when the service is not polled
    (i.e. because it has been leaked somehow).
    
    This coupling doesn't match other use cases though when, for instance,
    the client may not be used frequently, as is the case for
    proxy-to-control-plane communication.
    
    This change decouples these layers so that the buffering is decoupled
    from endpoint-service construction.

commit 591191c668a288b35336f804fcc82b4fd0d7d4c0
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu Aug 20 21:20:11 2020 +0300

    Move resolve api to async-stream (#599)
    
    Now that the resolution API uses a `Stream`, we can use the
    `try_stream` macro to simplify its implementations.

commit 6d58ee70b79a930301f604e5b7977b1c15f49975
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Aug 19 14:47:48 2020 -0700

    profiles: perform profile resolution for IP addresses (#626)
    
    linkerd/linkerd2#3916 added support for resolving service profiles for
    IP addresses to the Destination service. This branch updates the proxy's
    profiles client to look up profiles for IP addresses, rather than always
    rejecting addresses that are IPs rather than DNS names.
    
    Similarly to the Destination service-discovery client, a new
    `LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS` enviroment variable is
    used to configure a list of subnets to match which IPs the proxy will
    look up profiles for. By default, this is empty. Since the logic for
    filtering requests to a service based on IPs and DNS prefixes is now
    identical between the profile and destination clients, I factored it out
    into a new layer that's used for both.
    
    Fixes linkerd/linkerd2#4877
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 170afe874a6647509c7670a31d1b1adb30366627
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 18 16:41:00 2020 -0700

    Re-enable outbound timeout test (#630)
    
    The outbound dispatch timeout test was disabled. It's worth testing.

commit da1446677d2eac28c57a25784fcb8f32ba010702
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 18 16:32:49 2020 -0700

    Split orig-proto tests out of discovery tests (#629)
    
    About 18 months ago, we removed support for a variety of headers that
    could potentially leak information to external clients and services; but
    the implementation and tests remain in place.
    
    In the interest of removing cruft, this change removes these unused
    modules (which are not compiled, and may therefore not even compile
    today). These headers are: `l5d-client-id`, `l5d-server-id`, and
    `l5d-remote-ip`.

commit e06221401931d355d0b757d5994d6a7b97ce9181
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 18 15:53:52 2020 -0700

    Remove scrubbing for unused headers (#628)
    
    About 18 months ago, we removed support for a variety of headers that
    could potentially leak information to external clients and services; but
    the implementation and tests remain in place.
    
    In the interest of removing cruft, this change removes these unused
    modules (which are not compiled, and may therefore not even compile
    today). These headers are: `l5d-client-id`, `l5d-server-id`, and
    `l5d-remote-ip`.

commit 162ff8f19f96b26d90b60f15f372143da0e637ef
Author: Raphael Taylor-Davies <1781103+tustvold@users.noreply.github.com>
Date:   Tue Aug 18 15:42:39 2020 +0100

    Wait for proxy thread to terminate in integration tests (#625)
    
    Signed-off-by: Raphael Taylor-Davies <r.taylordavies@googlemail.com>

commit 8a085d5d66d08cfc77626be6f9b1d89f6dde7ecd
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Mon Aug 17 15:41:34 2020 -0700

    Add build arg for skipping identity wrapper (#624)
    
    ## Motivation
    
    The proxy identity-initializing wrapper is responsible for generating a CSR and
    key for the proxy upon startup. These files (located in `end-entity/`) are used
    by the proxy for establishing identity.
    
    When mocking identity, we'd like to be able to provide a pre-generated CSR and
    key so that we can expect certain certificates in the Signed certificate
    request.
    
    Therefore, when building a proxy to be used with mock identity there should be a
    way to remove this wrapper so that the identity files are not overwritten.
    
    ## Solution
    
    Introduce a new `SKIP_IDENTITY_WRAPPER` build-arg that when set, removes the
    proxy identity-initializing script that is run at starup.
    
    The use of it below will build a proxy with the `mock-orig-dst` feature and skip
    identity generation.
    
    ```
    :; docker buildx build . --build-arg PROXY_FEATURES=mock-orig-dst --build-arg SKIP_IDENTITY_WRAPPER=1 --load --tag=kevinlbuoyant/l2-proxy:proxy-identity-v1
    ```
    
    I have confirmed this works with the changes in olix0r/l2-proxy-harness#2.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit b416639ddc0ec68d814f5d83474313735dda86eb
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Mon Aug 17 15:40:43 2020 -0700

    Update proxy-identity to edge-20.8.2 (#627)
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 5a3c5634282ef4e3184093f9deb9e15d9becb526
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu Aug 13 03:06:04 2020 +0300

    Remove `Resolution` trait (#606)
    
    The `Resolution` trait was initially introduce to ensure that the update stream
    is infinite; but this isn't actually desirable in a general way. It's fine for resolution
    streams to complete. Consumers (balancers) need to handle this.
    
    This change removes this trait, in favor of a simple `TryStream`. This makes it
    easier to use ready-made stream combinators and constructors.

commit 61932ae36aee8e22d8cc0fe9908366d73c2fe033
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Aug 11 10:49:34 2020 -0700

    trace: update tracing dependencies (#623)
    
    This branch makes the following dependency updates:
    ```
    :; cargo update -p tracing -p tracing-core -p tracing-subscriber -p tokio-trace
        Updating crates.io index
        Updating git repository `https://github.com/hawkw/tokio-trace`
        Updating regex v1.2.1 -> v1.3.9
        Updating regex-syntax v0.6.11 -> v0.6.18
        Updating thread_local v0.3.6 -> v1.0.1
        Updating tracing v0.1.18 -> v0.1.19
        Updating tracing-attributes v0.1.9 -> v0.1.10
        Updating tracing-core v0.1.12 -> v0.1.14
        Updating tracing-subscriber v0.2.10 -> v0.2.11
    ```
    
    In particular, the `tracing-core` update picks up upstream change
    tokio-rs/tracing#908, which fixes a bug where filtering would fail to
    take the fastest fast path in many cases. This time, there's a slight,
    but actually noticeable, latency reduction in the proxy benchmarks:
    
    ![Screenshot_20200808_183528](https://user-images.githubusercontent.com/2796466/89925622-8cbec780-dbb8-11ea-8a6f-587ab5075240.png)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a6a33e19154eb36437451bc0544b00d8c600aae2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Aug 5 15:40:29 2020 -0700

    tracing: add richer verbose spans to http clients (#622)
    
    This branch adds some DEBUG- and TRACE-level spans to HTTP clients and
    client connections. These are hidden by default but may be useful when
    debugging, or for generating tracing flamegraphs (as in PR #614).

commit a233e1af3e8c5121ae9bbe906e37aa20068e561f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 5 13:53:34 2020 -0700

    Introduce a SkipDetect layer to preempt detection (#620)
    
    This change introduces a new SkipDetect layer that configures whether
    protocol detection should be attempted. This module will later be
    replaced/augmented by discovery.
    
    Furthermore, this change eliminates the `Accept` trait. Instead of
    modeling the accept stack as a simple service whose response is a
    future, we know model the stack as, effectively, a
    `MakeService<Meta, TcpStream>`. This is intended to support caching of
    the service that handles the tcp stream (i.e. to hold discovery
    responses).
    
    Detection timeouts have been moved from a dedicated layer into the
    detection modules.

commit 20126df7feab2d68c93268b4aaef9d6168e92c35
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 5 13:35:08 2020 -0700

    Mark tap integration tests as flakey (#621)
    
    The `tap::grpc_headers_end` test is flakey in CI.

commit 4982937e4f080bae0c51fcff1eeef4d9b97bf17d
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 5 09:41:31 2020 -0700

    Move HTTP detection & server into linkerd2_proxy_http (#619)
    
    In preparation for upcoming simplifications, this moves the HTTP
    detection/serving logic into the linkerd2_proxy_http crate.

commit 67c7744008744c8f2ad781de83e82c4ce9fcaf5b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 5 09:40:52 2020 -0700

    Make FailFast cloneable (#617)
    
    Currently, the FailFast middleware is not cloneable, as it maintains
    state including a timeout future.
    
    This change modifies FailFast to implement Clone. When the module is
    cloned, it reverts to the open state.
    
    This has no impact on the current proxy, but when the stack gets cloned
    (as required by an upcoming change), this will have the effect that
    connections do not share failfast state. This seems better than adding a
    Lock or Buffer just to accomodate this.

commit 22e82e8657ca1adf0378de1865c69702672be69f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Aug 5 09:32:45 2020 -0700

    trace: tweak tracing & test support for the multithreaded runtime (#616)
    
    This branch makes a couple minor tweaks to improve tracing with the
    multithreaded Tokio runtime.
    
    It enables the option to print thread IDs when logging trace output,
    which should make it somewhat clearer when events occur on different
    threads.
    
    Additionally, there's currently an issue where traces are not logged
    from the proxy during integration tests. Only traces from the test
    support code are logged. This is because we are using `tracing`'s scoped
    thread-local dispatcher in the test proxy, so that each test can create
    its own subscriber. We set the test's subscriber as the default for the
    test proxy thread, but *not* as the global default for all threads.
    However, when the multithreaded runtime is enabled, the default runtime
    returned by `tokio::runtime::Runtime::new` is now a multithreaded
    runtime. Therefore, the test proxy runs on the runtime's worker threads,
    rather than the main thread spawned by the tests, and the dispatcher is
    not set for the worker threads.
    
    This branch fixes that issue by explicitly using the basic (single
    threaded) scheduler when creating the test proxy. This should
    (hopefully) also improve test flakiness a bit by not spawning a whole
    bunch of workers.

commit 0603e14cb14154b450fac65309024880ec3c1650
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 5 09:25:45 2020 -0700

    stack: Add NewService::into_make_service (#618)
    
    This change adds a utility for casting a NewService into a MakeService.

commit 342ab79f85194b6ab5b5ece4adccaf89912457bf
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Aug 4 15:31:20 2020 -0700

    trace: roll `tracing` and `tracing-subscriber` dependencies (#615)
    
    This picks up upstream changes tokio-rs/tracing#853,
    tokio-rs/tracing#868, and tokio-rs/tracing#869 which improve performance
    in some use cases. The overhead removed by these changes may already be
    amortized enough in the proxy that it's not a problem, but it seems
    worth picking up regardless.
    
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit d5fe0e6d647872e80c3124f660de898d12b2e176
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jul 31 16:54:31 2020 -0700

    admin: add an endpoint to dump spawned Tokio tasks (#595)
    
    ## Motivation
    
    When debugging proxy issues, it can be useful to inspect the list of
    currently spawned Tokio tasks and their states. This can be used
    similarly to the thread or coroutine dumps provided by other languages'
    runtimes.
    
    ## Solution
    
    This branch adds a new endpoint to the proxy's admin server, `/tasks`,
    that returns a dump of all tasks currently spawned on the Tokio runtime,
    using the new Tracing instrumentation added in tokio-rs/tokio#2655, and
    a work-in-progress [`tokio-trace`] crate that provides Tokio-specific
    Tracing layers.
    
    Currently, the `/tasks` admin endpoint records the following information
    about each task:
    
    * Whether it is a normal, local, or blocking task (not relevant to us
      currently, since Linkerd does not use local or blocking tasks...but
      we might eventually!)
    * Whether the task is active (currently being polled) or idle (waiting
      to be polled)
    * The type of the future that was spawned
    * The Tracing span context from which the task was spawned
    * The total number of times the task has been polled
    * Timing statistics about the task, including:
      - The time in nanoseconds between when the task was spawned and when
        it was first polled (essentially, measuring the Tokio scheduler's
        latency)
      - The total time in nanoseconds the task has existed
      - The task's _busy time_ in nanoseconds (time it was actively being
        polled)
      - The tasks _idle time_ in nanoseconds (time it was _not_ being
        polled)
    
    In the future, Tokio will likely expose additional Tracing information,
    which we'll be able to collect as well.
    
    The task dump can be accessed either as an HTML table or as JSON. JSON
    is returned if the request has an `Accept: application/json` header, or
    whenever the path `/tasks.json` is requested; otherwise, the data is
    rendered as an HTML table. Like the `/proxy-log-level` endpoint, access
    is denied to requests coming from sources other than localhost, to help
    restrict access to authorized users (since a high volume of requests for
    task dumps could be used to starve the proxy).
    
    Example JSON output (in Firefox Dev Edition's extremely nice GUI
    JSON viewer):
    
    ![Screenshot_20200715_121938](https://user-images.githubusercontent.com/2796466/87598059-b9f68380-c6a7-11ea-8f21-842b57793baa.png)
    
    Zoomed in on the timing data for a single task:
    ![Screenshot_20200715_122047](https://user-images.githubusercontent.com/2796466/87598089-c4b11880-c6a7-11ea-93ac-895f7ecee0f0.png)
    
    And HTML:
    
    ![Screenshot_20200715_143155](https://user-images.githubusercontent.com/2796466/87598414-fe821f00-c6a7-11ea-93b8-d18e4837346c.png)
    
    
    Because the task data is generated from Tracing spans emitted by Tokio,
    the task spans must be enabled for it to be used. This can be done by
    setting a trace filter that enables the `trace` level for the target
    `tokio::task`, e.g.:
    ```
    tokio::task=trace
    ```
    or
    ```
    tokio=trace
    ```
    
    ## Notes
    
    * This branch depends on unreleased code from upstream, including a
      Tokio change that has merged to master but not been published, and my
      unreleased work-in-progress [`tokio-trace`] crate. Therefore, I've
      pinned these upstreams to fixed Git SHAs, to guard against
      dependencies changing under us unexpectedly.
    * I considered requiring a build-time feature flag to enable this
      feature, the way we do for the mock SO_ORIG_DST implementation for
      testing. However, this would make it harder to use task tracking to
      debug issues in proxies not built with the flag. I'm happy to change
      this code to be feature flagged if we think that's the right approach.
    
    [`tokio-trace`]: https://github.com/hawkw/tokio-trace
    
    Closes linkerd/linkerd2#3803
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c234a92303648f4cf95d2b1250c60797654bdb1e
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 31 12:57:45 2020 -0700

    Add `multicore` to default features (#612)
    
    We don't have any blockers to using the threaded runtime by default.
    This change adds the `multicore` feature flag to the default feature
    list.
    
    It also modifies the threaded runtime initialization to use all
    available cores.
    
    The thread names have been changed from `linkerd2-proxy-worker` to just
    `proxy`, which is more consistent with the `admin` thread name. This
    should be unambiguous in the context of the process.

commit 935b65d1203acce9515014fbb6785825d300bcfd
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 30 22:44:38 2020 -0700

    Add a `multicore` feature flag (#611)
    
    This branch enables feature-flagged support for using Tokio's
    multithreaded runtime when the proxy is given more than two CPU cores to
    run on. The proxy's understanding of the system's number of CPUs
    reflects cgroups limits, so docker CPU limits are taken into
    consideration.
    
    If only a single core is available to run a worker on, we will construct
    Tokio's basic_scheduler, rather than a threaded_scheduler with a
    single worker thread. This is because there is some overhead introduced
    by the threaded scheduler, which results in worse performance when only
    1 core is available.
    
    Finally, a bug in the handle time metrics layer results in a deadlock
    when used with the multithreaded runtime. Therefore, I've disabled this
    metric for now --- my understanding is that nothing consumes it at the
    moment. If it's needed, we can fix the bug and put it back.

commit 51cc0b17c09e57d57fb6b3650cdebda0f0c8449a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 29 16:45:20 2020 -0700

    Simplify proxy::Server as ServeHttp (#608)
    
    The `proxy::Server` type used to handle all protocol detection, but now
    it really only handles initializing HTTP services.
    
    This change extracts server-transport instrumentation into a distinct
    stack layer to decouple this logic from the server implementation.
    
    The server also now requires that response bodies are boxed to eliminate
    the need for a PhantomData.

commit 9d351b6ca8b4ffa7dcb59f91550d9396b7dd6181
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jul 28 10:31:50 2020 -0700

    Move metrics::Io to io::SensorIo (#610)
    
    This change decouples the I/O stream wrapper from the metrics
    implementation so that it can implement the Io trait (so that it can be
    boxed).

commit eee08f995cd8772f45fa3013cd115d4a8621bf25
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jul 27 17:31:08 2020 -0700

    Move tls::accept to async/await (#607)
    
    The `tls::accept` module can be simplified by moving to async/await.
    This presents a few opportunities for improvement:
    
    1. The recently-introduced `Detect` trait is used. This sets up further
       changes to the accept logic, decoupling protocol detection from the
       `Accept` stack/type.
    2. The `tls::ReasonForNoIdentity` type has been removed, as it provided
       no value; and the `tls::ReasonForNoPeerName` has been updated with
       additional states.
    3. We now avoid having to use `PrefixedIo` in most cases by using
       `TcpStream::peek` with a smaller buffer. The prior behavior is
       retained as a fallback in case peek doesn't return enough data.
    
    This comes at the cost of ~2 additional Boxes per connection; but these
    will probably be shaved off in a follow-up as the detection logic
    becomes more flexible/dynamic.

commit e48c8d3d81121cb2f8e04654a6cf2497d8820fee
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Fri Jul 24 09:19:40 2020 -0700

    Add proxy_build_info metric (#600)
    
    ## Why
    
    Closes linkerd/linkerd2#3424
    
    ## What
    
    A new `proxy_build_info` metric is introduced that contains the following
    fields:
    - `git_branch`: The branch that the proxy was built on
    - `git_version`: The version of the proxy. This is the output of `git describe`
      and finds the most recent tag that is reachable from the commit.
    - `rust_version`: The rust version used to build the proxy
    
    This metric is a gauge that always has a value of `1`. The reasoning is
    described [here](https://www.robustperception.io/exposing-the-software-version-to-prometheus).
    
    The fields reflect those of the `prometheus_build_info` discussed in the link
    above.
    
    ```bash
    ❯ linkerd metrics -n linkerd pods/linkerd-tap-5f6565cfc5-56q9r
    ..
    # HELP proxy_build_info Proxy build info
    # TYPE proxy_build_info gauge
    proxy_build_info{git_branch="kleimkuhler/build-info",git_version="release/v2.104.1-11-gea34a589",rust_version="rustc 1.44.1 (c7087fe00 2020-06-17)",} 1
    ```
    
    ## How
    
    The `.git/` directory is now copied into the docker container when building so
    that the `build.rs` file being introduced can reference the git history to find
    the most recent tag and populate the `GIT_BRANCH` and `GIT_VERSION` environment
    variables at compile time.
    
    ### Labels
    
    I considered a `git_release` and `git_revision` tag instead of the single
    `git_version`.
    
    `git_release` would be the most recent tag reachable from the commit, and
    `git_revision` would be the full commit SHA.
    
    I chose the output of `git describe` instead because it includes both the tag
    and short SHA as well as how many additional commits have occurred on top of the
    tag.
    
    I think this makes it a little easier as a user to see that the proxy build
    version is the `kleimkuhler/build-info` branch, which is `1` commit from
    `release/v2.104.1` with the SHA starting with `1ee7452f`:
    
    ```bash
    ❯ git describe
    release/v2.104.1-1-g1ee7452f
    ```
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit f37e3ff1f6c9864500aae33ea82bd05bbd0abc76
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 23 11:32:09 2020 -0700

    remove git deps on hyper and h2 (#596)
    
    The versions we were waiting for (`hyper` 0.13.7 and `h2` 0.2.6) have
    now been released, so we can remove the patches and Git dependencies :D

commit 757c4e0998fdda461d6215d96bcfcf901984b464
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 23 10:02:59 2020 -0700

    trace: update tracing-subscriber to 0.2.8; add spans to JSON (#597)
    
    This branch updates the `tracing-subscriber` crate to version 0.2.8,
    which adds support for serializing the complete span context with the
    JSON formatter, the way the text log subscriber does.
    
    Also, it includes @Pothulapati's change to print thread IDs, which will
    be useful for debugging the multithreaded runtime.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c7324de2262005597d6be397c41fa713f086b3e8
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jul 23 09:45:30 2020 -0700

    error: Make backoff streams infallible (#605)
    
    error::Recover's Backoff stream type is fallible, but only because
    this was required by the old API.
    
    This change makes the backoff stream infallible.

commit 077908964c4adfbbf80f1ec45ce6c4a79276ca62
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 23 08:57:53 2020 -0700

    ci: Run all builds on GitHub Actions (#604)
    
    For an unknown reason, a metrics integration test reliably fails when run
    on our docker build host. This failure cannot be reproduced, even when
    manually run via the docker build host.
    
    To unblock merges, this change removes the use of the remote docker
    build host, running all builds on GitHub Actions.

commit 95d950fddf8f46ccc4d0ba9dacdac62d1d66891b
Author: Ali Ariff <aliariff@users.noreply.github.com>
Date:   Tue Jul 14 01:04:03 2020 +0200

    Add ARM release artifacts (#593)
    
    This change modifies the release process to produce artifacts suffixed by
    the build architecture (amd64, arm, arm64).
    
    Signed-off-by: Ali Ariff <ali.ariff12@gmail.com>

commit 40e1a6224961878e1a2a3b48999f839888f6b599
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jul 9 08:08:52 2020 -0700

    Add compile-time support for mimalloc (#592)
    
    Microsoft's `mimalloc` is a general purpose allocator with excellent
    performance characteristics and, furthermore, it implements defensive
    security features to protect against heap vulnerabilities.  See
    https://github.com/microsoft/mimalloc.
    
    In initial tests, it appears that it may improve latency at the cost of
    ~20% memory overhead.
    
    This change primarily enables further testing, since it doesn't seem
    worth taking the memory overhead at this point.

commit 834942d6249d897b0ebebe9cc6b7315f3bedef4c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jul 8 10:54:03 2020 -0700

    opencensus: drive rsp future to establish conn (#588)
    
    In the `futures` 0.1 version of the OpenCensus module, the `tower-grpc`
    response future for the client-streaming RPC was never polled, because
    we did not need the server response for that RPC. At the time, this was
    fine, as `tower-grpc` still established the connection and ensured
    messages were sent to the server. However, after updating to `tonic`,
    this was no longer the case --- the response future is now responsible
    for establishing the connection. This means spans are no longer sent to
    the OpenCensus collector.
    
    Due to an issue where the cloud integration tests were silently failing
    to run, we missed this regression.
    
    This PR fixes the regression by ensuring that we drive the response
    future.
    
    I'd like to rewrite this code to use async-await rather than the manual
    state machine, but this change fixes the regression, so I thought I'd go
    ahead and open a PR, and refactor in a separate branch.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 67088e52056e04e1e2653005bceeafcc4d763757
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Tue Jul 7 21:20:12 2020 -0700

    Simplify tap server (#582)
    
    ## Description
    
    Remove the Tap daemon that is responsible for handling service registrations and
    tap subscriptions.
    
    There is now a registry that contains all active taps.
    
    The tap service has access to this registry and it uses it to retrieve an
    updated set of active taps for every request. This set is used to determine
    whether the request should be tapped.
    
    New taps are added when the gRPC server receives an observe request. If the
    request is valid, the server adds the tap to the registry.
    
    Inactive taps are cleared by a background task. This background task is much
    simpler than the one before; it loops on an interval and checks whether each tap
    still has an actively used response stream, and if it has not reached its limit.
    
    ### Changes
    
    The primary change is the addition of the `Registry` in
    `linkerd/proxy/tap/src/registry.rs`.
    
    The tap service holds on to a `Registry` and uses the `taps_recv` field to get
    an updated list of taps for each request. The tap service is not responsible for
    adding or removing any taps from the registry.
    
    The gRPC service also holds on to a `Registry` and uses the `inner` field to
    register new taps with the registry. The field is locked giving access to an
    `Inner`. With this, the gRPC server can add new taps to the registry and then
    send updates with the `taps_send` sender.
    
    Neither the tap service or the gRPC is responsible for clearing out inactive
    taps. To solve this, we spawn a background task with the `async fn clean` method
    which loops on an interval and checks that each tap still has an actively used
    response stream.
    
    
    ### Traits
    
    The `tap::iface` module now only contains the `Tap`, `TapPayload`, and
    `TapResponse` traits. These are helpful for traits that are implemented in
    `tap::grpc`.
    
    The `Subscribe` and `Register` traits have been removed. Services no longer
    *register* with the tap server. Taps still do subscribe (now called `register`)
    with the registry, but it was only implemented by one object and did not
    simplify the implementation in terms of understanding or save on duplicated
    code.
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 022ecfce9aaeb190d683da851fdcaa572121fac0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 7 19:58:08 2020 -0700

    use native-tracing versions of hyper and h2 (#591)
    
    This branch patches the dependencies on hyper and h2 to unreleased
    revisions that use tracing natively to emit diagnostics, rather than
    log records (which we have to consume through an adapter layer).
    Native tracing offers a small but noticeable performance improvement,
    which should become more pronounced when enabling more diagnostics.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit abc4f899152bdb8a784d145e11fdd9458ac890a0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 7 19:34:01 2020 -0700

    remove deprecated pin-project attribute (#590)
    
    The #[project] attribute is now deprecated.
    
    See https://github.com/taiki-e/pin-project/releases/tag/v0.4.21

commit a13433a8fef35f398a458d79ed8d693a0182a45a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 7 17:51:49 2020 -0700

    enable `parking_lot` locks in dependencies (#589)
    
    Tracing and Tokio both expose a feature flagged optional dependency on
    the parking_lot crate's Mutex and RwLock implementations rather
    than std's. Enabling this dependency causes these crates to use
    parking_lot internally with no externally visible API change.
    
    In microbenchmarks of Tokio's synchronization primitives, we've observed
    better performance with parking_lot vs std, and tend to recommend it
    in high-performance applications where the cost of another dependency is
    acceptable.
    
    This branch enables tokio and tracing's parking_lot features. I
    also removed a bonus dependency on a vintage Tokio version that we must
    have missed during the 0.2 update, as it was pulling an incompatible
    parking_lot version.

commit f8972084bc5d210808eb310ccac272d4ef7a75d9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jul 1 14:13:54 2020 -0700

    cache: replace Lock with Buffer (#587)
    
    The use of a buffer hides some of the type complexity of the inner
    service (all of the type complexity, after #586). However, Linkerd
    currently only uses buffers at the `Service` level, not at the
    `MakeService` level. Since `MakeService`/`NewService`s tend to be
    generic over both inner `MakeService` types _and_ over the produced
    `Service`s (as well as potentially two future types), they probably have
    much longer concrete types than `Service`s in most cases.
    
    As @olix0r suggested, we can replace the `Lock` that's currently used to
    ensure exclusive access to `Cache`s (which are at the `MakeService`)s
    with `Buffer`s. The `Lock` is currently essentially doing something
    quite similar to adding a `Buffer` anyway. Introducing buffers around
    all caches erases the inner type for everything layered around the
    cache, which should make overall type length much shorter.
    
    This seems to have a fairly noticeable impact on build time and memory
    use (see linkerd/linkerd2#4676). On my machine, running `make docker` on
    #586 gets SIGKILLed (presumably by the OOM killer) after 7m53s. After
    this change, `make docker` completes successfully after 1m44s.
    
    Also, the `linkerd2-lock` crate can be removed, as it was used only by
    `Cache`.
    
    To work around increased tail latencies when the buffer fills up, this
    branch also sets the default buffer capacity to be equal to the
    default concurrency limit, rather than 10. This is fine, since the buffer
    capacity isn't _actually_ what enforces a bound on proxy memory use.
    The spawned tasks waiting on a full buffer are still sitting on the Tokio
    executor, and it's actually the in flight limit that stops us from accepting
    any more requests when we have too many in flight.
    
    Depends on #586.
    Fixes linkerd/linkerd2#4676.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 89d7a30fd7342e56b3275d1f07f8f0e1320c55ce
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 30 11:51:16 2020 -0700

    Eliminate Bind & Listen traits (#584)
    
    We have some abstractions, like the `Bind` and `Listen` traits, that
    don't really serve a purpose. Each have only a single implementation in
    our codebase. And, furthermore, the `Listen` trait is better-represented
    as a `Stream` (so that we can use general tools with it).
    
    This change eliminates these traits and modifies the implementation to
    use `async-stream` to take advantage of `async/await` syntax. Similarly,
    the logic of `listen::Serve` is now directly implemented in the `serve`
    task. The `proxy::core::listen` module has been replaced by an `accept`
    module.
    
    All of this helps us cut down on unnecessary types and helps to
    consolidate logic (rather than having it spread across many crates).

commit 9f8b3fc1be9b915a5376bf80a8c5adca75f10a2b
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 30 11:50:30 2020 -0700

    buffer: Box the inner service's reponse future (#586)
    
    The buffer middleware is parameterized on the inner service's repsonse
    future, which "leaks" the inner service's type to the outer components
    (which slows down compilations).
    
    This changes the signature to instead be parameterized by the response
    type, boxing the inner service's response future to avoid exposing its
    type signature.

commit 23995e7fb6eae5ede81048bdf9e4f68f7e81c7a9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jun 30 11:41:40 2020 -0700

    update test controllers to std::future/Tonic; remove threads (#585)
    
    This branch updates the test support mock control plane components in
    `linkerd2-app-integration` to use `std::future`, Tonic, and Tokio 0.2.
    Rather than spawning a separate thread for each control plane componwnr
    as we did previously, they are now spawned as tasks on the main test
    thread's runtime. As discussed in #580, this _may_ make the tests
    slightly less flaky and/or slightly faster on CI.
    
    Closes linkerd/linkerd2#3963
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit e7b0530aa8ad5414ebeae098026d226adefe2299
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 29 11:22:54 2020 -0700

    Print build diagnostics in docker (#583)
    
    This change modifies the development dockerfile to wrap build commands
    with `/usr/bin/time -v` so that we get diagnostic information (like the
    RSS of the build process).

commit 13b5fd65da6999f1d3d4d166983af8d54034d6e4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 29 10:48:49 2020 -0700

    update test-support clients and servers to be natively async (#580)
    
    Currently, the test clients and servers in linkerd2-app-integration
    each run their own separate Tokio runtime on a background thread. This
    was done in order to allow writing the test code in a synchronous
    fashion, rather than using futures. Now, however, a majority of the
    tests already use async-await syntax, so we can run all this stuff on
    the same test runtime. This should reduce the number of threads in the
    tests significantly, which may decrease flakiness and possibly improve
    test performance a bit.
    
    This branch updates the test support servers and clients to run as tasks
    spawned on the main test runtime. It does not touch the test control
    plane (Destination and Identity services) as they still need to be
    updated to use Tonic and std::future.
    
    This does introduce one potential footgun that is worth noting: if a
    test server that makes assertions is spawned in the background, the
    JoinHandle for its task must be awaited. Otherwise, panics will not be
    propagated to the main test task, and the test can spuriously pass if
    the assertion fails.
    
    Signed-off-by: Eliza Weisman eliza@buoyant.io

commit 0d28d8f218d0e189e492f3730ce6eac3135607d8
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 25 09:43:44 2020 -0700

    fix InvalidProfileAddr not converting into DiscoveryRejected (#581)
    
    It looks like this error was commented out during the 0.2 update, when
    the code that emitted it was broken. It was uncommented in the
    `is_discovery_rejected` predicate, but not in the `From` impl for
    `DiscoveryError`. This branch fixes that.
    
    I am not sure if anything load-bearing depends on this conversion, but
    it should at least fix potentially incorrect logs.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1d9e9b354b3d00920d214e2b179c10edf64e96f1
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 23 15:26:36 2020 -0700

    Pin proxy-api at v0.1.13 (#579)

commit 7830d244467dc9206154da38944ffc709db849d1
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 23 14:22:39 2020 -0700

    Simplify protocol detection with async/await (#577)
    
    The protocol detection middleware is pretty verbose, including a manual
    future implementation that manages a complex set of state types.
    
    This can all be simplified with async/await (at the cost of ~2 boxes per
    connection).

commit 9eb2113802ee69dd8e1f6272bd80e0190eb9af4b
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 23 11:36:13 2020 -0700

    outbound: Split HTTP endpoint builder (#578)
    
    This change follows on the refactor in d7b86b01 by splitting the
    outbound HTTP endpoint stack into its own constructor in order to
    modularize the proxy stacks. The response body is boxed in order to hide
    the stack's details (with regard to metrics, tracing, etc).
    
    There is no functional change.

commit 2fc01d975e2662b77a86d614eba576d1d2060b6e
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jun 19 15:33:55 2020 -0700

    Update Rust to 1.44.1 (#576)
    
    Fixes backtrace behavior on macOS

commit 0b0d72774a973b2aac924efaff382a5912dfc579
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jun 19 14:57:50 2020 -0700

    Use async/await to simplify connection-accept task (#575)
    
    The `app::core::serve` provides a task that drives connections from a
    listener to an accept stack until a drain is signaled, at which point
    the task completes and no further connections are accepted.
    
    The implementation for this can be simplified by using newer async/await
    syntax. The `drain::Watch` API has been improved to support this.

commit 032f03dea731617e2acc6073b959780c7bac5d17
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 18 11:10:23 2020 -0700

    Update Rust to 1.44.0 (#574)
    
    Note that there are issues with backtraces on macOS in this release.
    We'll update to 1.44.1 when it's available.

commit eb52fd90c619a816769b08e2e5982620fa3a18c1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 17 17:48:46 2020 -0700

    integration: fix missing traces (#572)
    
    Currently, there are a couple of issues that prevent traces emitted by
    the proxy's integration tests from being reported correctly. Many of our
    tests begin with:
    
    ```rust
    let _ = trace_init();
    ```
    
    This doesn't _actually_ do what we want, for two reasons:
    
    * `trace_init` doesn't actually set a trace subscriber as the default,
      it just _constructs_ one,
    * `let _` drops the value _immediately_.
    
    So, this code is constructing a subscriber and then immediately dropping
    it, which does nothing.
    
    In practice, we mostly don't notice this, since the test support
    servers, clients, and proxy run in separate threads with their _own_
    trace subscribers, which are set up correctly, and very few of the tests
    themselves actually emit traces. So even though this does the wrong
    thing, everything basically works. However, if the dedicated test
    support threads are removed and the test support stuff moved to spawned
    tasks in the test functions, all the traces go away.
    
    This PR fixes that by making `trace_init` actually set a default
    subscriber, adding a new `trace_subscriber` function that just
    constructs the subscriber and level handle (which is necessary to run a
    test proxy), and changing the tests so they don't drop their guards
    until the test ends.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Kevin Leimkuhler <kevin@kleimkuhler.com>
    Co-authored-by: Oliver Gould <ver@buoyant.io>

commit 4535f79d3cccabe041a117f5bfff6623b8c8304b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 17 17:17:53 2020 -0700

    Update proxy-api dependencies (#573)
    
    Tracks the latest master's tonic upgrade. We'll pin a tagged version on
    release.

commit 7034dc19a8293c5ecd68f3028c274e7d4c673d53
Author: Joakim Roubert <joakim.roubert@axis.com>
Date:   Tue Jun 16 18:15:32 2020 +0200

    Makefile: Add shellcheck recipe (#555)
    
    Signed-off-by: Joakim Roubert <joakim.roubert@axis.com>

commit c2b6d6f0493bf7a8cf1a1aeee0d528f4019d3f5b
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 16 08:51:24 2020 -0700

    Upgrade tokio-rustls & webpki. (#570)
    
    Now that we're on tokio-0.2, we can upgrade tokio-rustls.
    
    I've moved an updated webpki fork into the linkerd organization.

commit ef7e1258aedfc8c7d461df7c704f5e71a7128280
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 16 12:43:16 2020 -0700

    Change docs references from "master" to "main" (#571)

commit 1b3e899efad2ad4ee471c5b49482437e7a325bde
Author: Naseem <naseem@transit.app>
Date:   Tue Jun 16 00:00:31 2020 -0400

    Support LINKERD_PROXY_LOG_FORMAT=json (#500)
    
    This change adds an environment variable to configure JSON log formatting.
    
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>
    Signed-off-by: Naseem <naseem@transit.app>

commit 0070fcf628e6bcd03b690202e2e1b89b220ff2a9
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 15 18:56:07 2020 -0700

    Prune unused dependencies (#569)
    
    Following the tokio-0.2 upgrade, some crates have unused dependencies
    and others have missing compile options needed to compile the crate
    individually. This change fixes both of these issues, and removes the
    unused `box` crate.

commit c579f42a4b6f5dd0f73ffce419462052c5045e4a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 15 17:17:20 2020 -0700

    update the proxy to use std::future and Tokio 0.2 (#568)
    
    This branch updates the proxy codebase from `futures` 0.1 and Tokio 0.1
    to `std::future`, Tokio 0.2, and the associated ecosystem. Wherever I
    could, I've tried to keep this translation as mechanical as possible. In
    a few places, some significant structural changes and refactoring was
    necessary, largely due to stack pinning requirements, but there should
    be no behavioral changes. The new ecosystem does present opportunities
    for more significant refactoring, but we should probably do that in
    follow-up changes instead.
    
    All of this code has already been reviewed in a series of incremental
    PRs to the `master-tokio-0.2` branch. This branch's history can be read
    for details on the update process. In addition, all the proxy's
    integration tests have been updated and now pass against this branch,
    and performance testing indicates that there have been no significant
    changes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit e23d7a99c0695327db80b7d2144fd37d3b5b5c3a
Author: Joakim Roubert <joakim.roubert@axis.com>
Date:   Mon Jun 15 17:07:20 2020 +0200

    Fix shellcheck issues in shell scripts (#554)
    
    Signed-off-by: Joakim Roubert <joakim.roubert@axis.com>

commit b72f156eedf069adadc7522c59797d00f2a6a78e
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jun 12 12:53:32 2020 -0700

    Add a CODEOWNERS (#558)
    
    This CODEOWNERS change will ensure that proxy-maintainers are requested on all PRs.

commit b1b6b5376e200dc4d681ed78f2f2be26cc20c2ea
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 2 18:12:29 2020 -0700

    inbound: Do not cache gateway services (#549)
    
    When the inbound caches gateway services, it eagerly obtains an
    outbound service to cache. If the outbound service employs a traffic
    split, this inbound service is pinned to a specific leaf, and requests
    will never be routed to the other leaf.
    
    This change moves the gateway fallback to be outside all of the inbound
    caches, so that outbound splits work as intended.

commit be50252043caa17bd998d15be0df4ccc53247b1c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 1 14:38:41 2020 -0700

    Fail requests that loop through the gateway (#545)
    
    This change uses the gateway's `Forwarded` header to detect if the
    request has already transited through this gateway. This is
    determination is made by comparing ID strings, so this will prevent
    gateway daisy-chaining when clusters do not use distinct identity
    domains.

commit 0378f379c1ae9b23de293e55ae1b861390f78f87
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 1 14:14:41 2020 -0700

    gateway: Return errors instead of responses (#547)
    
    This ensures that error metrics are recorded and that logging is emitted
    uniformly. This also ensures that gRPC requests don't get HTTP error
    responses.

commit 8c98760e29c6999f7a6b75fbaaafb5abde000ad1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 1 09:48:52 2020 -0700

    gateway: Add a Forwarded header (#544)
    
    When the gateway forwards requests, it now adds a `Forwarded` header
    including the source identity, the local identity, and the destination
    authority.

commit 9a9fa33718dc3c612ac8108420d55d34e83e3816
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri May 29 16:42:08 2020 -0700

    Introduce a gateway between inbound and outbound (#540)
    
    When the proxy receives inbound requests without an original dst address
    (or with a original dst address matching the inbound listener), the
    proxy currently fails these requests.
    
    This change modifies the proxy to attempt to accept these requests and
    forward them back through the outbound router.
    
    The gateway requires that all requests are received over an mTLS-secured
    connection. It also refines the destination through DNS to determine the
    canonical-form name as well as an outbound original dst IP. All
    gatewayed destinations must have a suffix as set by the
    `LINKERD2_PROXY_INBOUND_GATEWAY_SUFFIXES` environment variable.
    
    All requests that do not meet these criteria are failed with a `403
    Forbidden` status.

commit d7b86b010b7e09b0b3db71836efb8f911e88ab87
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 27 12:30:03 2020 -0700

    app: Split inbound/outbound constructors into components (#533)
    
    This change does not change any functionality. It only restructures the
    inbound and outbound proxy modules so that the clients and servers can
    be instantiated separately. This will support gatewaying requests between
    the inbound and outbound proxy.

commit e38dd48b7d376e36c8d486e11209d2bbca1da01c
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 27 08:31:13 2020 -0700

    fallback: Unwrap errors recursively (#534)
    
    This change modifies the fallback layer to inspect error sources
    recursively to determine if the given error type is satisfied.
    
    A stack-helper is also added for this case.

commit 081a6d8c844d3a43fff2fc3d53718234f354b139
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 26 15:42:05 2020 -0700

    Test loop detection (#532)
    
    This change adds (flakey) tests for loop detection. The tests are flakey
    because they require static ports to work properly. (We cannot configure
    the original dst port to be the same as the interface port if the
    interface port is not known).

commit cb161a13d504b963f10ed386d08352b17b4fe501
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri May 22 16:17:05 2020 -0700

    Add loop detection to inbound & TCP forwarding (#527)
    
    e77fe181 introduced loop detection to the outbound HTTP proxy. This
    change extends this behavior to the inbound HTTP proxy and the TCP
    proxy for both inbound and outbound. This helps ensure malicious
    requests can't consume proxy resources.

commit e77fe181b9d867545792d8b51d17ada3a05df0af
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 21 18:44:26 2020 -0700

    outbound: Prevent loops (#525)
    
    This change modifies the outbound proxy to fail to build services
    targetting localhost:4140 (where 4140 is the outbound port). This
    prevents looping and will result in 502s.

commit fd5a6aabb10d5cfd20220c7e8647ee383c1f958b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 13 11:48:22 2020 -0700

    Add an `i/o` error label to http metrics (#512)
    
    This change modifies HTTP error-labeling to detect I/O errors
    and label them explicitly. Previously all I/O errors were reported as
    `unexpected`.
    
    Additionally, an `errno` label is included when possible.
    
    Fixes linkerd/linkerd2#4364

commit 0a8c546d4a14e028857a7933edecb20d718acc7f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 11 12:26:10 2020 -0700

    Buffer requests while the service is pending (#511)
    
    The buffer uses a watch to advertise readiness to consumers. This is
    intended to:
    
    1. Prevent the out service from becoming ready before the inner service
       has initialized.
    2. Surface errors to outer services' `poll_ready`.
    
    It, however, currently advertises when the inner service moves into
    pending, preventing requests from being admitted to the buffer, and then
    basically making consumers race to enter the buffer.
    
    This change also relaxes its use of the ready watch channel, especially
    to signal that the task should complete. Instead, the dispatch task
    completes as soon as all requests have been processed.

commit 4673e699d901b5e2d81d543b984d7db5db0a9e68
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Fri May 8 19:34:49 2020 +0300

    Add middleware that rejects connections with no identity (#507)
    
    Add middleware that rejects connections with no identity on specific ports
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 6f1dbc02f51de1d6366346948adf98c19d0a9337
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 6 18:06:38 2020 -0700

    release: Use arch-specific paths (#508)
    
    6166d328 update the Makefile to output binaries in architecture-specific
    target directories, but the release action was not updated to reflect
    this change.

commit 6166d3285b7fc8cd975c970f3fa6d4070d7bb828
Author: Erik Jansson <45871810+jaerik@users.noreply.github.com>
Date:   Wed May 6 16:37:28 2020 +0200

    make: Support CARGO_TARGET for multi-arch builds (#497)
    
    This change adds support for a `CARGO_TARGET` environment variable.
    When set, this value is passed to i.e. `cargo build --target` to support
    cross-compilation for multi-architecture builds.
    
    Signed-off-by: jaerik <erik.jansson@axis.com>
    Co-authored-by: Erik Jansson <erikja@axis.com>

commit 96984db6e8f4499f38b6406283dafe6b92876ae6
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 5 08:14:57 2020 -0700

    buffer: Move idle timeouts into the buffer (#502)
    
    The layered approach to idle timeouts does not behave well with the
    buffer. When the buffer's dispatch receives a request exactly as the
    timeout expires, it polls the inner service (and therefore the idle
    timeout) before polling for new requests, causing the requests to be
    failed with an idle error.
    
    This change removes the `idle` timeout layer, instead opting to do
    idle-based timeouts in the buffer directly. This allows us to poll for
    new requests before checking idleness, eliminating the possibility of
    this kind of data-race.
    
    Addresses linkerd/linkerd2#4274

commit 036f56b961218026d113c1f0f2204816d9b5acf7
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 4 17:34:32 2020 -0700

    inbound: Remove unnecessary buffer (#501)
    
    The inbound endpoint stack includes an unneeded buffer/idle/failfast
    stack. This stack is buffered where it is cached, so these layers are
    unnecessary.

commit ef0292a1b788a444fd91ba35ebc4bc4f8eaed897
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon May 4 07:49:01 2020 -0700

    Set a grpc-status of UNAVAILABLE only on io errors (#498)
    
    In #493, we opted to handle all hyper errors as `UNAVAILABLE` for gRPC
    messages.
    
    This change modifies the signature of `http_status` & `set_grpc_status`
    so that we can unwrap arbitrary inner errors via `Error::source`. This
    reduces some unnecessary special-casing and allows us to more-narrowly
    target IO errors.

commit 610309ebc240494426f9169000c46da9d5fe9647
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu Apr 30 20:45:48 2020 +0300

    Handle GRPC body errors (#493)
    
    When gRPC implementations encounter an underlying transport error, they
    surface the error via an `UNAVAILABLE` gRPC status code. Linkerd breaks this
    behavior by converting these errors to stream resets, which instead appear as
    an `UNKNOWN` error to applications.
    
    This change modifies the proxy's error handling logic to set the the correct gRPC
    status code when a stream fails with a hyper error, which should work more
    seamlessly with gRPC error handling. This status is only set when the request's
    content-type indicates the stream is sending gRPC messages.

commit c72c5f57da8af60cf89f57c2cc2c9a223cf15bd8
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Wed Apr 22 01:15:00 2020 +0300

    Use authority override from metadata (#458)
    
    The destination controller may set a per-endpoint `override_authority`
    field that sets a new `Host`/`:authority` value to be used on the
    outbound request.
    
    This change introduces an `override_authority` middleware that uses
    this metadata to modify outbound requests when an override is set.

commit b64e4ebc8aad4108d2ea0e9175e1bb5cb112728b
Author: Naseem <naseemkullah@gmail.com>
Date:   Fri Apr 17 16:49:13 2020 -0400

    Adjust metric description. (#484)
    
    The retryable HTTP responses that were not retries are only those with the skipped: no_budget label. Actual retries that occured fall under this metric category.
    
    Signed-off-by: Naseem <naseem@transit.app>

commit 9e9df8fff33e54db49a378b2e3ec68c1512e34b3
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Apr 17 11:40:13 2020 -0700

    Update to Rust 1.42.0 (#483)
    
    Also, modify update-rust-version.sh to operate on all Dockerfiles in the
    repo.

commit fb56712562c31c59b444feaf8cc16d689ce30b08
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 15 16:19:06 2020 -0700

    Undo hardcoded release version (#479)
    
    During testing, we set a hardcoded release version, but this was not
    undone.
    
    This fixes the release action by restoring the tag-derived version
    string.

commit 2044494d0c3968f06f05dd096cce7fc55d7ee182
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 15 15:52:52 2020 -0700

    Fix the checksec URL (#478)
    
    Fetch the raw script, not the HTML.

commit 1c3280bfddb3d1c8050bc11969f3f573cccd2693
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 15 15:07:34 2020 -0700

    Ensure that checksec is executable (#477)

commit 8d8f409284a500a41ab807c167f6b709db122e7a
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu Apr 16 00:04:40 2020 +0300

    Time out protocol detect futures (#464)
    
    When the proxy receives connections on ports on which protocol
    detection is not disabled, it holds the connection until the client has
    sent some data. This means that clients that send no data can consume
    proxy resources indefinitely and that the proxy provides no feedback to
    the application that it cannot handle the connection.
    
    This change uses the configured dispatch timeout to limit the amount of time
    a connection can wait for data to detect its protocol.
    
    This is accomplished by modifying the `Accept` trait so that its response type
    is a `Future` that is provided once protocol detection, etc have been completed.
    
    Fixes linkerd/linkerd2#4069

commit f1a89ef953c3ea58ac15147cf5e41c0c8fe16a97
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 15 09:54:06 2020 -0700

    Add checksec to the release process (#476)
    
    A recent [Twitter thread][mudge] suggested that tools like
    [`checksec`][checksec] be used to validate release binaries. Checksec
    reports whether modern security features like stack canaries are
    employed. Proxy builds appear to do pretty well out-of-the-box.
    
    This change introduces a checksec.sh wrapper that is used by the
    Makefile during packaging. A new _package_ github action is introduced
    to provide `checksec` and `jq` dependencies at runtime. (Note: the
    version of checksec provided by debian does not include JSON output, so
    it is instead fetched directly from GitHub).
    
    During an automated release, the generated checksec is compared to an
    expected set of values and, if a regression is detected, the release
    will fail.
    
    [mudge]: https://twitter.com/dotMudge/status/1249359519471341569
    [checksec]: https://github.com/slimm609/checksec.sh

commit 444174a1949d047460d2a96fefc06ae07239e7ef
Author: Joakim Roubert <joakim.roubert@axis.com>
Date:   Tue Apr 14 23:03:33 2020 +0200

    Makefile: Use STRIP variable with strip as default (#475)
    
    If we run make in a cross-compile environment where the strip binary we
    want to use is something else than strip, it is useful to have a STRIP
    variable in the Makefile. If STRIP is not set, the default value is the
    common strip.
    
    Signed-off-by: Joakim Roubert <joakim.roubert@axis.com>

commit d27b79cd7aa7feb1b7d6686d9d8b267d8f50f9b6
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 13 14:57:58 2020 -0700

    docker: Use buildkit for caching (#472)
    
    Our docker builds do not permit caching of dependencies or intermediate
    build artifacts. However, Docker's new (experimental) buildkit features
    add this functionality. I've been using this configuration locally for
    some time, and it seems generaly useful enough to promote (especially
    since this Dockerfile is only intended for development).
    
    This change also untroduces the `PROXY_FEATURES` build-arg so that the
    Dockerfile can be used to support profiling builds.
    
    Furthermore, the `update-rust-versions.sh` script has been updated to
    check versions and be more permissive about how it replaces versions in
    the Dockerfile.
    
    The docker CI build has been disabled until GitHub Actions has support
    for this Dockerfile format.

commit feed8302853be43f11d7e7f48e63f4ddcb51d632
Author: Alex Leong <alex@buoyant.io>
Date:   Mon Apr 13 10:48:51 2020 -0700

    Add liveness endpoint to admin server (#470)
    
    Relates to https://github.com/linkerd/linkerd2/issues/3984
    
    Add a `/live` endpoint to the admin server which always returns a 200 success.  This can be used for liveness checking.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 270d343bf5628820d6eabdb0a59a03329ab89717
Author: Tarun Pothulapati <tarunpothulapati@outlook.com>
Date:   Mon Apr 13 23:18:15 2020 +0530

    Add Labels from a path as oc-collector attributes (#463)
    
    This change adds support for a `LINKERD2_PROXY_TRACE_ATTRIBUTES_PATH`
    configuration that, when tracing is enabled, loads metadata (especially Kubernetes
    labels) to be emitted with traces.
    
    Fixes linkerd/linkerd2#4008

commit ebecd457a48a337a524091b792f9c6ba471b6270
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 2 13:23:43 2020 -0700

    inbound: Do not cache per-endpoint services (#469)
    
    When the inbound proxy serves many unique targets on a single port,
    requests may incorrectly timeout (especially, it seems, when the client
    is attempting to reconnect).
    
    This change creates an HTTP endpoint stack for each target (i.e.
    Authority). This means that requests to distinct targets will always be
    transported over distinct  localhost connections.
    
    This problem was reproducible via:
    
    ```sh
    for _ in $(seq 10) ; do
      for i in $(seq -w 100) ; do
        host="server-${i}.test.example.com"
        curl -sH "Host: $host" 127.0.0.1:4143 -w "$host\t%{http_code}\n"
      done
    done
    ```

commit 8c6bbbb60bb28c81b4579cf6ee4946b4de534b2e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 31 13:44:04 2020 -0700

    Restore the route_actual_response_total metric (#468)
    
    339efa8 incorrectly removed the route_actual metrics scope from the
    outbound stack. This change restores these metrics but omits latency
    buckets from export.
    
    Fixes linkerd/linkerd2#4215

commit fd3a4acd1950617164f2b7f48c30f409b54fe555
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 31 13:42:55 2020 -0700

    http-metrics: Make latency export optional (#467)
    
    We export raw histograms for all HTTP metrics layers; but in some cases
    these values are never consumed. This change modifies the http metrics
    `Report` type to support disabling export of latencies.
    
    This feature is not used yet but will be used in a follow-up.

commit 883e19913b99e2f2e774cd131084d8617cec4669
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 31 11:00:27 2020 -0700

    Add a `mock-orig-dst` feature flag (#466)
    
    The proxy code is generic over the strategy it uses for determining
    the original destination address for a given connection. In integration
    tests, the strategy is replaced with a configured version.
    
    The `mock-orig-dst` feature modifies the implementation to be
    swappable at compile-time via feature flag. This removes integration-
    test-specific test code, and makes it generally possible to start the
    proxy outside of Kubernetes (via the compile-time flag). When this
    feature is enabled, runtime configuration is required via a pair of new
    environment variables.
    
    There was an integration test that tested the proxy's behavior when
    an address could not be determined, but that test has been removed
    as that use case is not particularly important.
    
    To build a proxy in this mode, one runs:
    ```
    :; (cd linkerd2-proxy && cargo build --release --features=mock-orig-dst)
    ```

commit 643eba2d304a2423625ab6fe837baa857c4b4dd3
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Tue Mar 31 02:28:17 2020 +0300

    Update integration tests certs (#465)
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 956d596d3e43b6e929f19bc23f612d271e666ef5
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Wed Mar 25 16:58:38 2020 +0200

    Wire authority override coming from discovery (#462)
    
    Wire authority override coming from discovery
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit adf8e646d6e43c3dc7f2a03cf9c4509f02c3b7b1
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Mon Mar 23 20:14:56 2020 +0200

    Use strong_count instead of upgrade on weak Arcs in cache (#459)
    
    Use `strong_count` instead of trying to upgrade a `Weak` to determine eviction eligibility. At least in the case where we are not evicting, we swap a CAS loop and a few branches for a `SeqCst` load, which seems to be making a difference. Heare are the bench results.
    
    ```
    +++master+++
    test always_evict    ... bench:      22,313 ns/iter (+/- 1,882)
    test never_evict     ... bench:     116,827 ns/iter (+/- 4,593)
    test sometimes_evict ... bench:      71,082 ns/iter (+/- 2,954)
    
    
    +++this branch+++
    test always_evict    ... bench:      24,546 ns/iter (+/- 7,296)
    test never_evict     ... bench:      36,306 ns/iter (+/- 3,261)
    test sometimes_evict ... bench:      29,291 ns/iter (+/- 4,164)
    ```
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit ce981bde0834e2b1b9bf2153e072104d58a1fc04
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu Mar 19 19:51:08 2020 +0200

    Update test certificates (#460)
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 339efa8f5e0a42601014deebb0a9dc72c44b2130
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 10 12:06:11 2020 -0700

    cache: Let services self-evict (#456)
    
    This change modifies the `cache` crate to remove its background task
    which is responsible for tracking service use and evicting idle
    services.
    
    Now, the cache (1) has no capacity limit and (2) evicts services from
    the cache when they drop their underlying service.
    
    This is accomplished by modifying the `CacheLayer` to accept a layer
    that is responsible for making the inner service shareable and for
    dropping its inner service when it should be considered defunct. This is
    accomplished by moving an `Arc<()>` into the inner stack and holding a
    `Weak<()>` reference to it in the cache module. Then, before a request
    is processed by the cache, it attempts to upgrade each cache entry and
    drops services that have dropped the inner service (holding the strong
    reference).

commit 52069015990cb07de6a142a3a7b55e90ff9cf701
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Mar 6 12:40:47 2020 -0800

    timeout: Introduce FailFast, Idle, and Probe middlewares (#452)
    
    This change introduces two new timeout middlewares: `idle` and
    `failfast`.
    
    `idle` causes the service to start failing if polled after being ready
    and unused for some timeout. This is intended to be driven by
    `probe-buffer`.
    
    `failfast` causes the service to become ready, failing requests, if the
    inner service does not become ready within a timeout.

commit 1cc1a81399e73348e29db470796b0dc617937ddd
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Mar 6 12:36:10 2020 -0800

    trace: update tracing-subscriber to 0.2.3 (#455)
    
    This picks up tokio-rs/tracing#624, which fixes linkerd/linkerd2#4138.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 01ef5ce2ce0442e520159e9be0a06d06a1cf7c71
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Mar 6 12:23:17 2020 -0800

    Introduce a backpressure-propagating buffer (#451)
    
    The tower buffer implementation uses the underlying channel for
    backpressure. This admits requests before the inner service becomes
    ready, and doesn't fully propagate error conditions.
    
    This replacement buffer implementation exposes readiness via a `Watch`.
    This prevents callers from sending requests when the inner service is
    not ready and allows service errors to be propagated reliably.  The
    buffer's background task drops the inner service as soon as it fails.
    
    The effect of this is that the buffer's channel is only used for
    requests that race to submit requests while the inner service is ready,
    and so it seems likely that they only need enough slots to satisfy the
    proxy's expected concurrency (i.e. in terms of cores).

commit e35f97a85063f836ad27273d8235548967875d4e
Author: cpretzer <cpretzer@users.noreply.github.com>
Date:   Thu Mar 5 08:13:28 2020 -0800

    outbound: Set logical address on endpoints (#454)
    
    Our metrics expect the `authority` to be set to the logical address, not
    the concrete address (i.e. when TrafficSplit may override the concrete
    destination). The concrete service is annotated via endpoint labels.

commit 871e56c9effb3d4ff5ac875a6f2d262d09561f87
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Mar 4 16:09:21 2020 -0800

    Overhaul buffering & caching to better-support backpressure (#453)
    
    This encompasses a number of related changes:
    
    * The `router` crate has been split up, decoupling its `cache` from its
      request-routing functionality. The `router` crate now _only_ handles
      request routing and not caching.
    * The `cache` crate now exposes a `MakeService<T, Req>` (rather than a
      `Service<Req>`, returning clones of each inner service).
    * `lock` is now used in place of a buffer in many places. This is done
      only to satisfy cloneability and will likely be changed (again) in a
      followup.
    * Service profiles no longer use routers/buffers internally. The
      concrete router picks an
    * Many middlewares have new Proxy implementations, some of which replace
      prior Service implementations (liek retry).
    * DNS refinement is now modled as a `Service` so it can use the same
      caching infrastructure.
    * Fallback is restructured to, for instance, avoid using a service
      profile stack when it cannot be created successfully.
    
    This change dramatically improves compilation times, likely due to
    simpler type constraints in the service profile middleware.

commit b61b044ead8025c9553d3a1fcd7dcf3db56b9a74
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 27 15:23:45 2020 -0800

    server: Simplify HTTP server type constraints (#450)
    
    `proxy::server` accepts a `MakeService` to build an HTTP service for
    each connection; but it doesn't properly drive the service before
    invoking it (which is a violation of the Service contract, though a
    benign one in this instance).
    
    This change uses `stack::NewService` to avoid these readiness concerns.
    We also relax unnecessary type constraints.

commit ad3e63a6b7ab2fbf299a393c271c9fe8e3f99ba5
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 27 15:22:49 2020 -0800

    Remove Clone requirement from controller clients (#449)
    
    `proxy::identity::certify::Daemon` unnecessarily requires that the gRPC
    client implements `Clone`, despite there being no such logical
    requirement in the implementation.
    
    This change remove the `Clone` requirement and the `Lock` from the
    identity client's stack. This change also removes the `Lock` from the
    `oc_collector`, as it has no `Clone` requirement.

commit b51497d3dde33ac9a28add2e043c0c2a345342b6
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 27 13:10:10 2020 -0800

    orig-proto: Be more flexible to stack placement (#444)
    
    The orig-proto Upgrade middleware unnecessarily captures a PhantomData;
    and does URI normalization even though we have another dedicated
    middleware for that.
    
    This change modifies orig-proto::Upgrade to use the stack configuration
    to determine whether the request's URI was absolute (these requests may
    not share a Hyper client, so they need to be on different stacks). This
    module no longer normalizes URIs.
    
    The inbound::orig_proto_downgrade module is removed, as it mostly
    boilerplate.

commit 100291d67cd2a9b7d6ff6934e9a8f21b509b1b12
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 26 17:30:34 2020 -0800

    app: Use locks with controller clients (#448)
    
    In preparation of using the Lock service-sharing strategy more broadly,
    this change modifies the identity and tracing collector to use `lock`
    for cloneability.
    
    Note that the lock may not yet be used with the destination client, due
    to Send/Sync issues.

commit a5c8d155e5040a72b9df7cf1c8efd3afa4c619d9
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 26 16:29:30 2020 -0800

    Cleanup transport::Connect & http::Client types (#443)
    
    This change:
    
    * Renames `HasPeerAddr` to be `ConnectAddr`. "Peer" is ambiguous, and
      not clear about the intended use;
    * Creates a named `transport::Connect` service type. This supports the
      `svc::connect` stack helper;
    * Removes unnecessary type constraints from various modules;
    * Simplifies naming & logic in `http::client`;
    * Removes redundant trace context information from `http::h2`;
    * Replaces inbound client TLS with a BoxedIo

commit 232d07ae5fe80d0925d60d6d43307d06dfffdd82
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 26 16:07:16 2020 -0800

    outbound: Relax type constraints in require_identity_on_endpoint (#447)
    
    Makes the naming uniform with newer stack modules and relaxes type
    constraints to avoid capturing body types in the Layer (i.e. so the
    layer can be used across stacks of varying body types).

commit 693b3fae29c4ce85723ac1d37a1881ca79275a60
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 26 15:11:24 2020 -0800

    addr: Avoid trailing dots in authorities (#446)
    
    When building an `Authority` value from a DNS name, we should avoid
    encoding trailing dots.

commit 7cd038bf6333db3af8750dd88777dbf209219e90
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 17:54:48 2020 -0800

    timeout: Do not synthesize HTTP response (#442)
    
    The `proxy::http::timeout` middleware currently creates HTTP responses
    when a timeout is encountered. Instead, we should allow the error to
    propagate through the stack as an error so that all synthesized
    responses happen in one place.
    
    This change means that we no longer annotate a `status_code` label in
    the `route_response_total` metric, though the `classification` and
    `error` labels remain unchanged.
    
    We can also avoid using a `tower::util::Either` by encoding the optional
    behavior within the implementation (cutting down on compile-time type
    bloat).

commit d8bd6515b4396ffd61ccb296cd27c3b8f5f06af9
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 16:01:53 2020 -0800

    stack: Introduce the Proxy trait (#441)
    
    The `stack::Proxy` trait models middlewares that may modify the request
    or response types but do not need to participate in the inner Service's
    readiness.
    
    This will be an important component of a new `service-profiles`
    implementation: each request route does not need an independent clone of
    the underlying concrete service (i.e., that it must drive to readiness
    independently). Instead, the profile router can be responsible for
    driving a single concrete router to readiness and invoke the ready
    service through the appropriate route's `Proxy`.
    
    Implementations will follow.

commit b85097cee2d98c51f037ea06aefb214ac8aba3bd
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 13:34:54 2020 -0800

    Split the `stack-tracing` crate from `app-core` (#440)
    
    The `app::core::trace::layer` module provided a middleware for
    instrumenting stacks with tracing. This is extremely useful for
    debugging/diagnostics, especially during development.
    
    This change moves the tracing middleware into its own subcrate in
    `stack/tracing` and moves `stack-metrics` into `stack/metrics`.

commit 8835375876a22edff3c06964c85e9c6deae9e7ab
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 13:13:55 2020 -0800

    trace-context: Remove unnecessary MakeService (#439)
    
    The `trace-context` middleware provides an unnecessary MakeService
    implementation.
    
    This change replaces the bespoke MakeService in favor of the
    `OnResponse` helper.

commit 3c6460924e8ec149d5c9097535cd0ce46177d4a7
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 12:13:33 2020 -0800

    integration: Make the test controller more realistic (#436)
    
    Many of the integration tests relied on `destination_and_close`; but
    the real controller doesn't work this way. Instead, it keeps response
    streams open indefinitely in non-error cases.
    
    This change modifies uses of the mock controller to behave more
    realistically. Some other improvements (logging, removing a
    potentially infinite loop, etc) have crept in here, too.

commit 160fb4d301ea8d1f2b7473a5a54a0b2950a4e82b
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 11:51:18 2020 -0800

    Generalize router::Make as stack::NewService (#435)
    
    The `router` crate provides a trait, `Make`, that supports immediate,
    infallible service creation. We've typically used a `pending` layer to
    modify `MakeService` instances as a `Make`.
    
    These needs are not really router-specific, though: many middlewares are
    infallible and immediate.
    
    This change extracts `router::Make` as `stack::NewService` and replaces
    the `pending` layer with `stack::new_service::FromMakeServiceLayer`.
    
    Several other superficial changes have been made:
    
    * The `stack::per_make` layer is now `stack::on_response`.
    * The `buffer` middleware no longer provides a `MakeService`
      implementation and is, instead, applied through `OnResponse`.
    * The unused `timeout::stack` is removed.
    * The `stack::layer::LayerExt` trait is removed, in favor of the `svc`
      builders.
    * The `fallback` crate is removed and the fallback middleware is within
      `stack.

commit 330e9af98bae0ae4a9567b5ed632fb5d4c3bef84
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 25 07:50:56 2020 -0800

    cleanup: Remove various cruft (#438)
    
    Cargo.toml was missing items for several subcrates.
    
    Some crates did not properly deny warnings.
    
    Removed unnecessary type constraints, an empty file, etc.

commit 4780c225573f43b12426511c86f97f6d057992b2
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 24 15:06:01 2020 -0800

    Upgrade to Rust 1.41 (#437)

commit 044ff123eff556089b30bf9037c6b6d8d0af572d
Author: Alex Leong <alex@buoyant.io>
Date:   Fri Feb 21 11:34:26 2020 -0800

    Increase inbound router capacity default to 10000 (#434)
    
    Even though we expect there to be only a small number of pod-local HTTP services, clients may address the pod by a wide variety of names. We increase the inbound router capacity so as to not fail requests when this is the case.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 5eddb5a7be5994a389882a5d91e582c52da6cffd
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 21 11:32:01 2020 -0800

    internal: Extract a service-profile crate (#433)
    
    Service profile logic is unnecessarily split up among several crates.
    This change centralizes it all in a `service-profiles` crate.
    
    While doing this, I've cleaned up various stale/unneeded dependencies in
    Cargos toml.
    
    No functional changes.

commit 57981e2203cb4345945dcbc2c6b9edc775548165
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 20 16:06:42 2020 -0800

    fallback: Operate on Services instead of Layers (#432)
    
    The fallback middleware currently operates by applying a primary layer
    to an underlying service and, if that primary service does not produce a
    result, the fallback layer is applied to the underlying service to
    produce a result.
    
    This change modifies the middleware to no longer require that the
    underlying service be shared by the primary and fallback layers.
    Instead, the middleware attempts to produce a result from the underlying
    service and, if that fails, the fallback service is used.
    
    This will allow the fallback middleware to be used more flexibly in
    upcoming changes.

commit edb1f52bd9f0de1bfa16f04663b990b43966fb94
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 19 13:05:47 2020 -0800

    lock: Generalize to protect a guarded value (#431)
    
    We used Tokio's Lock implementation in the router's cache
    implementation, though we know it can leak under contention.
    
    This change generalizes the Lock to return a guarded value (like Tokio's
    lock). This change simplifies the Lock's state management: the Lock may
    no longer hold a value, nor can it fail.
    
    The `lock::Service` implementation now holds a `Result<Service,
    ServiceError>` so that lock services may still broadcast the inner
    service's failure.

commit d6d94d5de41fa3ddee6188e0cfcea1753dc52ee8
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 19 12:59:48 2020 -0800

    http-box: Box HTTP payloads via middleware (#430)
    
    The previous `http::BoxedService` implementation (1) boxed the inner
    service, (2) boxed the service's errors, and (3) boxed the service's
    HTTP response payload type. However, sometimes it is necessary to box
    HTTP _request_ payload types; and other times it may not be
    necessary/desirable to box the service type when boxing a response
    payload.
    
    This change extracts a new `http-box` crate with HTTP-payload-boxing
    middlewares, and the prior general BoxService is moved to a dedicated
    `box` crate.

commit a5e168e930a65139260af982bbd8431f0d40b387
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Feb 19 11:34:29 2020 -0800

    profiling: add benchmark and profiling scripts (#406)
    
    * profiling: Benchmark and profiling scripts
    
    A benchmark/profiling script for local development
    or a CI helps to catch performance regressions early
    and find spots for optimization.
    
    The benchmark setup consists of a cargo test
    that reuses the test infrastructure to forward
    localhost connections. This test is skipped by
    default unless an env var is set.
    The benchmark load comes from a fortio server
    and client for HTTP/gRPC req/s latency measurement
    and from an iperf server and client for TCP throughput
    measurement.
    In addition to the fortio UI to inspect the benchmark
    data, the results are also stored to a summary text file
    which can be used to plot the difference of the summary
    results of, e.g., two git branches.
    
    The profiling setup is the same as above but also
    runs "perf" or "memory-profilier" to sample the
    call stacks at either runtime or on heap allocation
    calls. This requires a special debug build with
    optimizations, that can be generated with a build script.
    The results can be inspected as interactive flamegraph
    SVGs in the browser.
    
    Please follow the instructions in the profiling/README.md
    file on how the scripts are used.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Kai Lüke <pothos@users.noreply.github.com>

commit e2c3271bb286f0286f6b54ac8094f806fffec220
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 19 08:18:20 2020 -0800

    concurrency-limit: Share a limit across Services (#429)
    
    Tower's `ConcurrencyLimit` middleware instantiates a new semaphore for
    each service created by the layer. However, in an upcoming proxy change,
    I'd like to avoid having a single `Service` instance that all requests
    must flow through and, instead, wrap a service created for each
    connection. In order to enforce a global concurrency limit, the
    middleware needs to be changed to share a semaphore across all services
    created by the layer.
    
    This presents no functional change to how the concurrency limit is
    applied today.

commit f44d27343b946ad691262788543e60dc6014e86e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 18 14:54:36 2020 -0800

    Expose the number of service instances in the proxy (#428)
    
    When diagnosing issues, it can be difficult to reason about the states
    of the various caches in the proxy.
    
    This change introduces a set of `stack` metrics to help proxy developers
    diagnose issues. The metrics track stack creations, stack deletions, and
    the amount of time a given service is not available (via
    `stack_poll_total_ms`)
    
    ```
    :; kubectl exec  -n burn-http deploy/client-burst -c client -- curl -s localhost:4191/metrics |grep -e ^stack
    stack_create_total{direction="outbound",name="fallback.endpoint"} 0
    stack_create_total{direction="outbound",name="balance.endpoint"} 1
    stack_create_total{direction="outbound",name="logical.dst"} 1
    stack_create_total{direction="outbound",name="addr"} 1
    stack_create_total{direction="outbound",name="source"} 100
    stack_create_total{direction="inbound",name="endpoint"} 0
    stack_create_total{direction="inbound",name="route"} 0
    stack_create_total{direction="inbound",name="logical"} 0
    stack_create_total{direction="inbound",name="source"} 0
    stack_drop_total{direction="outbound",name="fallback.endpoint"} 0
    stack_drop_total{direction="outbound",name="balance.endpoint"} 0
    stack_drop_total{direction="outbound",name="logical.dst"} 0
    stack_drop_total{direction="outbound",name="addr"} 0
    stack_drop_total{direction="outbound",name="source"} 0
    stack_drop_total{direction="inbound",name="endpoint"} 0
    stack_drop_total{direction="inbound",name="route"} 0
    stack_drop_total{direction="inbound",name="logical"} 0
    stack_drop_total{direction="inbound",name="source"} 0
    stack_poll_total{direction="outbound",name="fallback.endpoint",ready="true"} 0
    stack_poll_total{direction="outbound",name="balance.endpoint",ready="true"} 70371
    stack_poll_total{direction="outbound",name="logical.dst",ready="true"} 23600
    stack_poll_total{direction="outbound",name="addr",ready="true"} 23600
    stack_poll_total{direction="outbound",name="source",ready="true"} 23600
    stack_poll_total{direction="inbound",name="endpoint",ready="true"} 0
    stack_poll_total{direction="inbound",name="route",ready="true"} 0
    stack_poll_total{direction="inbound",name="logical",ready="true"} 0
    stack_poll_total{direction="inbound",name="source",ready="true"} 0
    stack_poll_total{direction="outbound",name="fallback.endpoint",ready="false"} 0
    stack_poll_total{direction="outbound",name="balance.endpoint",ready="false"} 23175
    stack_poll_total{direction="outbound",name="logical.dst",ready="false"} 0
    stack_poll_total{direction="outbound",name="addr",ready="false"} 1
    stack_poll_total{direction="outbound",name="source",ready="false"} 0
    stack_poll_total{direction="inbound",name="endpoint",ready="false"} 0
    stack_poll_total{direction="inbound",name="route",ready="false"} 0
    stack_poll_total{direction="inbound",name="logical",ready="false"} 0
    stack_poll_total{direction="inbound",name="source",ready="false"} 0
    stack_poll_total{direction="outbound",name="fallback.endpoint",ready="error"} 0
    stack_poll_total{direction="outbound",name="balance.endpoint",ready="error"} 0
    stack_poll_total{direction="outbound",name="logical.dst",ready="error"} 0
    stack_poll_total{direction="outbound",name="addr",ready="error"} 0
    stack_poll_total{direction="outbound",name="source",ready="error"} 0
    stack_poll_total{direction="inbound",name="endpoint",ready="error"} 0
    stack_poll_total{direction="inbound",name="route",ready="error"} 0
    stack_poll_total{direction="inbound",name="logical",ready="error"} 0
    stack_poll_total{direction="inbound",name="source",ready="error"} 0
    stack_poll_total_ms{direction="outbound",name="fallback.endpoint"} 0
    stack_poll_total_ms{direction="outbound",name="balance.endpoint"} 40
    stack_poll_total_ms{direction="outbound",name="logical.dst"} 0
    stack_poll_total_ms{direction="outbound",name="addr"} 2
    stack_poll_total_ms{direction="outbound",name="source"} 0
    stack_poll_total_ms{direction="inbound",name="endpoint"} 0
    stack_poll_total_ms{direction="inbound",name="route"} 0
    stack_poll_total_ms{direction="inbound",name="logical"} 0
    stack_poll_total_ms{direction="inbound",name="source"} 0
    ```

commit d36f76e850c548dbf0c479ed105300db70a0b951
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 18 13:47:24 2020 -0800

    Add the request_errors_total metric (#417)
    
    The proxy handles errors by synthesizing responses; however, depending
    on where such an error occurs, it may not be recorded by a metrics
    layer.
    
    This change introduces an `request_errors_total` counter that records
    the number/kind of errors encountered. This is primarily intended for
    debugging and diagnostics.

commit b2d3ed8fbdd103ee32f9cbb006c80caaca47b537
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 17 13:54:19 2020 -0800

    Reimplement the Lock middleware with tokio::sync (#427)
    
    As described in tokio-rs/tokio#2237, the `tokio::sync::Semaphore` can
    hold unbounded memory, especially when the semaphor is being contested
    and consumers drop interest. Unfortunately, this use case is common in
    the proxy, especially when a destination service is unavailable and the
    proxy is timing out requests.
    
    This change reimplements the Lock middleware without using
    `tokio::sync::Semaphore`. This implementation is in some ways more
    naive and inefficient, but it appears to be better suited for the
    proxy's needs. Specifically, waiters are stored in a LIFO stack, which
    optimizes for minimizing latency. Under certain high-load scenarios,
    this Lock could be forced to grow its waiters set without cleaning up
    expired watchers. If this becomes a more serious concern, we could
    change the implementation to use a FIFO queue of waiters.

commit 45343271c9c7e5a8796c46a781353d2ccce11249
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Feb 17 10:08:56 2020 -0800

    trace: update `tracing-subscriber` dependency to 0.2.1 (#426)
    
    This release makes a number of significant performance improvements when
    filtering events emitted through the `log` compatibility layer (such as
    from `hyper` and `h2`). See tokio-rs/tracing#586 for details.
    
    Since these performance improvements apply to cases where a filter
    _disables_ an event, as well as to enabling events, this should improve
    the proxy's performance with the default log configuration, especially
    given that `h2` and `hyper` emit a _lot_ of `trace`-level logs in hot
    paths. Ignoring those logs should now have a much lower overhead.
    
    I'm going to do some benchmarking to quantify the performance
    improvement from this change, so I'll add benchmark results when my
    tests complete.
    
    In addition, 0.2.1 fixes a bug where `EnvFilter`'s filter selection
    differed from the `env_logger` behavior it was intended to emulate. If
    the most specific filter directive that applies to a given event did not
    enable that  event's level, filter selection would continue to try
    decreasingly-specific filters, and would only disable the event if
    **no** filters enabled it (see tokio-rs/tracing#512).
    
    In practice, this means that if you set a filter like
    
    ```
    LINKERD2_PROXY_LOG=warn,linkerd=debug,linkerd2_metrics=info
    ```
    
    in an attempt to disable the `debug`-level events in the
    `linkerd2_metrics` crate, they would still be enabled by the
    `linkerd=debug` directive.
    
    This is now fixed.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit d1f18a8e7d042f6a1f554bdde90f4c00ef13d537
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Feb 3 16:51:12 2020 -0800

    trace: update tracing-subscriber to 0.2.0-alpha.6 (#423)
    
    Version 0.0.7 of `sharded-slab` contains a bug where, when the `remove`
    method is called with the index of a slot that is not being accessed
    concurrently, the slot is emptied but **not** placed on the free list.
    This issue meant that, under `tracing-subscriber`'s usage pattern, where
    slab entries are almost always uncontended when reused, allocated slab
    pages are almost never reused, resulting in unbounded slab growth over
    time (i.e. a memory leak).
    
    This commit updates `tracing-subscriber`' to version 0.2.0-alpha.6,
    which in turn bumps the `sharded-slab` dependency to v0.0.8, which
    includes commit hawkw/sharded-slab@dfdd7ae. That commit fixes this bug.
    
    I've empirically verified that, after running `linkerd2-proxy` under
    load with a global `trace` filter that enables a *lot* of spans, heap
    usage remains stable, and the characteristic stair-step heap growth
    pattern of doubling slab allocations doesn't occur. This indicates that
    freed slots are actually being reused, and (once fully warmed up), the
    slab will only grow when the number of active spans in the system
    increases.
    
    ![mem_plot](https://user-images.githubusercontent.com/2796466/73581369-cd859900-443d-11ea-8522-abeace03d745.png)
    
    Closes linkerd/linkerd2#3998
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 52cc8694a316bc68a7b8419b0aaa7d87df52bfb1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Feb 3 14:35:16 2020 -0800

    app: initialize tracing prior to parsing env vars (#425)
    
    Before migrating from `env_logger` to `tracing`, the proxy set up
    logging before trying to read a configuration from the environment. This
    meant that any errors that occurred while parsing env vars could be
    logged at the error level and would be displayed to the user. Since we
    log these errors when they occur, the formatted output from the error
    types the parsing methods return is pretty minimal.
    
    When we switched to `tracing`, we moved the tracing initialization so
    that it occurs _after_ parsing the config from the env. This means that
    the event macros for config errors now occur when there is no `tracing`
    subscriber to collect and format them. Currently, if an env var is
    malformed, we see something like this:
    
    ```console
    $ LINKERD2_PROXY_DESTINATION_SVC_ADDR="bad" cargo run
        Finished dev [unoptimized] target(s) in 0.20s
         Running `target/debug/linkerd2-proxy`
    Invalid configuration: invalid environment variable
    ```
    
    This is not terribly helpful. More complex misconfigurations, like the
    requirement that if `LINKERD2_PROXY_IDENTITY_DISABLED` is set,
    `LINEKRD2_PROXY_TAP_DISABLED` must also be set, are very difficult to
    diagnose: For example:
    
    ```console
    $ LINKERD2_PROXY_DESTINATION_SVC_ADDR=127.0.0.1:42069 \
      LINKERD2_PROXY_IDENTITY_DISABLED=yes \
      cargo run
        Finished dev [unoptimized] target(s) in 0.41s
         Running `target/debug/linkerd2-proxy`
    Invalid configuration: invalid environment variable
    ```
    
    This commit moves the tracing initialization to occur *before* parsing
    the config. Now, any errors parsing the configuration from the
    environment are once again logged, and all is right in the world:
    
    ```console
    $ LINKERD2_PROXY_DESTINATION_SVC_ADDR="bad" cargo run
        Finished dev [unoptimized] target(s) in 0.55s
         Running `target/debug/linkerd2-proxy`
    ignoring ``: invalid filter directive
    [     0.47490772s] ERROR linkerd2_app::env: LINKERD2_PROXY_IDENTITY_DISABLED must be set or identity configuration must be specified.
    [     0.47704003s] ERROR linkerd2_app::env: Not a valid address: bad
    [     0.47743234s] ERROR linkerd2_app::env: LINKERD2_PROXY_DESTINATION_SVC_ADDR="bad" is not valid: AddrError(MissingPort)
    [     0.47803128s] ERROR linkerd2_app::env: LINKERD2_PROXY_TAP_SVC_NAME must be set or tap must be disabled
    Invalid configuration: invalid environment variable
    ```
    
    ```console
    $ LINKERD2_PROXY_DESTINATION_SVC_ADDR=127.0.0.1:42069 \
      LINKERD2_PROXY_IDENTITY_DISABLED=yes \
      cargo run
        Finished dev [unoptimized] target(s) in 0.24s
         Running `target/debug/linkerd2-proxy`
    ignoring ``: invalid filter directive
    [     0.48071794s] ERROR linkerd2_app::env: LINKERD2_PROXY_TAP_DISABLED must be set if identity is disabled
    Invalid configuration: invalid environment variable
    ```
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit cc06703edb709a803e7d2e748449918d9a8852fa
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 3 14:26:53 2020 -0800

    errors: Set correct HTTP version on responses (#424)
    
    When synthesizing error responses, all errors were sent with the default
    HTTP/1.1 response. This change ensures that the request's version is
    used when synthesizing a response or downgrading a response from an
    upgraded connection.

commit 9faff18c8a6ffabe92afcd2a47ab169b99baa1b0
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 31 13:25:43 2020 -0800

    router: Avoid large up-front allocations (#421)
    
    We initially opted to pre-allocate the delay queue to avoid allocation
    at runtime. However, practically, router capacities are _much_ higher
    than their typical usage; so we incur an extra ~1MB+ of allocation that
    will never really be used (for outbound routers).
    
    This change initializes the router's DelayQueue to be empty
    by default. The capacity will be increased at runtime as needed.

commit d9f7214d23cc348955166bb308c9199684c9ba28
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jan 31 13:12:24 2020 -0800

    discover: Warn on discovery error (#422)
    
    Users have reported encountering the "discovery task failed" error
    message. Unfortunately, the underlying error is only logged at the debug
    level, so we can't easily diagnose the underlying issue.
    
    This change raises the logging level of these errors to be WARN so that
    they are visible at the default logging levels.

commit 07667b8b80aa3cd36e0b3a7c71e3473dd1751890
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 30 16:06:06 2020 -0800

    trace: update `tracing-subscriber` to 0.2.0-alpha.4 (#418)
    
    This commit updates the proxy's `tracing-subscriber` dependency from
    0.1.4 to 0.2.0-alpha.4. This alpha includes tokio-rs/tracing#514, which
    fixes a pair of issues which prevent spans from being considered closed.
    One of these issues exists in 0.1.x as well.
    
    When spans are not considered closed, storage allocated for those spans'
    per-span data is not reused. Therefore, this issue results in a memory
    leak.
    
    Note that some span storage will still not appear to be
    _deallocated_ after this change, but that storage will be reused when
    spans are allowed to close correctly.
    
    In addition, I've updated the proxy's `trace` module to remove the
    custom formatter. This was used only to add Linkerd's custom logging
    contexts to `tracing-subscriber` logs, and as we no longer use the
    logging contexts, we can use `tracing-subscriber`'s default formatter.
    Now, we only override the timestamp format.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3567471f175e20698b8df65d504dc4a2445111c7
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 28 13:00:03 2020 -0800

    Set grpc-status headers on dispatch errors (#416)
    
    When the proxy encounters errors, it sets the HTTP response code.
    
    However, gRPC applications do not honor HTTP response codes and,
    instead, rely on the `grpc-status` response header to be set. Since the
    proxy has specialized gRPC support in some other places (namely
    metrics/classification), we should attempt to behave well with gRPC
    applications.
    
    This change extracts the `errors` module from app-core into a new
    `error-respond` crate, which exposes a simplified trait interface.
    `app::core::errors` now provides an implementation for these traits that
    is able to translate proxy-internal errors to gRPC status codes and
    messages.
    
    Fixes linkerd/linkerd2#3493

commit 175d6f3d8ab5e1fe156fd3fdb6e3c8c3e4ffb012
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jan 27 14:44:43 2020 -0800

    metrics: Make Counter & Gauge atomic (#415)
    
    The `Counter` and `Gauge` metrics currently hold `u64` values. This
    means that all uses need to gaurd access with a `Mutex`.
    
    By changing both types to hold an `AtomicU64`, we can avoid using locks
    when sharing counters between stacks.

commit b352624eba4d91168c334c766a604ef3451908b1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 23 15:17:52 2020 -0800

    patch `prost` 0.5 to pick up security fix (#414)
    
    This branch updates the proxy's `prost` dependency to a patched version
    of `prost` 0.5 that incorporates the cahnges in danburkert/prost#268.
    This patch fixes a security issue where a malicious protobuf message
    could be used to trigger a stack overflow.
    
    We are unfortunately unable to easily update to `prost` 0.6.1, which
    includes this fix, as 0.6 updates the `bytes` dependency to 0.5. The
    `tokio` 0.1 ecosystem that the proxy currently uses still depends on
    0.4, and the breaking changes in 0.5 are quite significant. Therefore,
    updating to `bytes` 0.5 would require a lot of fairly large changes to
    legacy versions of...pretty much everything (`tokio-io`, `tokio-buf`,
    `hyper`, `http-body`...). As we intend to update to `tokio` 0.2 in the
    near future, patching all these legacy dependencies is a bit of a waste
    of time. Therefore, I opted to backport the security fix to a compatible
    `prost` version instead.
    
    Closes linkerd/linkerd2#3963
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3f6b7a511767ff398c8501cb52e3d786401fe1b5
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 23 14:41:52 2020 -0800

    Actually update http to v0.1.21 (#413)
    
    Should have been in https://github.com/linkerd/linkerd2-proxy/commit/eb49e697b907f5be4da1376ea69ae9e198092d87

commit 5264573433ceea37f9d66c9ca95c458a604350a0
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 23 10:59:05 2020 -0800

    internal: Split retry, http-classify, and http-metrics (#409)
    
    The retry middleware is coupled to both the HTTP metrics infrastructure
    as well as the various request extensions that are required to route a
    request (i.e. via `TryClone`). Because of this, retry metrics are
    present for all HTTP metric scopes, even where retries can't apply.
    
    This change extracts several components from the `proxy-http`
    conglomerate subcrate:
    
    * `http-classify` includes classification traits and a middleware layer;
    * `http-metrics` wraps `tower::retry` with a `MakeService` configuration layer;
    * `retry` wraps `tower::retry` with a `MakeService` configuration layer;
    * `app-core` now handles retry-configuration
    
    Additionally, the `metrics::Metric` type is now generic over the metric
    name type so that prefixed names do not need to be formatted eagerly.
    
    The `route_actual_retry_skipped_total` counter has been replaced with a
    `route_retryable_total` counter. This new value is only present when
    retries are enabled on a route; and a `skipped` labels is added when
    retryability is ignored (i.e. due to budget being exhausted). This
    metric is not consumed by the control plane, so it should be safe to
    change.

commit eb49e697b907f5be4da1376ea69ae9e198092d87
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 23 10:33:38 2020 -0800

    Update http to v0.1.21 (#412)
    
    Fixes two potential Denial-of-Service issues:
    
        ID:       RUSTSEC-2019-0033
        Crate:    http
        Version:  0.1.16
        Date:     2019-11-16
        URL:      https://rustsec.org/advisories/RUSTSEC-2019-0033
        Title:    Integer Overflow in HeaderMap::reserve() can cause Denial of Service
        Solution:  upgrade to >= 0.1.20
    
        ID:       RUSTSEC-2019-0034
        Crate:    http
        Version:  0.1.16
        Date:     2019-11-16
        URL:      https://rustsec.org/advisories/RUSTSEC-2019-0034
        Title:    HeaderMap::Drain API is unsound
        Solution:  upgrade to >= 0.1.20

commit 4b0218682faac826aa67df523fcbda14427a81d2
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jan 23 09:34:54 2020 -0800

    Update to Rust 1.40 with new Cargo.lock format (#410)
    
    Cargo supports a [new merge-friendly V2 lockfile format][lock-v2].
    
    This change includes an updated `Cargo.lock` as output by the
    [cargo-lock][cargo-lock] utility.
    
    [lock-v2]: https://github.com/rust-lang/cargo/pull/7070
    [cargo-lock]: https://crates.io/crates/cargo-lock/4.0.1

commit 4bc7c67d324419a720463bda1b7d572afec5a61b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jan 22 14:03:06 2020 -0800

    internal: Introduce a locking middleware (#408)
    
    In order to make a service shareable, a locking middleware can provide
    mutually exclusive access without buffering requests.
    
    This middleware is currently unused, but will be used in followup
    changes.

commit 6d54bfc565c1d995845c41c124de397a00d0b64b
Author: Alex Leong <alex@buoyant.io>
Date:   Wed Jan 8 14:40:20 2020 -0800

    Remove clone in opencensus exporter to ensure task is notified (#405)
    
    In the opencensus span exporter, we call `poll_ready` on the span send channel sender to determine if there is capacity in this channel to send spans.  However, the channel sender that we `poll_ready` on is a clone of the original and the clone is dropped shortly after the call to `poll_ready`.  This can cause our interest registration to be dropped and the task may not be notified when capacity becomes available.
    
    The clone is unnecessarily and we can remove it.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 5d57d34647a2197bfec4a5856f87f9ae23f0accd
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jan 7 17:21:42 2020 -0800

    http: Use the endpoint type to inform URI normalization (#404)
    
    Currently, the `http::normalize_uri` middleware determines absolute-form
    authorities by reading request extensions. This hidden coupling makes
    changing things fairly difficult. Instead, we can use the target types,
    which already hold the relevant info, to determine the absolute-form
    authority if needed.

commit 588609becbe9372b4bb3cfa752630ed320f76d3b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 18 22:09:34 2019 +0000

    discover: Timeout stalled resolutions (#401)
    
    If a load balancer is not polled, i.e. because it is idle/leaked, its
    resolution stream can fill up, causing backpressure onto the destination
    controller client.
    
    This change implements a timeout for this scenario. When the resolution
    buffer is at capacity for a full idle timeout, the background resolution
    completes to free its resources.

commit de090176036abbd03930757d55714d2985ac9834
Author: Sergio C. Arteaga <tegioz@icloud.com>
Date:   Wed Dec 18 19:59:28 2019 +0100

    Classify some gRPC status codes as non-errors (#395)
    
    Linkerd classifies all gRPC status codes except `OK` as errors. This can negatively affect a gRPC server's success rate, even when it is only returning things like `NOT_FOUND` or `INVALID_ARGUMENT`.
    
    This change narrows down the list of gRPC status codes that are considered an error to:
    
    * UNKNOWN (2)
    * DEADLINE_EXCEEDED (4)
    * INTERNAL (13)
    * UNAVAILABLE (14)
    * DATA_LOSS (15)
    
    Fixes https://github.com/linkerd/linkerd2/issues/3729
    
    Signed-off-by: Sergio Castaño Arteaga <tegioz@icloud.com>

commit 2199e65ae076b6fa55a973fc4e385c4f166c9389
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 11 14:12:20 2019 -0800

    Configure the HTTP/2 connection window to 1MB (#400)
    
    Currently, the proxy uses the protocol defaults for HTTP/2 connection
    window size (64K). Because this is the same as the stream window size, a
    single stream can consume the entire connection window, stalling other
    streams.
    
    This change alters the default connection window to be 1MB, supporting
    up to 16 stalled streams.
    
    While we primarily care about this setting for client (response)
    receiver windows, it seems like a good thing to open the server
    (request) receiver window as well (and the configuration is not
    currently distinguishable).

commit 3d4c81335d1867718b2212087590108c25deb214
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Wed Dec 11 13:52:28 2019 -0800

    Remove default for destination lookup subnets (#399)
    
    Related to #3807, but serves as a more temporary fix until the proxy injector
    provides a way for this to be configured from an install.
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit 0a33b8cba910e26c98116faa3279b1a87e9817a9
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 10 16:01:01 2019 -0800

    app-core: Add `accept` context with peer addr (#398)
    
    The proxy's server does not instrument tracing contexts with the peer's
    connection metadata, causing hyper's server logs to be devoid of this
    helpful context.
    
    This change adds an _accept_ context that includes the peer's address.
    
    Fixes #3799

commit 62095aa1cd8d0a588e76e89d210551155648a8b2
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 9 18:40:06 2019 -0800

    router: Ensure that the purge task completes (#396)
    
    The router's cache purging tasks never complete. This means that
    when a router is dropped, it's purge task is leaked into the executor,
    possibly holding services.
    
    This change uses an mpsc to ensure that the purge task is notified when
    all of the routers using this cache have been dropped.

commit 67f9c18167e1c9e0bea08508c798bd6cc5549ce2
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 9 17:52:46 2019 -0800

    profiles: Eagerly read profiles off the wire (#397)
    
    All communication on a destination client can become
    stalled if an individual profile client does not consume
    profile updates in a timely manner.
    
    This change alters the buffering strategy for profile updates
    to ensure that the resolution stream is always polled,
    independently of whether the service is actively being used.

commit 8b6f9a09968ca844e5c7bcbf924c045d4797541b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 13 15:01:56 2019 -0800

    Make fallback HTTP-agnostic (#393)
    
    The fallback module is currently HTTP-aware, as it must make response
    body types uniform.
    
    This change modifies fallback to instead require that both _service
    types_ are identical. This is accomplished by boxing the services, using
    a new http boxed service type.
    
    This has the side-effect of dramatically improving compilation times for
    the outbound proxy.

commit 81062803f1ca02983e6cd68bde21f4bb59c0f2ba
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 13 14:26:04 2019 -0800

    Make the router HTTP-agnostic (#394)
    
    There's nothing HTTP-specific about the router.
    
    This change moves the layer implementations--which unnecessarily enforce
    HTTP-specific type requirements--into the generic router crate, relaxing
    its type constraints.

commit 519420ef8b0d4cbd3b2aa23b57b8b715906c3a56
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 12 15:30:22 2019 -0800

    Update tower-balance (#392)
    
    tower-balance has been refactored and updated to use a new version of
    the `rand` crate.
    
    This change udpates the project to use the latest tower-balance, rand,
    and quickcheck dependencies
    
    I've soak-tested this over the weekend and the new balancer
    implementation is at least as good as the prior version in terms of
    latency and CPU usage.

commit 2aec7312b0a9c90f05187c83c5854772c3cac650
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 8 12:59:53 2019 -0800

    Update Rust to 1.39.0 (#391)

commit d5e523cf54b39b63898a83a12ef7c25ce2282d81
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 7 14:05:31 2019 -0800

    internal: Decouple TCP forwarding from protocol dispatch (#389)
    
    In preparation of adding discovery logic to outbound TCP forwarding,
    this change extracts the TCP forwarding logic as an Accept so that the
    outbound proxy will be able to provide an alternate implementation.

commit 0ca3bfefbd5bae803394e4fe83d1aaa5171be485
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 6 16:25:14 2019 -0800

    Resolve private IP addresses via the destination service (#388)
    
    This enables discovery (and mTLS) for HTTP traffic to private-network
    IP addresses, on the assumption that they are more than likely part of
    the local cluster. The set of discoverable networks may be configured
    via the environment.
    
    This depends on https://github.com/linkerd/linkerd2/pull/3595 returning
    resolutions for addresses.

commit fa64bb16b663846b72df8b863605bfbbb7d85f7d
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 6 16:12:53 2019 -0800

    make: Do not compile integration tests during packaging (#390)
    
    `make package` currently builds all crates, including the time-consuming
    integration tests. This change ensures that only crates needed to build
    the binary are compiled.

commit a7f22f6caae7598855e8ae04d90e8668be6ca61b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Nov 6 14:20:06 2019 -0800

    Modularize proxy initialization (#382)
    
    The proxy has classically had one very large function responsible for
    wiring together the entire proxy. Recently, we've split some of the
    logic into inbound and outbound crates, which helps compile times and
    modularity.
    
    This change continues this work, moving all of the "front-end"
    configuration logic into the `linkerd-app` crate. Configuration is
    structured in terms of a struct for each module; and a single `env
    module is responsible for building an application. This opens the door
    for additional configuration frontends, as long as they are able to
    build an `app::Config`.

commit 9ae63ac6aa8be323678b4d40c092ac85db757a6c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 4 12:39:52 2019 -0800

    internal: Split tap out of app-core (#387)
    
    Tap doesn't have any dependencies on the app infrastructure, so split it
    into its own proxy subcrate.
    
    Also, reexport opencensus::proto to streamline dependencies.

commit 9f030aa678a9bea14edce236eb5a83c9a9bc5554
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 31 15:22:53 2019 -0700

    internal: Move suffix-filtering into profiles API (#386)
    
    Currently, the profile_suffixes are wired through into the inbound and
    outbound proxies to configure the profile layer.
    
    This change decouples inbound/outbound proxy initialization from this
    detail of the profile client.

commit 13e6284fd4e40c33cc8b41961599a7201764fd1f
Author: Alex Leong <alex@buoyant.io>
Date:   Fri Oct 25 08:56:38 2019 -0700

    Cleanup unused sock I found lying around (#384)
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 8c8134800b614820df75ba47632987b9f663faeb
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 23 17:54:38 2019 -0700

    Record transport metrics after protocol detection (#381)
    
    In order to include the detected protocol in transport metric labels,
    protocol detection must be separated from dispatching a transport to the
    HTTP server (i.e via `app::core::proxy::Server`).
    
    This change accomplishes this as follows:
    
    * The `io` type is split out of `proxy-transport`. It includes the core
      `BoxedIo`, `PrefixedIo`, and `Peek` types.
    * The `transport::listen` module is now responsible for capturing all of
      an accepted socket's address info into an `Addrs` type. It, rather
      than the `tls::accept` module captures the original dst addr.
    * The `Bind` type/trait is introduced to represent listener endpoint
      before it is bound.
    * The `transport::AddrInfo` trait is removed. It's no longer necessary
      since addresses are determined predictably in the stack.
    * The `tls::Connection` type is replaced by a `Peek`/`PrefixedIo`.
    * The `detect` crate abstracts protocol detection using
      `Peek`/`PrefixedIo`. This is used to implement HTTP detection (in
      `Server`); and in the future it will be used for TLS/SNI detection.
    * Now that `Bind` holds the original-dst strategy, the config types have
      been  divided into smaller, reusable structs; and environment parsing
      is moved into the top-level `app` (so it can use config types defined
      in i`outbound`). This will support further modularity of the main
      application/config.

commit fffe76dae9c72a2184848de5e863206f7e5ebd4b
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 21 18:47:41 2019 -0700

    Remove the linkerd2-task crate (#380)
    
    Most of the logic in `linkerd2-task` is not actually used.
    
    This change moves the used part of this crate to `task-test-util`, and
    removes the rest of the linkerd-specific task infrastructure in favor of
    using tokio directly.

commit a7380b0bf10ec80d39057513025f0f7447f752f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 21 12:46:45 2019 -0700

    Remove the LINKERD2_PROXY_INBOUND_FORWARD config (#379)
    
    The `LINKERD2_PROXY_INBOUND_FORWARD` configuration was implemented to
    support local testing; but the proxy has evolved to the point where it
    needs a proper runtime harness (as in docker or the integration test
    infrastructure) to run.
    
    This option is just a bit of debt that should be removed to simplify
    code/diagnostics.
    
    This also disables doctests in the opencensus crate to prevent spurious failures.
    
    Furthermore, the proxy's initial logging has been clarified somewhat.
    
    Closes linkerd/linkerd2#3609

commit f91035de82b352f2ce0469c4fcceeb16184621c1
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 16 16:23:40 2019 -0700

    Update to Rust 1.38.0 (#377)
    
    Includes formatting changes, as required by the new version of rustfmt.

commit 4866eb2aebb5c172bb6d3b8b9f65cd895c0131f7
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 16 15:41:45 2019 -0700

    ci: Run docker builds on linkerd-docker host (#376)
    
    Replicate our integration test configuration to also run docker builds
    on our remote host.
    
    Furthermore, run these builds in unoptimized mode (since we don't
    consume the results).

commit d213c1373f1f5ec479a59a0a388d4373dcb3cde4
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 16 15:39:39 2019 -0700

    internal: Spilt app from linkerd2-proxy (#375)
    
    * internal: internal: Spilt app from linkerd2-proxy
    
    The `linkerd2-proxy crate currently comprises the entirety of the
    application logic for the proxy. This unfortunately leads to exceedingly
    high compile times (35+ minutes to compile the application with tests).
    
    Specifically:
    * Any change to the inbound or outbound proxy configuration necessitated
      recompiling the other; and this compilation could not be parallelized.
    * Integration tests depended on the `linkerd2-proxy` executable, adding
      about 10 minutes to every build.
    * The tests/support module (which is also extremely costly to build) was
      compiled _for each integration test_.
    
    This change restructures the crates in this repository to allow `cargo`
    to cache intermediate code that was otherwise being compiled
    redundantly or serially:
    
    * The `linkerd2-proxy` crate now contains _only_ the executable and need
      not be built during tests.
    * The `linkerd2-app` crate exposes the app's `Main`, but uses
      `linkerd2-app-inbound` and `linkerd2-app-outbound` subcrates to
      improve parellization/cacheability.
    * The rest of the  top-level application code
    * The `linkerd2-app-integration` crate now contains all of the
      integration test support code (as well as the tests themselves), so
      that the tests only need to compile the support library once.
    
    All in all, this reduces compile time to under 20 minutes.

commit b0c7181407985d77708c950ce9327c1414a576d9
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 16 12:27:22 2019 -0700

    Adopt tokio-tracing contexts (#374)
    
    We had our own poorly-implemented logging contexts. This change
    replaces all uses of the old context implementation with `tracing`
    (usually via `tracing-futures`).

commit 9978b328517c0b1679a54fd64ecdf039058b2702
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 15 11:12:32 2019 -0700

    Audit Cargo.lock for unused and outdated crates (#373)
    
    * Update spin for RUSTSEC-2019-0013
    
    * Update crossbeam-epoch for RUSTSEC-2019-0011
    
    * Prune unused cargo dependencies

commit 84a02df68514c5011450f5bbb6879240b8e4a308
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 14 15:19:42 2019 -0700

    internal: Split transport utilities into a subcrate (#369)
    
    The `transport` module contains utilities for working with transports that are
    not otherwise coupled to the main application code.
    
    This change replaces the `WrapServerTransport` trait with a `TransportLabels`
    trait that is only responsible for producing metrics labels. The transport module
    is otherwise (mostly) ignorant of transport labels. (It is responsible for setting an
    Errno label).
    
    `proxy::Server` has (temporarily) been tasked with instrumenting the connection
    with telemetry, though this will likely be further decoupled in follow-up changes.
    
    The previously-defunct `tls_accept` has been revived and updated to match the
    new Accept abstraction.

commit e73d464aa66a14598137c6554828bed13cfa3b88
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 7 15:26:19 2019 -0700

    internal: Remove the `ClientUsedTls` response extension (#370)
    
    We no longer rely on the `ClientUsedTls` marker type. Remove it and all
    of the type constraints it required.

commit 1627d84d4b1f4f5a1c656be3c0289ac5f4b8c902
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 7 14:01:19 2019 -0700

    internal: Split Accept from Listen (#368)
    
    This change reorganizes the listener logic. Now listeners are primarily
    responsible for preparing and producing `TcpStreams` (and doing nothing
    else). These sockets are then dispatched into an `Accept` service that
    takes a socket-like type and returns a future that drives work on that
    connection.
    
    `tls::Listen` is now `tls::AcceptTLS` and is _only_ responsible for
    terminating TLS. In follow-up changes this type will be further
    decomposed into an SNI-detecting piece and an Identity-terminating
    piece. It's my hope that the `tls::Connection` type can be retired.

commit dff01e750cd124affb2f2853c8cca587d7a9442b
Author: Alex Leong <alex@buoyant.io>
Date:   Tue Oct 1 15:15:36 2019 -0700

    Update maintainers.md (#366)
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit c883b63d15412a12327b202b1cd46a7f70436527
Author: Alex Leong <alex@buoyant.io>
Date:   Tue Oct 1 14:13:06 2019 -0700

    Handle 8 byte trace ids (#365)
    
    Nginx uses 8 byte trace ids whereas OpenCensus expects trace ids which are 16 bytes.  When we encounter an 8 byte trace id, we discard it, breaking the trace tree.
    
    When reading trace id headers, we now left-pad trace ids with 0s to 16 bytes.  This is consistent with the way that OpenCensus handles trace ids less than 16 bytes: https://github.com/census-instrumentation/opencensus-go/blob/master/plugin/ochttp/propagation/b3/b3.go#L66
    
    We also now log the appropriate error when we fail to emit a span.  This will allow us to distinguish between the scenario when the span receiver has been dropped vs when span conversion fails.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 4c3d706350231dd02b1068d21dc1a9abd025170c
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 27 15:23:17 2019 -0700

    internal: Remove the SetKeepalive trait (#363)
    
    In preparation of decoupling the listener logic from TLS discovery, I'm
    trying to simplify the transport module.
    
    This change is intended to make the `listen` and `connect` modules
    primarily responsible for preparing a `TCPStream` before any other
    transformations are applied to the IO stream. The `internal::Io` trait
    can be narrowed and the various `Io` impls no longer need to proxy this
    API.
    
    In follow-up changes, the `listen` module will be decoupled from
    identity/TLS; and some of the `transport` core types will be split out
    into subcrates.

commit b7faa708d8fa86aff371d6cc7e02e6b561aa92c4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Sep 27 14:16:09 2019 -0700

    tap: add headers to tap events (#348)
    
    PR linkerd/linkerd2-proxy-api#33 adds headers to the `RequestInit`,
    `ResponseInit`, and `ResponseEnd` tap events. This branch updates the
    proxy to populate these fields.
    
    This updates the proxy-api dependency to the tag  `v0.1.10`, or
    linkerd/linkerd2-proxy-api@34ab9c848f2cadb6d3e9dc47cca5b1c36adcd59f
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b8eba262019ec44f909be1a17617467349ec7424
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Sep 27 11:54:53 2019 -0700

    logging: update tracing-subscriber to 0.1.4 (#364)
    
    This picks up several bugfixes, including one for a potential memory
    leak (tokio-rs/tracing#366), which probably doesn't occur in the proxy
    currently but could be triggered in the future.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b15735b5c5370bb23116a9ca8d89edb217d12f0c
Author: Alex Leong <alex@buoyant.io>
Date:   Wed Sep 25 08:49:07 2019 -0700

    Instrument the opencensus exporter (#362)
    
    Fixes https://github.com/linkerd/linkerd2/issues/3453
    
    Instrument the opencensus exporter with the following metrics:
    
    ```
    # HELP span_export_streams Total count of opened span export streams
    # TYPE span_export_streams counter
    span_export_streams 1
    # HELP span_export_requests Total count of span export request messages
    # TYPE span_export_requests counter
    span_export_requests 497
    # HELP span_exports Total count of spans exported
    # TYPE span_exports counter
    span_exports 994
    ```
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 77f187764298f3cba695046b91b5e0e78d953cd4
Author: Alex Leong <alex@buoyant.io>
Date:   Tue Sep 24 11:22:16 2019 -0700

    Add http metadata to spans as annotations (#359)
    
    We collect the following data from a sampled request/response and add it to the emitted span as an attribute map:
    
    * http.method
    * http.path
    * http.authority OR http.host
    * http.status_code
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 7626c2e381324593e311cf28dcd3edc59ee2c679
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 23 15:01:45 2019 -0700

    ci: Run integration tests on dedicated host (#358)
    
    Integration tests currently take 80+ minutes in GitHub Actions.
    
    This change configures the integration test to be run on dedicated
    Linkerd build infra, reducing the test time to ~30 minutes.

commit 1382f0d0dee46fc8c1a9ee1fd191238fd49f82f8
Author: Alex Leong <alex@buoyant.io>
Date:   Thu Sep 19 16:58:06 2019 -0700

    Add distributed tracing support (#354)
    
    This adds the trace context layer to the inbound and outbound stacks so that the proxy increments the span id on the server side and the client side.  Sampled traces are converted to the OpenCensus protobuf format and sent to the OpenCensus span exporter.
    
    There will be additional followup work after this PR to enrich the span metadata with HTTP attributes such as method, path, status, etc.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit dc3c600780c24dadc88c71fb4cad14a60fea910e
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Sep 18 11:41:54 2019 -0700

    resolve: Do not send the 'k8s' scheme (#356)
    
    The fact that the proxy sends resolve requests with a scheme value of
    `k8s` is an accident of history. Given that this value is currently
    unused by the controller, stop setting a scheme value entirely.

commit 58a340349b4a56bd5a7c5fceffbd032dfff3a1e7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Sep 18 11:40:49 2019 -0700

    logging: update `tracing` and `tracing-subscriber` (#352)
    
    * logging: update `tracing` and `tracing-subscriber`
    
    Updating to the latest versions of the `tracing` and
    `tracing-subscriber` crates picks up a few changes that might be
    relevant to us:
    
    - tokio-rs/tracing#333: Fix an issue where filtering directives could
      sometimes be ignored
    - tokio-rs/tracing#344: Fix for filters not applying to events generated
      from `log` records
    - tokio-rs/tracing#346: Dependencies using `tracing`'s `log` back-compat
      alongside the `log` record to `tracing` event conversion layer will no
      longer result in duplicate events
    
    Additionally, `tracing-subscriber` 0.1.2 removed some dependencies that
    were previously on by default, and feature flagged others; I've tweaked
    the feature flags that we enable so we now have fewer transitive deps in
    our lockfile :D
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 73aa7dc919abb10ee5b532203b93204e8d7129aa
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 17 13:11:42 2019 -0700

    Split service discovery into composable components (#341)
    
    The `linkerd2_proxy_resolve` crate, which was split out of the main
    application in #318, contains a monolithic `Resolve` implementation.
    Over time, this code has evolved in ways that have made it difficult to
    modify and extend, especially and functionality cannot be tested
    independently.
    
    This change reorganizes the proxy's service discovery logic into a few
    composable components. The `Resolve` API has been updated to facilitate
    this.
    
    Service discovery consists of two primary traits: `Resolve` and
    `Discover`. `Resolve` is used within the proxy to model discovery
    sources like the Destination API and DNS; and `Discover` updates a load
    balancer with changes to its replica pool.
    
    The former `Resolve` trait has been replaced with a trait alias for
    `Service`, which allows for back-pressure, etc. Furthermore, the API has
    been updated so that it is easier to gracefully recover after a
    resolution stream is lost (by changing `Update` to contain a `Vec`).
    
    Now that `Resolve` is implemented as a `Service`, it becomes
    straightforward to model service discovery in terms of a stack of
    services, as we do throughout the project:
    
    * The `linkerd2-proxy-api-resolve` crate provides an implementation of
      `Resolve` backed by the destination API. It does NOT handle
      reconnects, buffering/spawning, etc.
    * The `linkerd2-request-filter` crate provides a simple
      middleware that can fail requests based on the request. This is used to
      implement the destination client's name/suffix restrictions.
    * The `linkerd2-proxy-resolve` crate provides `Resolve`-middlewares that
      implement error recovery/backoff and endpoint-type-mapping.
    * The `linkerd2-proxy-discover crate provides a suite of middlewares
      that facilitate powering a balancer with a `Resolve`. Specifically:
      * `buffer` ensures that discovery updates are processed even when the
        balancer is not polling for updates.
      * `from_resolve` wraps a `Resolve` to produce `Discover` response.
      * `make_endpoint` wraps a `Discover`-producing service to build each
        inserted endpoint into a Service.
    
    Almost all of this logic was happening in a single module, coupled to
    our gRPC interface. Now, these components may be easily re-purposed (for
    instance, in order to back discovery by DNS).

commit c99f64368d3cbe138888ade89179b5943633f6c7
Author: Oliver Gould <ver@buoyant.io>
Date:   Sat Sep 14 17:04:38 2019 -0700

    Record SHA of package artifact (#353)
    
    * Record SHA of package artifact
    
    * Remove outdated section of README

commit d079fac44432a7bb749da186dc5a0c874e75c23b
Author: Brian Storti <btstorti@gmail.com>
Date:   Sat Sep 14 12:15:38 2019 -0300

    Add 587 to the list of ports to disable protocol detection (#350)
    
    Port `587` is very commonly used for SMTP, and I think it would be useful to
    have it included in the default list of ports to skip protocol detection.
    
    Signed-off-by: Brian Thomas Storti <btstorti@gmail.com>

commit 3734cc78f4bfc6730d833b4056eacbffd10d6797
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Sep 13 18:26:13 2019 -0700

    ci: Use a readymade release action (#351)
    
    The first pass at releases used a container I found on the internet
    called `github/ghx`, which provides a CLI interface to github that was
    usable within actions. I've contacted the author, who says it is
    unmaintained (and the sources for it are not public); so I've elected to
    use softprops' release action.
    
    In order to do this, I added a local action that handles the parsing of
    the git `refs/*` syntax into the proper release metadata.

commit 15a943d3fac32649c2f71f076bdf93c07fa0e531
Author: Alex Leong <alex@buoyant.io>
Date:   Fri Sep 13 17:02:29 2019 -0700

    Add trace context crate (#339)
    
    Add a crate for reading the trace context from a request, incrementing the span id, and potentially emitting the span to a channel.
    
    Two trace propagation formats are supported:
    * grpc-trace-bin: a trace propagation format used for gRPC requests where the trace context is stored in a base64 encoded binary format in the grpc-trace-bin header
    * x-b3: the zipkin trace propagation format where the trace context is stored across the x-b3-trace-id, x-b3-spanid, and x-b3-sampled headers.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 626cf5e2affc5a1b7bb2b3f2ecf3003c61484bec
Author: Alex Leong <alex@buoyant.io>
Date:   Fri Sep 13 09:29:22 2019 -0700

    Add opencensus exporter (#338)
    
    Adds a SpanExporter for sending Spans to an OpenCensus agent or collector in the OpenCensus agent gRPC format as a streaming request.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit fab3b242ef00609ca11ef90746f1d881992a2a32
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 12 17:33:25 2019 -0700

    ci: Automate releases via GitHub Actions (#349)
    
    This change updates CI as follows:
    * Rust & Docker checks are now run on master as well as PRs
    * Tags beginning with `release/` now automatically create a Release.
    * Travis no longer publishes artifacts to build.l5d.io
    * Travis is disabled.

commit 29ec67efbcbf66a56e74d0f228744c40358829f7
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 10 16:10:25 2019 -0700

    core: Introduce the Recover trait (#347)
    
    * core: Introduce the Recover trait
    
    The `Recover` trait provides a means to inspect an error and, if it is
    non-fatal, apply a backoff strategy. Backoff strategies are implemented
    as a `Stream` that indicates when an operation may be
    resumed/reattempted.
    
    This affords an opportunity to make the `proxy::reconnect` module
    decoupled from its backoff strategy (which will more easily allow the
    strategy to be reused in other contexts, i.e. to support #341).
    
    This change also corrects a logic error in the exponential backoff
    strategy that prevented jitter from being applied. The code has been
    refactored slightly to improve testability.
    
    There was some unknown interaction (possibly a bug in tower-reconect?)
    that causes test failures related to reconnect--where the task is
    sometimes not notified as it should be.
    
    This change replaces use of tower-reconnect with a `Recover`-aware
    state machine and eliminates that dependency.
    
    Finally, the `linkerd2-error` crate extracts the `Recover, `Error`, and
    `Never` types. And, as this allows some crates to stop depending on
    proxy-core, they have been renamed to not include a "proxy" prefix.

commit 2c20949a65ed9fb0a0acae422343e898eab6a870
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Sep 6 13:48:33 2019 -0700

    update tracing crates (#346)
    
    This branch updates the proxy to depend on 0.1 versions of `tracing-log`
    and `tracing-subscriber`, rather than alpha versions. The dependency on
    `tracing-fmt` was removed, as that code was moved into
    `tracing-subscriber` in tokio-rs/tracing#311.
    
    Additionally, this should now allow us to use filter configuration that
    involve dynamic filters on span fields, as well as on static targets.
    Note that this may be of limited value *currently*, since the proxy
    still uses our sui generis logging contexts rather than `tracing` spans,
    but could be useful in the future.
    
    Note that this is a duplicate of #342. I've submitted a new PR since CI
    seems to be stuck refusing to build that branch. Therefore, this
    closes #342.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 5678cb46edd26f71705b59790db770e728c86c8e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 5 13:20:26 2019 -0700

    ci: Run tests inside rust container (#344)
    
    The first version of the action didn't actually use the rust containers
    to drive the build. This change pins the ubuntu and rust versions.
    
    Even though the base OS includes rust-1.37, we want to control our rust
    version independently.

commit ca0393fbe6959660dcbd9d4719a234db5964d019
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 5 11:01:40 2019 -0700

    Use GitHub Actions for Pull Requests (#343)
    
    Disables Travis on Pull Requests, replacing it with GitHub Actions.
    Travis remains enabled for master builds for the moment.
    
    Some Dockerfile changes have been performed to fix the docker
    build on newer docker versions.

commit fc400f97a4a963e85e6786635a035bd46525fcfa
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Sep 4 14:48:46 2019 -0700

    update hyper to v0.12.34
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 108e95be714f903b82cec45ca73141b97ea05d75
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 3 16:06:08 2019 -0700

    Improve stack-related compiler error messages (#337)
    
    Service stacks were built from "top" to bottom, so that the concrete
    service type is satisfied after all middlewares are composed together.
    This leads to exceedingly complex compiler error messages.
    
    This change adds a `svc::Stack` builder that aids composing layers
    around a concrete inner service so that the compiler can more clearly
    identity the layer that violates the type contract.
    
    Note: this does *not* appear to improve compile times.
    
    No functional changes are intended.

commit 5c2319026945dd9e199a5b6cb97c3b3f6a8e73b6
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 3 13:52:06 2019 -0700

    tests: Properly simulate destination errors (#332)
    
    The `discovery` tests attempt to simulate the scenario where the destination
    service responds with an `InvalidArgument` gRPC status so the proxy
    knows to skip balancing. The tests don't accurately simulate this
    behavior, however.
    
    The [destination controller eagerly fails such requests][1], rather than
    successfully returning a stream that fails immediately. At the protocol
    level, this causes the `grpc-status` to be encoded in the firt and only
    HTTP response header frame, rather than in a trailer (i.e after the
    initial `END_HEADERS` frame was sent indicating the begining of the
    respnose steram); and in tower, this causes the initial response future
    to fail.
    
    This change modifies the mock controller and discovery tests so that
    tests can fail the response eagerly without initiating the response
    stream.
    
    [1]: https://github.com/linkerd/linkerd2/blob/e281fb3410138a8a9505220ecddea627dd9fdc2d/controller/api/destination/server.go#L96-L112

commit 160368f218faa8adad5288431f61623a753a2870
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 3 12:26:55 2019 -0700

    travis: Allow 60 minutes for integration tests (#336)
    
    We've seen frequent timeouts in travis. Until this is ported to actions,
    let's increase the timeout.

commit a5d25bbb7d8a9d2d041e0e9f7284e02aa8747133
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 3 17:38:24 2019 +0000

    Revert "Update and rename .github/workflows/rust.yml to rust.yml"
    
    This reverts commit 3af28f7ee9b924c1dba385e4dd8689f73e94afd1.

commit cea62223020eb4136692593f37372c060b16002f
Author: ilylia <ilylia@126.com>
Date:   Wed Sep 4 00:58:43 2019 +0800

    Fix compile error on windows (#335)
    
    Signed-off-by: ilylia <ilylia@126.com>

commit 3af28f7ee9b924c1dba385e4dd8689f73e94afd1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 2 20:23:00 2019 -0700

    Update and rename .github/workflows/rust.yml to rust.yml

commit 49b5e14844d2fb117dc728e29f9edf5715c4631a
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 2 19:25:11 2019 -0700

    Stop using a Builder in the profile router (#330)
    
    The builder type should only be used when composing layers. Now that we
    have `Builder::into_inner`, we need not store a builder in the profile
    router.

commit 9a84914660c54df63245eefa67d604d3c59bdc34
Author: Sean McArthur <sean@buoyant.io>
Date:   Mon Aug 26 13:19:11 2019 -0700

    update to latest rustls, webpki, and ring
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 3123818afe6f7826114a4cf99d2be9a39d342fe5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 26 14:47:32 2019 -0700

    fallback: Split fallback into dedicated crate (#326)
    
    The `proxy::http::fallback` module need not be in the main proxy crate.
    Furthermore, it shouldn't depend on the `svc::Builder` type, which
    really just holds a `Layer`. By upgrading the tower dependency, we can
    extract the inner layer from the builder and make the `fallback::Layer`
    type implemented in terms of these layers.

commit a6350704556329bf0eef4beee3fc582114f8f482
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 26 14:44:09 2019 -0700

    make: Add test-lib target (#329)
    
    Add a `test-lib` target that avoids compiling/running integration
    tests.

commit 83be4af95641264e7d2f600c0fce3de9adbf7963
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 26 11:02:30 2019 -0700

    config: Make destination service configuration required (#325)
    
    Practically, we never actually need to start the proxy without a
    destination service.
    
    Remove this possibility from the code to simplify logic.

commit 7cc66e20f86c4699bc9b586d325e96b68f275cdf
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 26 10:04:19 2019 -0700

    Update url crate to 1.7.2 (#327)
    
    Fixes a compile-time warning.

commit d6ac43ce5091cb1294c6b54dadf99f35cd4df8b3
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 23 10:49:27 2019 -0700

    Update Rust to 1.37.0 (#324)

commit 475a06414ffb83a0158167b877a0d04a51dd995c
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 20 10:59:26 2019 -0700

    cargo: Set authors to Linkerd Developers (#322)
    
    Rather than have my name plastered all over the place, let's use the
    developer list as the canonical author for this repo.

commit 041771334a355fc86b49a37fb805a06ec7fbaa00
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 19 11:55:56 2019 -0700

    classify: Assume success on missing grpc-status (#319)
    
    When a request is canceled by a client, the server seems to just drop
    the open response in a way that prevents the server code from being
    notified of the reset reason, and so our classification code treats this
    as if the stream ended without trailers.
    
    This was previously treated as a failure, but this should be handled as
    a success so that cancelations are not mistaken for application errors.
    
    Addresses linkerd/linkerd2#3281
    See also linkerd/linkerd2#3282

commit dd4fd06c59efddfaa3feeb5f14b3b6573e9b0fe2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 16 18:12:28 2019 -0700

    Split linkerd2-proxy-resolve (#318)
    
    `linkerd2-proxy::control` included the logic used to resolve names from
    the control plane. Before this logic is altered to support IP-address
    names, this change splits this module into a new subcrate with minimal
    other changes.
    
    No functional changes.

commit 9f6483ef399f00291378e73fc35710a7aeab0ac2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 16 14:39:34 2019 -0700

    core: Split resolve traits into core (#317)
    
    The proxy's service discovery is aroudn the proxy::Resolve traits. In
    order to support moving discovery logic into a dedicated subcrate, these
    traits should be promoted into the core types library.
    
    The `ListenAndSpawn` and `ServeConnection` APIs have been moved into a
    `listen` submodule.

commit c8f0ff17430eb14864685ba3db87ecfe57efb952
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 16 13:39:48 2019 -0700

    Move inbound and outbound stacks from app::main (#316)
    
    The proxy's Main has grown to be quite large and unwieldy. This change
    moves the outbound and inbound stacks into distinct files so that they
    may be changed and tested more easily.

commit 492497d6fa8d8607d662e1254e1496da01a2c52c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 15 14:00:36 2019 -0700

    core: Formalize the listen/serve API (#314)
    
    The `transport::tls::Listen` and `proxy::Server` types together formed a
    sort of interface that facilitiates serving connections from tasks.
    
    This change formalizes these interfaces so that the concrete
    implementations can move/change more easily.
    
    In pursuing this change, the remote `SocketAddr` is no longer passed
    around in a tuple and is, instead, wired into the `Connection` type. The
    `AddrInfo` trait has been updated to account for existince of the remote
    socket addr on a socket.

commit fc2d192a8cb3ffb956edb879542952a484a0591e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 15 13:57:54 2019 -0700

    travis: `make clean` after tests (#315)
    
    In theory, travis's cache of build artifacts is useful for reducing CI
    run times from ~30m to ~10m. However, in practice, the cache grows in
    excess of 3GB after just a few runs. This frequently causes subsequent
    runs to timeout while fetching the cache image, causing spurious
    failures and, on master, requiring manual intervention to produce proxy
    binaries.
    
    CI needs to be predictable first and fast second; so, until we can
    figure out a more robust caching scheme, I propose that we disable
    caching from CI so that builds do not require manual intervention.

commit 393930d38a8035532268c272dd5daea13025d5ec
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 14 13:06:21 2019 -0700

    Introduce linkerd2-proxy-core (#313)
    
    The linkerd2-proxy-core crate is intended to expose the core types and
    interfaces needed to implement linkerd2-proxy so that implementation
    pieces may eventually be split into separate sub-crates.
    
    Initially, the crate exposes only `Error`, which is redefined
    gratuitously throughout the project; and it re-exports the commonly used
    `Never` type.
    
    Additional traits and core types may be added in follow-up changes.
    
    The proxy has been updated to re-export many of the core types and
    modules from the root of the `linkerd2-proxy` crate and imports have
    been updated accordingly.
    
    No functional changes.

commit 74f417f4635156cf501210af583f883cfaddf58a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 14 10:55:30 2019 -0700

    app: Split modules from inbound and outbound (#312)
    
    The app::inbound and app::outbound modules have been growing in size
    over time as features are added.
    
    This change splits these large many-module files up so that the inbound
    and outbound stack specifications can also be moved into these modules.

commit 8e9ccc1399e2b39278656dcb09d9045f54d50ac6
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 13 16:47:00 2019 -0700

    tests: Update to Rust 2018 (#311)
    
    When updating the repo to Rust 2018, some of the test modules were left
    without the proper updates.

commit bd96e8a35db3fb4f5dc2c65481390d2a54b30c22
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 13 14:57:59 2019 -0700

    Split utilities into sub-crates (#306)
    
    * Split linkerd2-dns-name into a subcrate
    
    * Split `linkerd2-conditional` into a sub-crate
    
    In order to facilitate breaking the main `linkerd2-proxy` library into
    smaller components, primitives like `Conditional` should be moved into
    dedicated crates so they may be used outside of the main application
    crate.
    
    In doing this the `tls::Status` type has been changed to be a struct so
    that it can implement traits (like `FmtLabels`) outside of the
    `conditional` crate.
    
    * Split `linkerd2-drain` into a sub-crate
    
    * Split `linkerd2-signal` into a sub-crate
    
    * Split `linkerd2-addr` into a sub-crate
    
    * Split `linkerd2-identity` into a sub-crate
    
    * fixup identity test
    
    * fmt

commit 6910d71731c780c20e8a2aa10971dd614fb4ce3b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Aug 13 14:54:25 2019 -0700

    logging: format log records consistently (#310)
    
    An upstream change tokio-rs/tracing#108 changed how `tracing` represents
    `Event`s that are converted from `log::Record`s, so that metadata is
    represented as fields on the event rather than as `tracing::Metadata`
    This resulted in log records being formatted differently from `tracing`
    events in the proxy's log output, with a format that was much harder to
    read than the normal formatting for events.
    
    This branch updates the tracing dependency versions, and uses new APIs
    added in tokio-rs/tracing#193 to normalize this metadata so that it is
    formatted consistently with other events.
    
    Log records, such as those from `h2`, were previously formatted like this:
    ```
    TRCE [     0.662591s] log schedule_pending_open log.target="h2::proto::streams::prioritize" log.module_path="h2::proto::streams::prioritize" log.file="/Users/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/proto/streams/prioritize.rs" log.line=822
    TRCE [     0.662623s] admin={client=control dst=127.0.0.1:51168 remote=127.0.0.1:51168} log   assigning; stream=StreamId(11), capacity=49 log.target="h2::proto::streams::prioritize" log.module_path="h2::proto::streams::prioritize" log.file="/Users/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/proto/streams/prioritize.rs" log.line=421
    TRCE [     0.662689s] log pop_frame log.target="h2::proto::streams::prioritize" log.module_path="h2::proto::streams::prioritize" log.file="/Users/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/proto/streams/prioritize.rs" log.line=661
    TRCE [     0.662723s] admin={client=control dst=127.0.0.1:51168 remote=127.0.0.1:51168} log   assigned capacity to stream; available=50; buffered=50; id=StreamId(11) log.target="h2::proto::streams::stream" log.module_path="h2::proto::streams::stream" log.file="/Users/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/proto/streams/stream.rs" log.line=249
    TRCE [     0.662748s] log flush log.target="h2::codec::framed_write" log.module_path="h2::codec::framed_write" log.file="/Users/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/codec/framed_write.rs" log.line=172
    TRCE [     0.662831s] admin={client=control dst=127.0.0.1:51168 remote=127.0.0.1:51168} log try_assign_capacity(2); available=50; requested=50; buffered=50; has_unavailable=true log.target="h2::proto::streams::prioritize" log.module_path="h2::proto::streams::prioritize" log.file="/Users/eliza/.cargo/registry/src/github.com-1ecc6299db9ec823/h2-0.1.26/src/proto/streams/prioritize.rs" log.line=434
    ```
    
    Now, they look like this:
    ```
    TRCE [     0.258741s] h2::proto::streams::prioritize schedule_pending_open
    TRCE [     0.258756s] h2::proto::streams::prioritize pop_frame
    TRCE [     0.258753s] admin={client=control dst=127.0.0.1:53876 remote=127.0.0.1:53876} h2::proto::streams::counts transition_after; stream=StreamId(27); state=State { inner: HalfClosedLocal(AwaitingHeaders) }; is_closed=false; pending_send_empty=true; buffered_send_data=0; num_recv=0; num_send=1
    TRCE [     0.258769s] h2::codec::framed_write flush
    TRCE [     0.258784s] h2::codec::framed_write flushing buffer
    ````
    
    * update tracing to latest alphas
    * normalize log metadata when logging
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c7c9dc1cccba86eb6e6dcdd9a32668ea2f479987
Author: Alex Leong <alex@buoyant.io>
Date:   Mon Aug 12 13:37:09 2019 -0700

    Hangup destination resolutions when dropped (#307)
    
    When destinations idle out of the router cache, the corresponding destination lookup is not cancelled.  This can lead to a build-up of many subscriptions as entries idle out of the cache and are later re-added.  As these subscriptions accumulate, memory usage of the destination service grows, manifesting as a memory leak.
    
    We use a hangup oneshot so that when the resolution is dropped, the daemon will be notified and will terminate.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 2a87dd67943c28d24ea50c65d61b588ff628642f
Author: ruig2 <41367284+ruig2@users.noreply.github.com>
Date:   Tue Aug 13 03:50:52 2019 +0800

    fix typo (#308)
    
    Signed-off-by: Rui Guo <ruig2@uci.edu>

commit 28042c8b77b5b362a4d9036e452719a69d846a39
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 9 13:12:07 2019 -0700

    lib: Rename directories to match crate names (#303)
    
    Some subcrates are in directories that don't match the crate's actual
    name.
    
    With this change, all directory names match the actual crate name.

commit 52666fe0d0670ac639716ee7b8dd67741555912c
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 9 12:17:22 2019 -0700

    Adopt std::convert::TryFrom (#304)
    
    We had our own implementation of TryFrom before there was a version
    available on stable.
    
    This change removes the internal implementation in favor of the one in
    `std::convert`.

commit e998e8d253b523fdd6bb104480ead3d9360a9075
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 9 09:58:07 2019 -0700

    Remove futures-mpsc-lossy (#305)
    
    The `futures-mpsc-lossy` subcrate is unused and may safely be deleted.

commit fa6c5bd48975f231bba3a6ae24e64191169c6ebb
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 8 16:26:28 2019 -0700

    linkerd2-proxy: Adopt Rust 2018 (#302)
    
    Much of this repo was moved to Rust 2018 in 1d4eac..011c00. This
    change updates the primary proxy project.
    
    More information about Rust 2018 can be found at
    https://doc.rust-lang.org/stable/edition-guide/rust-2018/edition-changes.html
    
    While pursuing this change, I've tried to consolidate use statements into a
    single block at the beginning of each module. This will help to make modules
    more uniform.
    
    There are no functional changes.

commit faa7be6093fca87616e42862b69ff32e7a71685a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Aug 8 14:31:25 2019 -0700

    metrics: add `request_handle_us` histogram (#294)
    
    As initially described in linkerd/linkerd2#730, there's a general need
    to understand the proxy's latency overhead. We can begin by recording
    the time a request spends in the proxy.
    
    linkerd/linkerd2#3098 proposes adding a new `request_handle_us`
    histogram to the proxy with only a `direction` label. This histogram
    should store the elapsed time (in microseconds) from the moment a
    request reaches the source stack until the request is dropped.
    
    This branch adds the `request_handle_us` histogram to the proxy's
    metrics. Handle time is recorded using a `Tracker` type which is
    inserted into each request's extensions map by a new layer at the
    top of the stack. Each tracker has a reference count, and when
    requests are cloned for retries, the tracker is cloned into the new
    request as well, incrementing the reference count. The reference
    count is decremented when trackers are dropped, and when it reaches
    zero, the elapsed time is recorded.
    
    Since this depends on a time measurement that's internal to the proxy,
    it's difficult to write reliable tests for it. Unlike the latency
    histograms, we cannot use a test service that waits for a period of time
    to ensure that the recorded latencies have a lower bound. Instead, I did
    some manual verification that the new metric is present in the proxy's
    metrics endpoint, that its total count is equal to the number of
    requests I've sent through the proxy, and that the handle time
    measurements appear to be less than the total request latency
    measurements.
    
    Closes linkerd/linkerd2#3098
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3c3cda766a265a503b10c7d2fdc00775d58f2d24
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 7 21:08:27 2019 -0700

    Replace futures_watch with tokio::sync::watch (#301)
    
    The `futures_watch` crate is superceded by `tokio::sync::watch`.
    
    This change replaces our single usage of a watch.

commit f9dd4f8e28b9a6d8cdbe8094368495d94441b741
Author: Alex Leong <alex@buoyant.io>
Date:   Wed Aug 7 16:09:29 2019 -0700

    Authority label should reflect logical dst (#300)
    
    Supersedes https://github.com/linkerd/linkerd2-proxy/pull/296
    
    The authority label reflects the concrete dst of the request in the endpoint stack.  In the case of a traffic split, this may be different from the actual authority of the request (i.e. the logical dst).
    
    We add the logical dst as a field on the endpoint target and use this value for the authority label instead of the concrete dst.
    
    The net result is that the authority field reflects the apex service of a traffic split and the `dst_service` label reflects the leaf service.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 3acf03ac1689988d306c2cfdce567369efcdb9c3
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Wed Aug 7 15:18:52 2019 -0700

    Require identity on tap requests (#295)
    
    ### Motivation
    
    With linkerd/linkerd2#3155 merging, proxy containers will now always have the `LINKERD2_PROXY_TAP_SVC_NAME` variable in their environment. This variable can now be reliably used to check that the client names of incoming tap requests match this value.
    
    If the values do not match, we will always return the gRPC Unauthenticated status code. If the values do match, we will accept the connection.
    
    If there is no client identity, we will similarly return the gRPC Unauthenticated status code.
    
    Closes linkerd/linkerd2#3157
    Closes linkerd/linkerd2#3163
    
    Signed-off by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit 767806bb2bc6de34821015951539ddd09eebb17c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Aug 6 15:49:07 2019 -0700

    tap: fix tap response streams never ending (#299)
    
    A bug currently exists in the tap code where response streams never end
    when reaching the limit on the number of events. Since these streams
    never end, the tap controller never restarts them, causing the
    user-facing tap output to hang.
    
    This is due to a bug introduced in
    073a1beb4a7cd709c6b1eaa56a319c1829a94d11. The `Dispatch` future
    previously was responsible for holding a sender to the events channel,
    and cloning it into each tapped service. In that change, the `Dispatch`
    type was removed, and the cloned sender was moved to the `Tap` struct.
    The `Dispatch` future was dropped when the limit is reached, but the
    `Tap` struct is not. This means that the final sender is never dropped,
    and the events stream never ends.
    
    This commit fixes the bug by moving the sender into `Shared`, which
    `Tap` holds a `Weak` reference to. This ensures that the sender that's
    cloned into each tapped service is dropped when the limit is reached,
    allowing the channel to close when all other senders are dropped.
    
    I've manually verified that the hang as described in
    linkerd/linkerd2#2891 no longer occurs after making this change.
    
    Fixes linkerd/linkerd2#2891
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 4c4702de634795566d506b143f76348582e44072
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 6 15:19:32 2019 -0700

    update-rust-version: Check usage (#298)
    
    When running the update-rust-version script, it was easy to run it
    without an argument, which breaks existing configuration.
    
    This change improves the script to handle errors, with some other
    shell lints addressed.

commit d315b9f6afb23eb3d0cf58577710989d1bd69944
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Tue Jul 30 17:04:09 2019 -0700

    Tap server authorizes clients when identity is expected (#290)
    
    ### Motivation
    
    As part of the tap hardening project the tap server must serve tap requests
    exclusively to the tap service. Clients must be both authenticated and
    authorized. Currently, the tap server still can accept clients over plaintext,
    and does not authorize clients over private connections.
    
    
    ### Details
    
    In order for authenticated clients to be authorized, the `tap_identity` config
    variable has been introduced. This value is used as the expected client identity
    of incoming tap requests. When `tap_identity` is set, the tap server now checks
    the peer identity of the client connection against this value. If they are equal
    the connection is accept; otherwise is is rejected.
    
    The tap server still accepts plaintext connections. This will be removed in a
    future PR once the tap controller is sending tap requests with the required
    `l5d-require-id` that is needed to set server identity on outbound requests to
    IP addresses.
    
    ### Tests
    
    Tests have been added to `tap::expected_identity` that assert:
    
    * The tap server accepts plaintext connections when `tap_identity` is not set in
      the config
    * The tap server rejects plaintext connections when `tap_identity` is set in the
      config
    * The tap server rejects private connections when the client identity does not
      match the expected `tap_identity`
    * The tap server accepts private connections when the client identity does match
      the expected `tap_identity`
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit 9faa7ca7ae62950d00f32a73b10d0aa20c863bb9
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Fri Jul 26 13:48:56 2019 -0700

    Properly fall back in the dst_router (#291)
    
    ### Motivation
    
    TLDR: Requests whose target authority is a socket address do not properly fall
    back. Requests to unresolvable authorities which are DNS names do fall back as
    expected.
    
    In a control plane branch, I have the tap controller properly adding the header
    metadata to tap requests, and the pod proxy’s expecting the tap identity the
    requests would be coming from. After installing a local build of this control
    plane and the proxy that supports `l5d-require-id`, I noticed that the tap
    controller’s proxy was still not setting identity on `outbound::Endpoint`s when
    the header was there.
    
    I began looking for the `debug!` lines that would be hit in the
    `orig_dst_router` because I would expect to be hitting that router, and did not
    see them—indicating those requests were still going through the balancer.
    
    It turns out that requests with an authority that we cannot resolve still get a
    single slot in the balancer, and therefore do not fallback because they do not
    return the `Unresolvable` error. We match on `Socket` [here](https://github.com/linkerd/linkerd2-proxy/blob/master/src/app/outbound.rs#L207) and make a new
    slot in the balancer [here](https://github.com/linkerd/linkerd2-proxy/blob/master/src/app/outbound.rs#L276)
    
    This is an issue because if these requests contain the `l5d-require-id` header,
    the `Endpoint` `identity` is not set because we do not go through the
    `orig_dst_router` and therefore do not have a TLS connection
    
    ### Solution
    
    In `outbound::discover`, `Resolve` will now only attempt to resolve
    `Addr::Name`, and return a `Unresolvable` error on `Addr::Socket`. For requests
    that are `Addr::Socket`, we rely on getting the original dst of the request and
    therefore routes through `orig_dst_router`.
    
    ### Tests
    
    The tests that specifically test SO_ORIGINAL_DST have been removed because those
    tests now result in errors which is the expected behavior now.
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit 9f6be8ef6fb8210e3a5d29feb95646c1ceb9afd2
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jul 25 19:05:45 2019 -0700

    Update h2 to v0.1.26
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 1c0d100dfc180ca88c5e341e3362e86373c77507
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Mon Jul 22 12:36:07 2019 -0700

    Introduce `l5d-require-id` request header (#289)
    
    This was originally implemented in #280, but has since changed enough that a
    new PR is being opened
    
    ### Motivation
    
    As part of the Tap hardening project, tap should only be served on TLS
    connections. Currently, when the Tap service makes an outbound Tap request, the
    `Host` header is the Pod IP of the resource. Service discovery is not attempted
    and therefore the Tap service initiates a plaintext connection. The introduction
    of the `l5d-require-id` header will allow an outbound request to require the
    specified identity on the endpoint it connects to.
    
    ### Details
    
    The `orig_dst_router` router on outbound requests will set the identity of the
    `outbound::Endpoint` to the value of the `l5d-require-id` header if it is
    present. This is useful specifically for the case explained above when request
    are made with an IP as their `Host` header and need to be TLS connections.
    
    In order for the header to be used in other scenarios, a new layer has been
    added to the `endpoint_stack` stack on outbound requests. This layer is
    implemented in `outbound::require_identity_on_endpoint`. The purpose of this
    layer is to wrap the `MakeService` of `Endpoint`s with a new service that checks
    for the presence of required identities, and if present, asserts the identity of
    the endpoint is expected.
    
    When constructing an `Endpoint`, if a request has the `l5d-require-id` header
    then the endpoint will be constructed if it's identity is the expected identity
    of the header value; if not, it will error and return a status code `FORBIDDEN`.
    
    ### Tests
    
    Tests have been added for both http1 and http2. The tests cover the
    `orig_dst_router` router as well as discovery. In both of those cases, clients
    make requests with and without the `l5d-require-id` header, as well as correct
    and inccorect `l5d-require-id` header values.
    
    Closes linkerd/linkerd2#2677
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit 7d8276ff83293ff5181c45229475375d31b145f3
Author: Alex Leong <alex@buoyant.io>
Date:   Mon Jul 22 12:04:57 2019 -0700

    Improve readability of profiles router (#283)
    
    Fixes https://github.com/linkerd/linkerd2/issues/3005
    
    This improves the readability of the profiles router by breaking it into 3 files, and renaming the generic type parameters to longer and more self-descriptive names.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 4e417bcb90ff8b6ce2a1270c2ac90a3443f0bd40
Author: Alex Leong <alex@buoyant.io>
Date:   Thu Jul 18 15:58:29 2019 -0700

    Break profile dst overrides test into more focused tests (#287)
    
    Fixes https://github.com/linkerd/linkerd2/issues/3006
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit f0ef7753e4d5291e1422ec4c546b1ef4677f193d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 11 14:11:03 2019 -0700

    Add `/proxy-log-level` endpoint to admin server (#279)
    
    The linkerd proxy's log level can be configured by annotation; but this
    means that it's not possible to update the log level on a running
    process. In order to facilitate manual debugging of a running system,
    there should be a way to update the log level of an individual pod at
    runtime. It must not be possible for unauthorized users to alter the log
    level of a proxy, as this can have serious performance and security
    implications.
    
    This branch adds a `/proxy-log-level` endpoint to the proxy's admin
    server. The endpoint responds to `GET` requests by returning the current
    log level string, and `PUT` requests by attempting to update the log
    level. If the provided log level string is invalid, it returns a 400
    error, and if the log level is valid, it returns a 204.
    
    The endpoint only accepts requests on the loopback interface, and fails
    with a 403 when requests are received from non-loopback addresses.
    
    Note that this requires PR #277, as it is implemented using
    `tokio-trace-fmt`.
    
    Closes linkerd/linkerd2#2005
    
    <details>
    <summary>Demonstration:</summary>
    
    ```
    $ LINKERD2_PROXY_IDENTITY_DISABLED=true LINKERD2_PROXY_CONTROL_ADDR=localhost:8000 LINKERD2_PROXY_LOG=info,linkerd2_proxy::app::admin=trace cargo run &
    [1] 95828
    
    $     Finished dev [unoptimized] target(s) in 0.66s
         Running `target/debug/linkerd2-proxy`
    INFO [     0.013175s] linkerd2_proxy::app::main using destination service at None
    INFO [     0.013345s] linkerd2_proxy::app::main identity is DISABLED: disabled
    INFO [     0.013382s] linkerd2_proxy::app::main routing on V4(127.0.0.1:4140)
    INFO [     0.013419s] linkerd2_proxy::app::main proxying on V4(0.0.0.0:4143) to None
    INFO [     0.013447s] linkerd2_proxy::app::main serving admin endpoint metrics on V4(127.0.0.1:4191)
    INFO [     0.013474s] linkerd2_proxy::app::main protocol detection disabled for inbound ports {25, 3306}
    INFO [     0.013545s] linkerd2_proxy::app::main protocol detection disabled for outbound ports {25, 3306}
    
    $ curl localhost:4191/proxy-log-level
    
    TRCE [    23.347619s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55600} admin{request.path=/proxy-log-level request.method=GET}: linkerd2_proxy::app::admin handling request
    info,linkerd2_proxy::app::admin=trace%
    
    $ curl localhost:4191/proxy-log-level -X PUT -d "info,linkerd2_proxy::app::admin=trace,linkerd2_proxy::logging=trace"
    
    TRCE [    51.157556s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55630} admin{request.path=/proxy-log-level request.method=PUT}: linkerd2_proxy::app::admin handling request
    TRCE [    51.157720s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55630} admin{request.path=/proxy-log-level request.method=PUT}: linkerd2_proxy::app::admin request.body="info,linkerd2_proxy::app::admin=trace,linkerd2_proxy::logging=trace"
    INFO [    51.158078s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55630} admin{request.path=/proxy-log-level request.method=PUT}: linkerd2_proxy::logging::trace set new log level level=info,linkerd2_proxy::app::admin=trace,linkerd2_proxy::logging=trace
    
    $ curl localhost:4191/proxy-log-level
    
    TRCE [    72.513505s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55655} admin{request.path=/proxy-log-level request.method=GET}: linkerd2_proxy::app::admin handling request
    info,linkerd2_proxy::logging=trace,linkerd2_proxy::app::admin=trace%
    
    $ curl localhost:4191/proxy-log-level --head
    
    TRCE [    31.791367s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55959} admin{request.path=/proxy-log-level request.method=HEAD}: linkerd2_proxy::app::admin handling request
    HTTP/1.1 405 Method Not Allowed
    allow: GET
    allow: PUT
    content-length: 0
    date: Tue, 25 Jun 2019 21:38:59 GMT
    
    
    $ curl localhost:4191/proxy-log-level -X PUT -d "info,linkerd2_proxy=debug"
    
    TRCE [   133.613981s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55725} admin{request.path=/proxy-log-level request.method=PUT}: linkerd2_proxy::app::admin handling request
    TRCE [   133.614121s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55725} admin{request.path=/proxy-log-level request.method=PUT}: linkerd2_proxy::app::admin request.body="info,linkerd2_proxy=debug"
    INFO [   133.614341s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55725} admin{request.path=/proxy-log-level request.method=PUT}: linkerd2_proxy::logging::trace set new log level level=info,linkerd2_proxy=debug
    
    $ curl localhost:4191/proxy-log-level -X PUT -d "i'm a bad log level, nothing should happen"
    
    DBUG [   178.633996s] admin={server=admin listen=127.0.0.1:4191} linkerd2_proxy::transport::tls::listen accepted connection from 127.0.0.1:55777 to None; skipping TLS (disabled)
    WARN [   178.634693s] admin={server=admin listen=127.0.0.1:4191 remote=127.0.0.1:55777} linkerd2_proxy::app::admin setting log level failed error=invalid filter directive 'i'm a bad log level'
    invalid filter directive 'i'm a bad log level'%
    
    $ fg
    [1]  + 95828 running    LINKERD2_PROXY_IDENTITY_DISABLED=true LINKERD2_PROXY_CONTROL_ADDR= = cargo ru
    ^X^CINFO [   203.952663s] linkerd2_proxy::signal received SIGINT, starting shutdown
    DBUG [   203.952778s] linkerd2_proxy::app::main shutdown signaled
    DBUG [   203.953356s] linkerd2_proxy::app::main shutdown complete
    ```
    
    </details>
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3a3ec3baca7c7a3d7fe4da1acc04bb20c54e701c
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 10 17:13:43 2019 -0700

    Use a constant-time load balancer (#266)
    
    tower-rs/tower#288 and tower-rs/tower#293 changed the Balance
    implementation substantially. Now, a new layer, `spawn_ready` is
    inserted around endpoint stack to ensure that readiness is driven
    on a background task.
    
    In support of this change, the `pending` layer was removed from the
    endpoint stack and, instead, the discovery system is now responsible for
    driving pending services to be materialized.

commit b71349a7b7d60b172d325afb99c2c5fcedc6da95
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 9 14:24:12 2019 -0700

    Replace `log` and `env-logger` with `tracing` and `tracing-fmt` (#277)
    
    Currently, the proxy uses the `log` crate for log records, and formats
    them using `env_logger`. However, `tracing` is capable of providing
    significantly richer scoped, contextual diagnostics, which are
    especially valuable in asynchronous systems like the proxy.
    
    In addition, switching to `tracing` is a prerequisite for
    dynamically reloading the log level (see linkerd/linkerd2#2005).
    
    This branch replaces `env_logger` with `tracing-fmt`, and the `log`
    crate's macros with `tracing`. Log records emitted by our
    dependencies can still be consumed as `tracing` events using the
    `tracing-log` adapter. A custom `tracing-fmt` formatter is used
    to replicate the previous log line formatting; this currently uses the
    proxy's log contexts in addition to `tracing` spans. Our homemade
    log contexts will be phased out and replaced with `tracing` spans in
    subsequent PRs, and the events emitted in the proxy will be made more
    structured.
    
    Closes linkerd/linkerd2#2004.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 0cc58cd7f901c96c0b512189dc2ff4eab3401c82
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jul 8 17:26:14 2019 -0700

    fallback: Clarify fallback layering (#288)
    
    Our `svc::Builder::fallback_on` combinator was a bit surprising, in that
    it worked differently from all other combinators, returning a Layer
    instead of a Builder.
    
    This change removes this combinator in an attempt to make the fallback
    layering logic more explicit in the stack.

commit 05b012d19194482f22384a17ed320f5df6da3a9e
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 5 14:31:12 2019 -0700

    router: Remove interval from router eviction (#286)
    
    * router: Remove interval from router eviction
    
    The router only purges its cache only once per `max_idle_age`, which
    means that a route may be idle for ~2x `max_idle_age`.
    
    By removing the interval completely, we can ensure that routes are
    evicted in a timely fashion.

commit 852a0f03ee64ec250da563b677d621fc7779a80c
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jul 5 13:55:29 2019 -0700

    canonicalize: stop resolving when the receiver is dropped (#285)
    
    The proxy's canonicalization queries can persist after the observing
    service is dropped.
    
    This change modifies the background resolution task so that it eagerly
    stops polling for updates when the corresponding service is dropped.

commit 41b398578cd85dfe4471ff9c477a6a0625bb06b3
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jul 3 14:55:31 2019 -0700

    Update httparse to v1.3.4
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 0a7e2068904bcb58aca98679aab8c6eff991eb0a
Author: Sean McArthur <sean@buoyant.io>
Date:   Mon Jul 1 11:20:13 2019 -0700

    Update h2 to v0.1.25
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 0e3ef79ebece853a656a2c6e0590cd13269704bb
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Jun 25 17:37:03 2019 -0700

    Propagate HTTP2 errors from client RST_STREAMs
    
    If the proxy's client sees an error that contains an HTTP2 error code,
    instead of converting that into a 502 response, this change now
    propagates the error code back up the server.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit cb60637545b2345df6c57f9d0e3627cfbe1ce842
Author: Alex Leong <alex@buoyant.io>
Date:   Fri Jun 28 15:17:44 2019 -0700

    Concrete dst routing (#276)
    
    Add a concrete dst router to the profiles router to honor any override_dsts in the destination profile.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 52eefa45c481cd68eff8f6785ea8eb8b47c0569b
Author: Kevin Leimkuhler <kleimkuhler@icloud.com>
Date:   Fri Jun 21 13:52:09 2019 -0700

    Eagerly drop services from the router cache (#247)
    
    This change introduces an eviction task for router caches.
    
    ### Current issue
    
    The issue this change addresses is that services are only dropped from a router
    cache when we have reached that cache's capacity.
    
    We drop a service when it has not received a request within `max_idle_age`.
    When the cache is full, we scan through all the services and check their last
    access time. If a service's last access time is longer than `max_idle_age`, then
    it is removed.
    
    This strategy is problematic because a service is only removed once the capacity
    has been reached. If the capacity of a cache is never reached, then a service's
    stack is kept around for the lifetime of that router.
    
    ### Solution
    
    When a router is created, we now also create a handle to that router's purge
    task (the `PurgeCache` struct). If a router should attempt to purge its services
    in the background, it can spawn that task when the router is created.
    
    A cache's state is now internally maintained by a
    [tokio_timer::DelayQueue](https://docs.rs/tokio/0.1.19/tokio/timer/struct.DelayQueue.html).
    When `PurgeCache` is able to expire items from the queue, we know that those
    services have not received a request within `expires` span of time -- even if
    the cache has not reached it's capacity.
    
    Signed-off-by: Kevin Leimkuhler <kleimkuhler@icloud.com>

commit d9594fd282e060758464645a95f32241366689f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 20 12:12:18 2019 -0700

    Relax the default outbound dispatch timeout to 3s (#275)
    
    Given that the first request to a service incurs a DNS lookup and 2
    discovery lookups, a 1s timeout can be too aggressive for some
    environments.
    
    Let's relax this to 3s to allow for more slowness during initialization.

commit 011c00e430e3857701498ce4c7cba03090188fbe
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 11:20:31 2019 -0700

    linkerd2-router: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit f8ea67e20da7b83749ead50b11a7017f329e8a96
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 11:15:10 2019 -0700

    linkerd2-timeout: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 919005e43583bf6ebdc8d94735b1e12181dd8401
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 11:11:42 2019 -0700

    linkerd2-stack: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit a1fb74004b38dfdbefbf4c4ff40d623da8696b34
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 11:06:40 2019 -0700

    linkerd2-task: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit be8a1d6327edee04238020a78c82cae6047a13a1
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 11:03:36 2019 -0700

    linkerd2-never: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 650b4ae8817b1dbfae36323761fb7454cce8f88d
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 11:02:32 2019 -0700

    linkerd2-metrics: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit bb9b7d2a16f9b5db655fc28b372cf621869b8d31
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 10:56:14 2019 -0700

    futures-mpsc-lossy: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 1d4eac2b40635b5cd6a803f19f2b3726bbd9a3a8
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jun 19 10:54:26 2019 -0700

    hyper-balance: rust 2018
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 6c2dff8eb9c6d11b4cd4fd5bcc106ce3b609b3f8
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Jun 18 14:07:37 2019 -0700

    Fix HTTP2 requests that don't have an :authority
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit c4860ceb6e9e7b11801a7e414c2bf9a9c5a17557
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Jun 18 10:58:22 2019 -0700

    Update hyper to v0.12.30 (#272)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit c411e0c1777b5c4578167c8e42f1cff7aa12c1b7
Author: Sean McArthur <sean@buoyant.io>
Date:   Mon Jun 17 16:10:05 2019 -0700

    Update h2 to v0.1.24 (#271)
    
    Closes linkerd/linkerd2#2942
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 35df8ab451b1dd6f7c8999e10d0e5928ddcc6231
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 13 12:52:28 2019 -0700

    metrics: Classify response errors (#269)
    
    The metrics layer did not properly count response errors.
    
    This change makes a response status code optional so that response
    errors may be counted when no status code is present.
    
    Fixes linkerd/linkerd2#2934

commit 1a52a5e6cd6d0084e5e4d928f95a08bead9c04f9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 12 15:04:14 2019 -0700

    discovery: Fall back in MakeService, only on InvalidArgument (#268)
    
    When the DNS fallback behavior was removed from the proxy in #259, the
    proxy was changed to fall back to original destination routing _any_
    time the control plane indicates that no endpoints exist for a
    destination. This is incorrect, as the proxy should always treat the
    destination service as authoritative. Additionally, this means that
    requests to endpoints which are known to not exist will construct an
    unnecessary client service, and eventually fail with a 502 error when
    the upstream client connection to the non-existent endpoint ultimately
    fails. Instead, the proxy should only fall back when the destination is
    outside the search suffixes or the Destination service returns an
    `InvalidArgument` response.
    
    This is a much larger change than #263. In particular, the fallback
    behavior has been moved from when the the actual client service is
    called to when the client service is _constructed_, as we do not expect
    to recieve an `InvalidArgument` response on a Destination query that
    has previously recieved updates.
    
    This was implemented by changing the `Resolve` trait to return a
    `Future` whose `Item` type is a `Resolution`, rather than returning a
    `Resolution`. When the Destination query returns `InvalidArgument`, the
    future will fail. The `proxy::http::fallback` middleware has been
    changed so that rather than making both the primary and fallback service
    and falling back on a per-request basis, it tries to make the primary
    service, and falls back if the primary `MakeService` future fails.
    
    Although this is a large change, I think the resulting code is simpler
    and more elegant than the previous approach.
    
    Previously, one of the discovery tests expected the incorrect behavior.
    I've changed this test to now expect that destinations known to not
    exist do _not_ fall back, and renamed it from
    `outbound_falls_back_to_orig_dst_when_destination_has_no_endpoints` to
    `outbound_fails_fast_when_destination_has_no_endpoints`. I've also
    confirmed that the updated test fails against master and passes after
    this change.
    
    Fixes linkerd/linkerd2#2880
    Closes #263
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a476e995a5566db1d57d58a852c896774db8237f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 10 16:41:22 2019 -0700

    metrics: Include the prefix of a Report in log lines (#262)
    
    This branch changes the `proxy::http_metrics::Report` type so that when
    the metrics report has a prefix (such as "route" or "control", etc), the
    prefix is included in log lines emitted by the report.
    
    Since the log line produced by `Report` includes the number of entries
    in the metrics registry for that `Report`, this should make it much
    easier to see which metrics scope that count corresponds to.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit db26495edf3b3121c5b33be7f2af9365ef2056a2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 7 17:09:52 2019 -0700

    Honor `l5d-override-dst` for inbound service profiles (#267)
    
    When the proxy receives an inbound request, it strips the
    `l5d-dst-override` header and ignores its value. Instead, this header
    value should be honored in the inbound router as it is in the outbound
    router. This will enable service profile discovery from ingresses, for
    instance.
    
    This branch changes the inbound router to use the `l5d-override-dst`
    header preferentially, with only the `l5d-canonical-dst` header taking
    priority over it if it is present. The layer that strips the override
    header is moved to under the inbound dst router.
    
    In addition, I've added new tests in the discovery module that assert
    that the value of the `l5d-override-dst` header is used for profile
    discovery when present, on both the inbound and outbound sides of the
    proxy. The inbound tests fail prior to the other changes on this branch.
    
    Closes linkerd/linkerd2#2910.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 439fbfed6fa9878b790d28b37ada53ee49994a8f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 5 15:41:21 2019 -0700

    Update to rust-1.35.0 (#265)

commit 790a86aa9db463af479647bb91b8b55280d74d47
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Jun 4 20:28:05 2019 -0700

    Update h2 to v0.1.23 (#264)
    
    - Fixes leaked DATA frames if never polled.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit ed32e4967bfb93596d93080de396a0ee9538b556
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu May 30 11:26:45 2019 -0700

    Update h2 to v0.1.21 (#261)
    
    - Fixes write infinite loop when header value doesn't fit in buffer.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 1c91a398ad011a692e82db5570c385e22e2e7588
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu May 23 16:13:58 2019 -0700

    Rewrite the destination client and remove DNS fallback (#259)
    
    This branch removes the fall-back-to-DNS behaviour from the proxy's
    destination module. Instead, when the Destination service returns "no
    endpoints", the proxy will route the request to its original
    destination, using the fallback behaviour introduced in #248.
    
    In addition, the proxy now no longer reconnects to the destination
    service for queries which receive a response with the Invalid Argument
    status code. After linkerd/linkerd2#2664, this status is used by the
    control plane to indicate names which should not query the destination
    service. I've added a new test for this.
    
    Furthermore (and unlike #245), this branch also removes the caching of
    service discovery lookups so that they can be shared between resolvers
    for authorities with the same canonical form. When we limited the number
    of concurrently in flight destination service queries to 100, reusing
    them was much more important; now it adds a lot of unnecessary
    complexity.
    
    The rewritten `control::destination` module is now much simpler and
    (hopefully) easier to understand. The `Resolver` holds a destination
    service `Client`, which is cloned every time a new `Resolution` is
    requested. Each active `Resolution` has a corresponding background task
    that drives the destination service query and sends updates through a
    channel to the `Resolver`.
    
    The background task is necessary so that updates are processed as they
    are recieved, rather than only when the `Resolution` is polled (i.e.
    when the load balancer is routing a request). In addition, the channel
    provides the queueing necessary to transform the control plane's update
    types (which contain multiple endpoint addresses) into multiple
    `tower-balance` updates for single endpoints, and to invalidate stale
    endpoints when the control plane connection is reestablished. When a
    control plane query is not necessary because the requested authority
    does not match the proxy's destination suffixes, the background task is
    not spawned and the `Resolution` remains permanently in the "no
    endpoints" state; and when an `InvalidArgument` error code is recieved,
    the background task terminates.
    
    A majority of the service discovery tests pass with no changes after
    this change. The following changes were necessary:
    * The test `outbound_updates_newer_services` was removed, as it tests
      that the same destination service query is shared between multiple
      services with the same authority (which is no longer the case).
    * The mock destination service was changed to send the `Unavailable`
      status code when it has run out of expected destinations, rather than
      `InvalidArgument`, as that code is used to indicate that a destination
      should never be reconnected.
    * New tests were added for falling back to ORIG_DST when no endpoints
      exist, and for not reconnecting after an `InvalidArgument` error.
    
    Closes #245.
    Closes linkerd/linkerd2#2661
    Closes linkerd/linkerd2#2728
    
    Signed-off-by: Eliza Weisman eliza@buoyant.io

commit b3dcc6e0403b794b0b937bb2f92cdb225ad695a4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon May 20 13:52:44 2019 -0700

    Use the proxy's log formatting in tests (#258)
    
    The proxy implements custom log formatting which includes timestamps and
    formatted contexts describing the context in which the log line was
    recorded. Currently, however, when running the proxy's integration
    tests, the default log formatting from the `env_logger` crate rather
    than the proxy's format. There are two main reasons why it would be
    preferable to use the proxy's log formatting style instead:
    
    * Information in the log contexts and timestamps can be valuable for
      debugging a failing test. For example, many log lines don't include
      information such as the destination address for a request as they
      assume this will be provided by the log context. This can make
      understanding log output from tests difficult since the log contexts
      are not included.
    * In order to debug changes to the log formatting, it may be easier to
      run a test with a log level set, rather than exercise certain
      behaviours manually. This is my original motivation behind this change
      --- I wanted to add a new log context to the background task driving
      destination service discovery, and it takes significantly less work to
      simply run the discovery tests with logging enabled rather than
      actually spinning up a new Kubernetes cluster to test this with a live
      destination service.
    
    This branch changes the integration test support module's
    `env_logger_init` function to use the proxy's log formatter rather than
    the default.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3e0e00c6dfbf5a9155b887cfd594f611edfc135f
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 16 08:11:06 2019 -0700

    Update mio to 0.6.17 (#257)
    
    To pick up https://github.com/tokio-rs/mio/pull/939

commit 45aadc6b1b28e6daea0c40e694a86ae518887d85
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed May 15 14:25:39 2019 -0700

    Update h2 to v0.1.19
    
    Includes a couple HPACK fixes
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 91f32db2ea6d74470fd689c713ff87dc7586222d
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu May 16 00:45:23 2019 +0300

    Assert that outbound TLS works before identity is certified (#251)
    
    This commit introduces TLS capabilities to the support server as well as
    tests to ensure that outbound TLS works even when there is no verified
    certificate for the proxy yet.
    
    Fixes linkerd/linkerd2#2599
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 6525b0638ad18e74510f3156269e0613f237e2f5
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Wed May 15 23:35:09 2019 +0300

    Allow disabling tap by setting an env var (#252)
    
    This PR fixes linkerd/linkerd2#2811. Now if
    `LINKERD2_PROXY_TAP_DISABLED` is set, the tap is not served at all. The
    approach taken is that  the `ProxyParts` is changed so the
    `control_listener` is now an `Option` that will be None if tap is
    disabled as this control_listener seems to be exclusively used to serve
    the tap. Feel free to suggest a better approach.
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit b70c68d4504a362eac6a7828039a2e5c7fcd308a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 15 13:14:04 2019 -0700

    Load balancers fall back to ORIG_DST when no endpoints exist (#248)
    
    Currently, when no endpoints exist in the load balancer for a
    destination, we fail the request. This is because we expect endpoints to
    be discovered by both destination service queries _and_ DNS lookups, so
    if there are no endpoints for a destination, it is assumed to not exist.
    
    In linkerd/linkerd2#2661, we intend to remove the DNS lookup from the
    proxy and instead fall back to routing requests for which no endpoints
    exist in the destination service to their SO_ORIGINAL_DST IP address.
    This means that the current approach of failing requests when the load
    balancer has no endpoints will no longer work.
    
    This branch introduces a generic `fallback` layer, which composes a
    primary and secondary service builder into a new layer. The primary
    service can fail requests with an error type that propages the original
    request, allowing the fallback middleware to call the fallback service
    with the same request. Other errors returned by the primary service are
    still propagated upstream.
    
    In contrast to the approach used in #240, this fallback middleware is
    generic and not tied directly to a load balancer or a router, and can
    be used for other purposes in the future. It relies on the router cache
    eviction added in #247 to drain the router when it is not being used,
    rather than proactively destroying the router when endpoints are
    available for the lb, and re-creating it when they exist again.
    
    A new trait, `HasEndpointStatus`, is added in order to allow the
    discovery lookup to communicate the "no endpoints" state to the
    balancer. In addition, we add a new `Update::NoEndpoints` variant to
    `proxy::resolve::Update`, so that when the control plane sends a no
    endpoints update, we switch from the balancer to the no endpoints state
    _immediately_, rather than waiting for all the endpoints to be
    individually removed. When the balancer has no endpoints, it fails all
    requests with a fallback error, so that the fallback middleware
    
    A subsequent PR (#248) will remove the DNS lookups from the discovery
    module.
    
    Closes #240.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 16441c25a9d423a6ab12b689b830d9ae3798fa00
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue May 14 14:40:03 2019 -0700

     Pass router::Config directly to router::Layer (#253)
    
    Currently, router `layer`s are constructed with a single argument, a
    type implementing `Recognize`. Then, the entire router stack is built
    with a `router::Config`. However, in #248, it became necessary to
    provide the config up front when constructing the `router::layer`, as
    the layer is used in a fallback layer. Rather than providing a separate
    type for a preconfigured layer, @olix0r suggested we simply change all
    router layers to accept the `Config` when they're constructed (see
    https://github.com/linkerd/linkerd2-proxy/pull/248#discussion_r283575008).
    
    This branch changes `router::Layer` to accept the config up front. The
    `router::Stack` types `make` function now requires no arguments, and the
    implementation of `Service` for `Stack` can be called with any `T` (as
    the target is now ignored).
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b27dfb2d21aa8ca5466ea0edce17d27094ace7c1
Author: Takanori Ishibashi <takanori.1112@gmail.com>
Date:   Wed May 15 05:58:42 2019 +0900

    updaes->updates (#250)
    
    Signed-off-by: Takanori Ishibashi <takanori.1112@gmail.com>

commit 5f89351081eff47a4ab8cd88e2e1a69a04f86541
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 9 16:39:24 2019 -0700

    Upgrade tower dependencies (#249)
    
    Tower must be updated in order to pickup tower-rs/tower#281
    to address linkerd/linkerd2#2804.
    
    This adopts released crates where possible.

commit 5d5eed6f8180b8db4090d995e71fdf7b0890c647
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Thu May 9 01:08:34 2019 +0300

    Assert that TLS connection is refused if identity is not certified yet (#243)
    
    This branch adds tls capability to the support cient used in tests. In addition to that it adds two tests verifying that a TLS connection is refused in case the identity is not certified yet. This attempts to fix #https://github.com/linkerd/linkerd2/issues/2598 and provide facility to write tests for https://github.com/linkerd/linkerd2/issues/2676.
    
    As these are still some of my first lines of Rust code, it is advised to approach everything with a healthy dose of doubt :)
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 1b9bb3745e44c959d1d41d14fed2b2822c82b5ba
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 8 14:28:37 2019 -0700

    Introduce dispatch timeouts around buffers (#246)
    
    The proxy has several buffers, especially where it routes requests over
    shared stacks. If any of these routes is unavailable, then a request may
    remain buffered indefinitely. Previously, before service profiles were
    introduced, there was a default _response_ timeout that would cause
    these requests to fail; but since this response timeout is now optional
    (and is only applied once the request has been routed within a proxy),
    then we need a new mechanism to prevent requests from getting "stuck".
    
    This change does the following:
    - all proxied requests are annotated with a dispatch deadline;
    - each time a request is bufered, a timeout is registered.
    - if the timeout fires, the response exception fails, a 503 is returned,
      and the request is dropped.
    - if the request is processed into the inner stack, the timeout is
      ignored.
    
    The dispatch timeout limits the _time a request is buffered in a proxy_.
    This is distinct from the response timeout, as the server's response may
    naturally be delayed for any number of (non-proxy-related) reasons.
    
    The `insert_target` module has been generalized to `insert` to support
    setting the DispatchDeadline extension.
    
    The `buffer` module has been augmented with generic deadline-extraction
    logic.
    
    The `svc` module now exposes its own builder type that notably adds
    a `buffer_pending` helper. It's helpful to pull a builder type into the
    proxy to assist debugging type errors when modifying stacks.
    
    Fixes linkerd/linkerd2#2779 linkerd/linkerd2#2795

commit caf899557c3b041190f63544da865396231b3e30
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri May 3 15:55:32 2019 -0700

    router: Fail requests when the route is not ready (#241)
    
    In linkerd/linkerd2#2779, we plan to expire requests while they are
    buffered. However, the router _implicitly_ buffers requests in the
    executor when the inner service is not ready.
    
    This change alters the route to wrap all inner layers in a `LoadShed`
    so it can expect all services to `poll_ready()` immediately.

commit 587bad101d9e5daeacb24b6733097c350a798356
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri May 3 14:18:08 2019 -0700

    Remove Destination service query concurrency limit (#244)
    
    Currently, the proxy enforces a limit on the number of concurrent
    queries (i.e., the number of gRPC streams) to the Destination service.
    This limit was added based on information about the behaviour of the
    Destination service that is now known to be incorrect.
    
    This branch removes the limit on concurrent queries from the proxy's
    `control::destination` module. Although it should now be possible to
    simplify this code as a result of this change, I've refrained from doing
    any major refactoring in this branch --- my intention is to do this
    after the DNS fallback behaviour has also been removed, as together with
    this change, that will result in a _significant_ simplification of the
    module. Additionally, I've removed the tests for the concurrency limit,
    as they are no longer relevant.
    
    The `LINKERD2_PROXY_DESTINATION_CLIENT_CONCURRENCY_LIMIT`
    environment variable was also removed; this is not a breaking change as
    neither the CLI nor the proxy injector will currently set this env var.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit cbdf45b44f7e4d852dc0497716062167ab9539fb
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu May 2 11:47:48 2019 -0700

    Remove h2::Error requirement from metrics
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 3276949d4608dc4344b7bed3de2fc4b3080c2c6e
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu May 2 09:44:00 2019 -0700

    delete unused proxy::http::metrics::class module
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 501802671a346250b6dbaae73f29d9be7a4c2086
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed May 1 13:42:38 2019 -0700

    Remove buffers from endpoint stacks (#239)
    
    Due to the `http::settings::router`, a `buffer` was needed in each
    endpoint stack. This meant that the service was always ready, even if
    the client were falling over (and reconnecting). In turn, this meant
    that the balancer would pick one of these endpoint stacks, because it
    was always ready!
    
    This change includes a test of a failing endpoint, that the balancer no
    longer assumes it is ready, and has the following functional changes:
    
    - Removed `http::settings::router`, instead the client HTTP settings are
      detected as part of the `DstAddr`. This means that each balancer only
      has endpoints with the same HTTP settings.
    - Removed `buffer` layer from inside the endpoint stacks.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 32b813aad4fe2fcf0252e8c2215d6835101d2337
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Apr 30 15:58:20 2019 -0700

    Support endpoint weights (#230)
    
    This change modifies the proxy to honor weights provided by the
    destination service. When the destination service replies with a
    weight, this value is divided by 10,000 to produce a weight on
    [0.0, ~400000.0]. This weight is used by load the load balancer
    to modify load interpretation and therefore request distribution.
    
    A weight of 0.0 will cause the endpoint's load to be effectively infinite
    so that requests will only be sent to the endpoint when no other endpoints
    exists or when the other endpoints that were considered had 0-weights.

commit 7a3be8c8737188e5debbc465f9a33da0d79b8b80
Author: Zahari Dichev <zaharidichev@gmail.com>
Date:   Wed May 1 01:57:01 2019 +0300

    Replace fixed reconnect backoff with exponential one (#237)
    
    When reconnecting to a destination, use an exponential, jittered backoff strategy.
    
    Signed-off-by: Zahari Dichev <zaharidichev@gmail.com>

commit 073a1beb4a7cd709c6b1eaa56a319c1829a94d11
Author: Sean McArthur <sean@buoyant.io>
Date:   Mon Apr 29 17:54:01 2019 -0700

    tap: remove need to clone Services (#238)
    
    This refactors the tap system to not require intermediary channels to
    register matches and taps when a request comes through. The Dispatcher
    that used to exist in order to prevent tapping more requests than the
    limit asked for has been removed. In its place is a shared atomic
    counter to keep the count under the limit.
    
    The resulting behavior should be the same. There should be improved
    performance as tap registration doesn't need go through a second
    channel, and requests don't need to be delayed waiting for the
    dispatcher to be able to process its queue.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 61db2e77a247f7b0235b67581f60e8a92f8543cb
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Apr 23 17:20:43 2019 -0700

    Replace linkerd2-stack with tower-layer (#236)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 2d6c7145cadf709832f3507bcefdaee509ebde81
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Apr 18 12:40:48 2019 -0700

    Add load shedding when over max-in-flight requests. (#225)
    
    Also adds configuration for inbound and outbound max-in-flight requests.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit f4b5cd0b4a25d7d942e018b42af1157ae2e7dbb0
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 17 13:53:49 2019 -0700

    Upgrade tower (#232)
    
    This avails the proxy of newer load balancer features, an updated buffer
    implementation, etc.
    
    The new buffer implementation requires that we implement TypedExecutor
    for our logging executor; and more error types have been made dynamic.

commit c96dd3aec4b751230d559f980cdf71e6b4974f37
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 11 12:20:04 2019 -0700

    Do not block listener on TLS detection (#233)
    
    Currently, the listener task does not multiplex TLS discovery, so one
    slow/idle connection can prevent a proxy from transmitting all requests.
    
    This change alters the listener to use buffer_unordered and repurposes
    the listener's "connection limit" to control this buffer's capacity
    (rather than the total number of connections that may be served).

commit b634c3a9d70ff2143ad80451aed12e376fc584dc
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 2 14:25:01 2019 -0700

    Add test that proxy refreshes its identity (#229)
    
    Depends on #227 and #228.
    
    This branch adds a new integration test that asserts that a proxy will
    refresh its identity before the specified expiration time.
    
    I also added a `trace` log in the `identity` module that logs the actual
    duration we will wait before attempting to refresh. This was useful when
    debugging why this test was failing (it was because I neglected to set
    the LINKERD2_PROXY_IDENTITY_MIN_REFRESH env var, and it defaulted to 10
    seconds). I felt like it was useful to log the actual duration we will
    wait as well as the `SystemTime` when the cert expires, but I'm happy to
    back that commit off if we don't actually want that log line.
    
    Closes linkerd/linkerd2#2505
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b4208aea9e405c68135549e7c7a9117f4d02858b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 2 13:40:34 2019 -0700

    Add test for ready endpoint (#228)
    
    Depends on #227
    
    This branch adds a proxy integration test for the `/ready` endpoint. The
    test asserts that when a proxy has not yet had its identity certified by
    the Identity service, it does not consider itself "ready", and that a it
    becomes ready after its identity is certified.
    
    See also linkerd/linkerd2#2505
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c83aaa046d2be880e3c5dbcfa396669258b63365
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 1 21:15:27 2019 -0700

    Add test support infrastructure for identity (#227)
    
    This branch adds a mock Identity service implementation to the proxy's
    test-support module, and wires up the rest of the test support code to
    allow mocking the Identity service in tests. The existing tests for the
    `l5d-server-id` header have been updated to work with the identity
    service.
    
    Note that this branch does *not* add any new tests for the proxy's
    behaviour with the Identity service. I was planning to add these in a
    follow-up PR.
    
    See also linkerd/linkerd2#2505
    
    Signed-off-by: Eliza Weisma <eliza@buoyant.io>

commit f2d907b488d13847afde429a47785bd7d1fb6fb3
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 1 19:27:49 2019 -0700

    Disable potentially info-leaking headers (#231)
    
    The proxy has been instrumented to expose various informational `l5d-`
    headers to expose identity and network information that would otherwise
    be unaccessible to the application.
    
    However, as described in linkerd/linkerd2#2597, when linkerd is injected
    into an ingress pod, its easy to accidentally leak these details to
    external applications.
    
    Until we have a better mechanism for flagging external-facing pods,
    these headers should be disabled.

commit 6d3ff68e6688afe928b26e94e47f3d834119fe62
Author: João Oliveira <hello@jxs.pt>
Date:   Fri Mar 29 22:09:07 2019 +0000

    Mark outbound_dest_limit_does_not_limit_dns test flakey (#226)
    
    This test accesses `httpbin.org`, so it can be flakey in CI.
    
    Signed-off-by: João Oliveira <hello@jxs.pt>

commit c8e8bc33e54b4899888a798fd1bc64cff6469664
Author: João Oliveira <hello@jxs.pt>
Date:   Fri Mar 29 22:03:19 2019 +0000

    Remove fs-watch crate (#215)
    
    Signed-off-by: João Oliveira <hello@jxs.pt>

commit 4f4be5987f260c2ec8de154ae38d0ad22c7883d6
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Fri Mar 29 15:02:24 2019 -0700

    Configure HTTP/2 window size (#204)
    
    Expose an environment configuration to override the default stream or
    connection level window size of 65,535.
    
    This allows us to test alternate values without having to recompile.
    
    Signed-off-by: Kevin Leimkuhler <kevinl@buoyant.io>

commit e330c2957bfb125483e176adf8429029c5f537bd
Author: João Oliveira <hello@jxs.pt>
Date:   Fri Mar 29 22:01:06 2019 +0000

    Add a rust-toolchain file (#212)
    
    In order to enforce a minimum-required-Rust version for contributors,
    this change introduces a rust-toolchain file and a script that updates
    this file and the development Dockerfile.
    
    Signed-off-by: João Oliveira <hello@jxs.pt>

commit 5f58883a7e34bc449f0b0e8c6f997018c5eda32a
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Mar 26 14:14:59 2019 -0700

    Add an app::errors::layer to translate errors (#222)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 8947ba3fbc408e5c4e592b4dc958b3e71db07fe9
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 26 09:37:05 2019 -0700

    Fixup dockerfile for edge-19.3.3 (#223)
    
    Upgrade to rust 1.33 and linkerd edge-19.3.3.
    
    Fixup paths for new base container.

commit 54b20ee4979b42ec18791260194f7ebc63ccec08
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Mar 26 08:46:50 2019 -0700

    Configure a short connect backoff (#224)
    
    Without a connect backoff, reconnect can quickly loop, chewing CPU.
    
    Configuring a short backoff makes this better without severly impacting
    latency.

commit cc86324e04a32ea208770d230a4ca0f0fe13695b
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Mar 22 14:27:09 2019 -0700

    Update to prost v0.5 (#221)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 2064900a0f89e84ece0bae96e160d5dbee2af848
Author: Alex Leong <alex@buoyant.io>
Date:   Thu Mar 21 13:53:10 2019 -0700

    Add a oneshot to notify the profiles daemon if the stream is dropped (#220)
    
    Each service in the router cache maintains a profile watch on the destination service which is driven by the profile daemon future.  If that service is dropped from the cache, the profile daemon will not realize this until it gets a profile update and attempts to send the profile to the service.  As long as the profile grpc stream is NotReady (i.e. as long as there are no profile updates), the daemon future will live on, even after the service has been dropped.
    
    As services churn into and out of the router cache, this results in more and more daemon futures accumulating.  Each future is associated with a grpc stream to the destination service so this causes an unbounded number of grpc streams to be open to the destination service.  This results in a leak of goroutines and therefore memory in the destination service.
    
    We solve this by adding a oneshot from the stream to the daemon so that the daemon will be notified when the stream is dropped.  This will cause the future to complete and the grpc stream to be closed.
    
    Fixes https://github.com/linkerd/linkerd2/issues/2523
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 0aee73759e1802148d5e604ad0e3106f98402f73
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 18 13:23:57 2019 -0700

    Fix connect timeouts (#216)
    
    The controller client's connect timeout setting doesn't actually
    ontrol the connect timeout: it configures the _request_ timeout.
    
    This change fixes the controller by moving the timeout layer
    into the connect stack.
    
    Furthermore, the connect timeout and backoff settings have been
    updated to be more aggressive in the case of controller communication
    and less aggressive when communicating with applications.

commit 36b5fdad9bd68cceb3857801cc90f91c59d8a8b1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 18 13:00:25 2019 -0700

    Replace the metrics server with an admin server (#218)
    
    The so-called "metrics" server need not only serve metrics. It can also
    serve other administrative endpoints, especially those that may be used
    as readiness and liveness probes.
    
    A /ready endpoint is exposed that responds successfully when identity
    has been loaded.
    
    The `METRICS_LISTEN_ADDR` configuration has been renamed as
    `ADMIN_LISTEN_ADDR`.

commit de1f54c52153f801a1fde7ea20593a09b5bc2426
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Mar 18 11:25:22 2019 -0700

    Instrument identity with logging (#217)
    
    This changes initialization logic so that a task is spawn that logs when
    identity is provisioned (as observed by stacks). Identity's daemon task is
    now spawned on the admin thread with context logging.
    
    Furthermore, the processes's uptime is now logged in log messages so that the
    relative time between events is easily observeable. This is borrowed from the
    Linux kernel's behavior (i.e. in /var/log/kern.log).

commit e57f3827df578cadbcade90107d395627fd5c4d9
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Mar 15 22:07:49 2019 -0700

    Replace println! with debug! (#214)

commit 866b1f6ab4519f8d6f43ddf55ffe3b1b970c6d5b
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Mar 15 19:27:21 2019 -0700

    Replace fs-watch based TLS with new Identity service (#213)
    
    This change replaces the proxy's TLS configuration logic so that certificates
    are dynamically provisioned by the proxy via a new _Identity_ controller service.
    
    When the proxy processes its configuration, it now requires that a
    `LINKERD2_PROXY_IDENTITY_DISABLED` environment is set; otherwise,
    a valid identity configuration must be provided. An identity configuration
    includes:
    
    - PEM-encoded trust anchors provided via the
      `LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS` environment;
    -  A directory, specified by `LINKERD2_PROXY_IDENTITY_DIR`, containing two
      files: `key.p8` and `csr.der`. The key includes a PKCS#8-encoded private
      key; and the CSR includes a certificate request, signed by the private key,
      that can be sent to the identity service;
    - A serviceaccount token specified by `LINKERD2_PROXY_IDENTITY_TOKEN_FILE`
      that the proxy will read each time it requests a new certificate.
    
    The `linkerd2_fs_watch` crate is no longer used and should probably be split
    out into a utility (perhaps tokio-fs?).
    
    Various other configuration options have changed for consistency:
    - URLs are no longer accepted when we only care about addresses.
    - Configuration specific to the destination service (as opposed to all
      controller clients) has been renamed appropriately.
    
    Once the configuration is processed---if Identity is not completely
    disabled---then a client is established to the identity service and its
    identity is validated. As a certificate is acquired, it is validated and
    published into the _listeners_ and _connect stacks_ (rather than into the
    routing stack). This removes the need for rebinding watch layers, since these
    connection layers lazily acquire the proper configuration.
    
    When a certificate has not yet been acquired, then ALL inbound TLS
    connections fail that would otherwise be terminated by the process,
    and all outbound connections are server-validated but no client identity is
    provided. Once the certificate is acquired, client identities are provided on
    subsequent connections and the listener will properly accept connections.

commit 4ed4dcc5e11d923762d8d4b7954afb25769268ef
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Wed Mar 13 15:20:12 2019 -0700

    Update h2, hyper, and tokio dependencies (#211)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 99ee30ef527384dd6b3aee296498a67854d3add6
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Mar 13 11:22:44 2019 -0700

    main: Consolidate listener configuration (#210)
    
    Currently, listener configuration is spread across multiple parts of our
    setup.
    
    This change consolidates all of this configuration, removing some
    arguments from `serve()`.

commit 5f07c28370cc13ee8c4251d63f4fad9c242cd9f3
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Mar 12 14:49:58 2019 -0700

    Refactor Main to build the proxy task inside a lazy future (#209)
    
    This is primarily intended to make src/app/main.rs easier to change
    so that it may eventually be split up further.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 8e3422020ea0876c75acaa3ab4a741a533b42f6e
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Mar 11 15:24:21 2019 -0700

    Update tower-grpc and tower Error types (#208)
    
    - upgrade from grpc::Error to grpc::Status
    - Fix many bounds of `E: Error` to `E: Into<Box<dyn Error>>`

commit 6d10dd64d1504b54f47a7c2431a03cf73c89be2f
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Tue Mar 5 13:18:36 2019 -0800

    Set `l5d-remote-ip` on inbound requests and outbound responses (#200)
    
    ## Problem
    
    [Context](https://github.com/linkerd/linkerd2/issues/2310)
    
    ## Solution
    
    We now add the `l5d-remote-ip` header to all inbound requests and outbound responses. We also make sure to strip the header before setting so that clients may not set this header.
    
    We were already adding a header in similar style, so in order to deduplicate code, `add_header.rs` holds the generic logic for adding a header to a `http::Request` or `http::Response`. `l5d-client-id` and `l5d-server-id` now also use the same logic in order to add their respective headers.
    
    ## Validation
    
    An additional test module was added to `tests/discovery.rs` that tests the following:
    - outbound responses strip `l5d-remote-ip`
    - inbound requests strip `l5d-remote-ip`
    - outbound responses set `l5d-remote-ip` to the endpoint IP
    - inbound requests set `l5d-remote-ip` to the source IP
    
    Closes linkerd/linkerd2#2310
    
    Signed-off-by: Kevin Leimkuhler <kevinl@buoyant.io>

commit dc00685639c50c5cf608bb9c0d587b87b9a83282
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Fri Mar 1 12:55:18 2019 -0800

    perf(router): Increase inbound/outbound router cap. (#203)
    
    In both server and client case, the default value of
    MAX_CONCURRENT_STREAMS is `u32::MAX`. However, we currently cap the
    inbound and outbound router capacity limits to 100.
    
    This change increases the capacity of outbound to 10_000.
    
    This will close linkerd/linkerd2#2395 and could possibly address the
    issue in linkerd/linkerd2#2363.
    
    Signed-off-by: Kevin Leimkuhler <kevinl@buoyant.io>

commit 7e5519619d517d28754c4492887e152700c7e916
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Feb 27 13:49:25 2019 -0800

    Bump tower-grpc (#202)
    
    This picks up tower-rs/tower-grpc#115, which adds improved messages to
    internal gRPC errors.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 9e576cc91d33cf7375f92e4a2f4c76b87ecd144d
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Feb 21 16:17:06 2019 -0800

    Refactor profiles::router on top of linkerd2_router
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 0fe8063e5a413ec43eea5a43ca01edb146a1039d
Author: J Haigh <debugsteven@gmail.com>
Date:   Wed Feb 27 11:12:28 2019 -0700

    replace `Error::cause` with `Error::source` (#2370) (#201)
    
    Currently, linkerd2-proxy uses and implements `Error::cause`
    for error handling.
    
    This branch removes the use of the deprecated
    `Error::cause` method and implements and uses the
    `Error::source` method, as [recommended by the
    documentation](https://doc.rust-lang.org/std/error/trait.Error.html#method.cause). To implement `Error::source`, there are
    static lifetimes added to the `Error` traits. However, this
    doesn't remove the [use of `cause2`](https://github.com/DebugSteven/linkerd2-proxy/blob/231cb67b1a2178627bbb304055d408cee1007fd9/src/proxy/http/glue.rs#L226) because
    `hyper::Error` doesn't provide a `source` yet:
    https://docs.rs/hyper/0.12.24/src/hyper/error.rs.html#289-333.
    A separate issue could be opened to use `source` for
    `hyper::Error` when it becomes available.
    
    Fixes: https://github.com/linkerd/linkerd2/issues/2370
    
    Signed-off-by: J Haigh <DebugSteven@gmail.com>

commit 1ea7559c359acd66d214c2e193f6d03ba0cc38bb
Author: Alex Leong <alex@buoyant.io>
Date:   Mon Feb 25 21:28:04 2019 -0800

    Minor cleanup in the config tests (#188)
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit d0ef56b622c63a2deda8e38c841850a6a5dfd061
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sat Feb 23 14:53:59 2019 -0800

    Update *ring* to 0.14.6 (#197)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c54377fe097208071a88d7b27501faa54ca212b0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Feb 22 10:47:57 2019 -0800

    fs-watch: Use a properly sized buffer for inotify events (#195)
    
    The buffer passed to `read(2)` to read inotify events from the inotify
    fd must be long enough to fit events with filenames of the maximum
    allowable length. The `inotify-rs` library previously always constructed
    such a buffer, but as of 1fe4e3885039b9e66f9d93bf0cec11748253c39e, we
    are required to provide our own buffer. The buffer we were providing was
    insufficiently large for some filenames.
    
    See also the `man` page for `inotify`:
    > The behavior when the buffer given to read(2) is too small to return
    > information about the next event depends on the kernel version: in
    > kernels before 2.6.21, read(2) returns 0; since kernel 2.6.21,
    > read(2) fails with the error EINVAL.  Specifying a buffer of size
    >
    >         sizeof(struct inotify_event) + NAME_MAX + 1
    >
    > will be sufficient to read at least one event.
    
    (http://man7.org/linux/man-pages/man7/inotify.7.html)
    
    This branch updates the `fs-watch` lib to calculate the necessary buffer
    length correctly, and use a properly-sized buffer. I've also added tests
    that fail when the buffer is too short.
    
    Fixes linkerd/linkerd2#2331
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 23e02a62d71213a0d849543b9a64c3665879ddc5
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Feb 21 12:49:00 2019 -0800

    Update Router to wait for inner poll_ready before calling inner call
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 2de8e9bfd8961ab3d9afa3aa185c2cc52a242585
Author: Sean McArthur <sean@buoyant.io>
Date:   Mon Feb 11 12:50:04 2019 -0800

    Update metrics quickcheck to 0.8, and hyper to 0.12.24
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit d1bbd4b99e4e4069878f5e3693b5282c99418f78
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Feb 15 14:27:28 2019 -0800

    make: Optionally include debug symbols with builds (#193)
    
    Per linkerd/linkerd2#2199, we want to be able to include the proxy's
    debug symbols in auxiliary diagnostic containers. In order to do this,
    the process that produces the proxy's binaries also should be responsible
    for producing its debug symbols.
    
    This change adds a new environment variable, `CARGO_DEBUG`, which
    the Makefile uses to instrument the build to produce debug symbols. If
    `objcopy` is available on the local system (i.e. on Linux), then the
    symbols are copied from the binary into a .obj file, and the executable
    is stripped (from 3.3G down to 9.9M) before packaging.
    
    This increases the size of the compressed package artifact by 76% (from 5.0M to
    8.8M). This may have similar impacts on build time. To that end,
    CARGO_DEBUG is not enabled in CI yet.
    
    CI has been changed, however, to use build stages. Now, master will
    undergo the same test stage as PRs, though packages are only built &
    published for master.

commit 738a5413fda30915e1d193d59cee596248da6ec9
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 14 12:10:25 2019 -0800

    Fix compilation warnings in fs-watch (#192)
    
    fs-watch contains compilation warnings due to an unused macro and a
    public enum that is not constructed within the crate. This resolves
    these warnings.

commit 6cc755881994cba967619a0999dd7b2339c986e2
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 13 11:22:25 2019 -0800

    Apply rustfmt (#191)
    
    * Check rust formatting in CI
    
    * Run rustfmt on all sources

commit 59d00f69653730353ec246b8cb2eb39d80a54d3e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 11 10:51:37 2019 -0800

    Log canonicalization warnings on only the first error (#189)
    
    When a canonicalization task fails to resolve a name, our logging is not
    particularly clear about the current state of the stack. Specifically,
    it's difficult to know whether the stack has resolved the name
    successfully before.
    
    With this change, canonicalization failures are logged (at warning, not
    error) only when the task has not previously resolved a name.
    Subsequent errors are now logged at the debug level (instead of
    warning).

commit 7add4fcef1edcde442f22489989a59b2b3f19ea9
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Feb 7 10:53:08 2019 -0800

    Add l5d-client-id on inbound requests if meshed TLS (#184)
    
    If meshed TLS is used on an inbound connection, the TLS Identity of client is
    added as a header `l5d-client-id` to the request, so that the internal
    service can see it was encrypted.
    
    * Client certificates were already automatically used if a proxy was configured with TLS.
    * The server verifier was changed to _require_ a client certificates.
    * We assume the first DNS name in the certificate is the TLS identity assigned
      by the controller's CA.
      * In order to get the DNS names from the certificate, a fork of webpki is
        used, while waiting for the pull request to land.
    * The `l5d-client-id` header is stripped on both inbound and outbound requests
      at the beginning, so _only_ the inbound proxy will expose this header.
    
    Closes linkerd/linkerd2#2125 linkerd/linkerd2#2126
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>
    Co-Authored-By: seanmonstar <sean@seanmonstar.com>

commit 94d16f687af56afa3c005c028677b012d9084d86
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Wed Feb 6 14:52:13 2019 -0800

    Remove destination address from endpoint metric labels (#187)
    
    # Problem
    
    When `EndpointLabels`s are compared for equality, the
    `SocketAddr` field is considered as part of the `Hash`. However, the
    `SocketAddr` field is never formatted. When all labels are otherwise
    equal, this results in metrics that look like they have redundant
    scopes.
    
    # Solution
    
    Removing the `addr: SocketAddr` field from `EndpointLabels`
    results in equality between sets of labels that may have differed in
    their destination address, but are otherwise the same.
    
    # Validation
    
    In reproducing with [booksapp](http://github.com/BuoyantIO/booksapp),
    there are no longer any redundant metric scopes
    ```bash
    $ kubectl -n linkerd exec -c linkerd-proxy $(kubectl -n linkerd get po | awk '$1 ~ /^linkerd-controller-/ && $3 ~ /^Running$/ { print $1 }' |head -n 1) -- curl -s localhost:4191/metrics   | grep tls= | head
    request_total{direction="inbound",tls="disabled"} 853
    request_total{authority="linkerd-proxy-api.linkerd.svc.cluster.local:8086",direction="inbound",tls="disabled"} 23
    response_latency_ms_bucket{direction="inbound",tls="disabled",status_code="200",le="1"} 563
    response_latency_ms_bucket{direction="inbound",tls="disabled",status_code="200",le="2"} 661
    response_latency_ms_bucket{direction="inbound",tls="disabled",status_code="200",le="3"} 713
    response_latency_ms_bucket{direction="inbound",tls="disabled",status_code="200",le="4"} 752
    ```
    
    Fixes linkerd/linkerd2#2203
    
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>
    Co-authored-by: Eliza Weisman <eliza@buoyant.io>

commit 4b0e50e8fc488f535a4688447efa89cd650fec92
Author: Alex Leong <alex@buoyant.io>
Date:   Tue Feb 5 13:07:29 2019 -0800

    Set proxy_id in calls to Get and GetProfile (#183)
    
    Pick up API changes to the proxy-api where Get and GetProfiles now accept a proxy_id parameter.  We set this parameter to be equal to the proxy's TLS pod identity, which is configured through an environment variable.  Sending this value to the proxy-api allows it to return more tailored results, for example, by looking for service profiles in the proxy's namespace.
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit 0fc35e257e54f6e0ed5a9d7e0a45d7f914b4caf6
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Feb 4 14:54:52 2019 -0800

    Introduce TCP keepalive configuration (#186)
    
    * Add logging to proxy::tcp
    
    * update rust version in dockerfile
    
    * Introduce TCP keepalive configuration
    
    In some network environments, peers may silently drop connections such
    that the proxy cannot detect that the peer's socket has been closed.
    
    The [TCP keepalive socket options][tcp-keepalive] configures the kernel
    to actively probe connections to ensure connectivity and prevent idle
    timeouts.
    
    This change adds stack modules that attempt to configure accept and
    connect sockets' TCP keepalive socket options. There are four new
    environment configurations the proxy supports:
    
    - `LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE`
    - `LINKERD2_PROXY_OUTBOUND_ACCEPT_KEEPALIVE`
    - `LINKERD2_PROXY_INBOUND_CONNECT_KEEPALIVE`
    - `LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE`
    
    When an environment variable is unset, no keepalive is set on the
    corresponding sockets. Otherwise, its value is parsed as a duration.
    OSes may or may not understand subsecond values.
    
    It is recommended to only set the inbound-accept and outbound-connect
    keepalive values, as keepalives shouldn'tbe necessary on localhost.
    
    Relates to linkerd/linkerd2#1949 linkerd/linkerd2#2182
    
    [tcp-keepalive]: http://www.tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html
    
    * Use smarter controller keepalives
    
    For the controller's pods, it may not make sense to use the outbound
    keepalive when commuciating with the proxy api, because this API may be
    served on localhost.
    
    If the controller's address is localhost/loopback, then use the
    inbound connect keepalive instead.

commit ccf13a28877c42ab6ad690bc2c6670b7869f7cc2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Feb 1 11:25:32 2019 -0800

    Fix inotify dependency (#185)
    
    Since my PR against `inotify` (inotify-rs/inotify#124) has merged, we can
    go back to depending on the upstream version. Also, this updates the SHA
    we depend on to one that actually exists, which should fix the build.
    
    I've also removed the `inotify` dependency from the main proxy crate's
    `Cargo.toml.` This dependency is not actually used, as the `fs-watch` lib
    crate fully encapsulates the dependency. I think that this was overlooked
    when factoring out `fs-watch` into its own crate.
    
    It seems better to not specify the same dependency in multiple places,
    especially since we're not using one of them.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1fe4e3885039b9e66f9d93bf0cec11748253c39e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 31 18:11:14 2019 -0800

    Update dependencies to remove duplicate `rand` versions (#170)
    
    This branch updates the proxy's dependencies to eliminate multiple
    incompatible versions of the `rand` crate.
    
    Previously we depended on both `rand` 0.4.3 and 0.5.1. After this
    branch, we depend on `rand` 0.6.3 (the latest) and 0.5.1. However, PR
    #169 will also update `trust-dns-resolver` (the only crate depending on
    `rand` 0.5.1) to a version that depends on `rand` 0.6.3, so once both
    this branch and #169 are merged, we will depend only on `rand` 0.6.3.
    
    Note that this is a fairly large change to `Cargo.toml` --- it was
    necessary to update many of the proxy's dependencies in order to
    consolidate on one `rand` version. Additionally, I had to push branches
    of some of those dependencies in order to update their `rand`
    dependency, so it's currently necessary to patch some of the proxy's
    dependencies. When those branches merge upstream, the patches can be
    removed.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit d3e7f8bb69c0f2ed58bcbedc8acecf3079344e9b
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jan 30 15:51:00 2019 -0800

    Add l5d-server-id for outgoing responses, strip for incoming
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 333691891f469fa8f26002989b8ac27a2c1c62d7
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jan 30 11:15:39 2019 -0800

    Remove TLS fallback-to-plaintext if handshake fails
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 8f2977552287540e2b23f61c22d37668151af4a2
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Jan 29 12:01:53 2019 -0800

    Update rustls from 0.13 to 0.15
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 5b507a9a24247cbe81a71dde21262a772da70d75
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jan 24 10:48:47 2019 -0800

    Update bytes to 0.4.11
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit eaabc48cee3cb360daded977963d4110a85ff520
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jan 24 10:48:06 2019 -0800

    Update tower-grpc
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit e9561de6f18ce2683e5887ec65a9511b89c9f398
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jan 24 10:40:48 2019 -0800

    Update h2 to 0.1.16
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 28fd5e739925bd5c0607374ecca841267794f7d6
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jan 23 13:51:26 2019 -0800

    Add Route timeouts
    
    If a service profile specifies a timeout for a given route, this applies
    a timeout waiting for responses on that route.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 56373723933a00b61511f694a21c260d83600c29
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jan 23 12:58:33 2019 -0800

    Re-flag tcp_duration tests as flaky
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 20cbd18bbc5fc49d83eabdf25d119a263a9d8069
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Jan 23 12:09:24 2019 -0800

    Revise several log levels and messages
    
    - Change wording of orig-proto upgrade and downgrade `Stack` logs, and
      make them `trace` level.
    - Make `fmt_metrics` logs `trace` level.
    - Make metrics `Stack` logs `trace` level.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit ae16978e2482f95f9f807f55c24a85d1bc961cdc
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Jan 22 16:54:39 2019 -0800

    Remove flakiness from 'profiles' tests
    
    By polling /metrics looking for the label provided in the service
    profile, we can prevent the unit test from proceeding too early.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 49c29cd45cbf46232c4a7b8828f1528c7f1f0f39
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sat Jan 19 11:04:19 2019 -0800

    canonicalize: Only log errors at the WARN level when falling back (#174)
    
    Previously, whenever the `canonicalize::Task` future encounters an
    error, it logs that error at the error level. However, in many cases,
    these errors are transient, and we are able to successfully fall back to
    a previously canonicalized name.
    
    This branch changes `canonicalize::Task` to only log at the error level
    when there's no previously successful result to fall back to, and log at
    the warning level otherwise. In addition, the log message on fallbacks
    now indicates that we fell back to a previous canonicalization.
    
    Hopefully, this should make transient errors, such as a slow DNS server,
    a little less scary.
    
    Fixes linkerd/linkerd2#2094
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 486dd1379388a38c8d959e03fd8425ea8804a067
Author: Kevin Leimkuhler <kevin@kleimkuhler.com>
Date:   Fri Jan 18 16:48:22 2019 -0800

    Make outbound router honor `l5d-dst-override` header (#173)
    
    # Problem
    It is valuable to inject an ingress controller with LD2. As ingress, the host
    header tends to be the external host and most controllers just route directly
    back to the IP address of an endpoint. Unfortunately, this makes it so that
    Linkerd cannot discover the destination (as that works off the host header).
    
    # Solution
    The outbound router now recognizes request destinations by preferrentially
    choosing the `l5d-dst-override` header if it present. This header takes
    precedent over the Host header, original dest, etc.
    
    In addition, both the inbound and outbound routers strip this header. The
    outbound router strips it after it has used it to determine the authority.
    This is done with the `strip_header` layer that was added to the stack.
    
    # Validation
    There are integration tests for this behavior in the discovery tests. There
    are tests for http1 and http2. The tests test the following scenarios:
    - the outbound router routes based on the header when it is present
    - the override header applies to only requests with the override header
    - the inbound router never honors the override header
    - both routers strip the header before forwarding the request
    
    Fixes linkerd/linkerd2#1998
    
    Co-Authored-By: Eliza Weisman <eliza@buoyant.io>
    Signed-off-by: Kevin Leimkuhler <kevin@kleimkuhler.com>

commit 7adc50df3392c743331838313fe5f21c22a457e7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jan 18 14:28:38 2019 -0800

    Make timeouts for canonicalization DNS queries tuneable (#175)
    
    Currently, the proxy hard-codes a 100ms timeout for DNS queries to
    canonicalize a name. In some cases (see linkerd/linkerd2#2069), a DNS
    server might be slow enough to respond that a majority of these queries
    exceed the timeout. This results in a lot of error messages being
    logged, and potentially, a delay or complete failure to update to
    changes in DNS, if the DNS server is consistently very slow.
    
    This branch adds a `LINKERD2_PROXY_DNS_CANONICALIZE_TIMEOUT` environment
    variable that allows the default 100ms timeout to be overridden.
    
    See also linkerd/linkerd2#2093
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3188179b1704f350cd73f5c5172ab49285f62320
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jan 10 12:43:43 2019 -0800

    Try reducing CI flakiness by reducing RUST_TEST_THREADS to 1
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 6df55c005993d7e4661b70c9d1e8513e014aa944
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 16 15:10:44 2019 -0800

    Update h2 to 0.1.15 (#172)
    
    carllerche/h2#338 fixes a deadlock in stream reference counts that could
    potentially impact the proxy. This branch updates our `h2` dependency to a
    version which includes this change.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 08b2a23ca86571ea1fe8e3579e5dbb8b1c0df4e3
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 9 16:11:12 2019 -0800

    Update to trust-dns-resolver 0.10.1 (#169)
    
    An upstream bug in the `trust-dns-proto` library can cause
    `trust-dns-resolver` to leak UDP sockets when DNS queries time out. This
    issue appears to be the cause of the memory leak described in
    linkerd/linkerd2#2012.
    
    This branch updates the `trust-dns` dependency to pick up the change in
    bluejekyll/trust-dns#635, which fixes the UDP socket leak.
    
    I confirmed that the socket leak was fixed by modifying the proxy to
    hard-code a 0-second DNS timeout, sending requests to the proxy's
    outbound listener, and using
    
    ``` lsof -p $(pgrep linkerd2-proxy) ```
    
    to count the number of open UDP sockets. On master, every request to a
    different DNS name that times out leaves behind an additional open UDP
    socket, which show up in `lsof`, while on this branch, only TCP sockets
    remain open after the request ends.
    
    In addition, I'm running a test in GCP to watch the memory and file
    descriptor use of the proxy over a long period of time. This is still in
    progress, but given the above, I strongly believe this branch fixes the
    leak.
    
    Fixes linkerd/linkerd2#2012.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 204fc408de8e4f3ceb7744541164a2253ef59f69
Author: Jon Richards <jon@jonrichards.net>
Date:   Wed Jan 2 19:13:24 2019 -0800

    Update for linkerd2 slack channel (#168)
    
    See https://github.com/linkerd/linkerd2/pull/1331/commits/f833f5659c3b36eabcf65c30ebf46537b05b4954
    
    Signed-off-by: Jon Richards <jon.richards@nordstrom.com>

commit 2f2050537dd8caeaf5704e66a3fd7be89f2455a3
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Dec 18 13:45:31 2018 -0800

    add Route retries to Service Profiles
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 6649630db797950f3810db1cec6e41d1949b0398
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 19 16:35:04 2018 -0800

    Improve load balancer configuration (#167)
    
    Adopts changes from https://github.com/tower-rs/tower/pull/134
    
    > balance: Consider new nodes more readily
    >
    > When a PeakEwma Balancer discovers a single new endpoint, it will not
    > dispatch requests to the new endpoint until the RTT estimate for an
    > existing endpoint exceeds _one second_. This misconfiguration leads to
    > unexpected behavior.
    >
    > When more than one endpoint is discovered, the balancer may eventually
    > dispatch traffic to some of--but not all of--the new enpoints.
    >
    > This change alters the PeakEwma balancer in two ways:
    >
    > First, the previous DEFAULT_RTT_ESTIMATE of 1s has been changed to be
    > configurable (and required). The library should not hard code a default
    > here.
    >
    > Second, the initial RTT value is now decayed over time so that new
    > endpoints will eventually be considered, even when other endpoints are
    > less loaded than the default RTT estimate.

commit 5b00bcf40eccd8df1336419fff9e08581e6b6545
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Dec 19 12:32:09 2018 -0800

    Update to latest tower and tower-grpc
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit efe52995753f1796fdef9a8984e71121c20f324b
Author: Jon Richards <jon@jonrichards.net>
Date:   Tue Dec 18 15:15:01 2018 -0800

    Makefile: Add missing fetch for test-flakey (#163)
    
    Signed-off-by: Jon Richards <jon.richards@nordstrom.com>

commit 9c0a94987d7eb7526a9324adc972175f75b2c2c8
Author: Jon Richards <jon@jonrichards.net>
Date:   Tue Dec 18 15:13:54 2018 -0800

    Add clean target (#161)
    
    Adds a `make clean` target that invokes `cargo clean`.

commit 792c04b7d1e87538493b1ebc4a8f722b56f99fb8
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Dec 18 11:48:30 2018 -0800

    Replace tower-h2 tap service with hyper
    
    This untangles some of the HTTP/gRPC glue, providing services/stacks
    that have more specific focuses. The `HyperServerSvc` now *only*
    converts to a `tower::Service`, and the HTTP/1.1 and Upgrade pieces were
    moved to a specific `proxy::http::upgrade::Service`.
    
    Several stack modules were added to `proxy::grpc`, which can map request
    and response bodies into `Payload`, or into `grpc::Body`, as needed.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 0a085f98e833290c0a42cefd1dc4f959635c3928
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Dec 14 12:18:59 2018 -0800

    Actually fix the master CI build (#164)
    
    It turns out that increasing the recursion limit for the `tap` test
    crate _actually_ fixes the compiler error that's broken the last several
    builds on master.
    
    Since I'm now able to locally reproduce the error (which occurs only
    when running the tests in release mode), I've verified that this
    actually does fix the issue. Thus, I've also reverted the previous
    commit (7c35f27ad3e86614c05a2a409c3a8b459cf023ac) which claimed to fix
    this issue, as it turns out that was not actually necessary.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 7c35f27ad3e86614c05a2a409c3a8b459cf023ac
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Dec 13 14:38:13 2018 -0800

    Workaround for Rust 1.31 crash with verbose mode enabled (#162)
    
    This branch replaces the `export CARGO_VERBOSE=1` on CI release-mode
    builds with the `travis_wait` script. Verbose mode was previously being
    set to prevent long release-mode builds from timing out. However, there
    appears to be a bug in `rustc` 1.31.0, which causes the compiler to
    crash when building the proxy with verbose mode enabled. Hopefully, this
    will fix the build on master.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 761a08e4acb30b9c9c6d7883b379ed3db0598670
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Dec 13 12:31:13 2018 -0800

    Make TLS accept logic compatible with disabled protocol detection (#158)
    
    This branch changes the proxy's accept logic so that the proxy will no
    longer attempt to terminate TLS on ports which are configured to skip
    protocol detection. This means that a Linkerd deployment with
    `--tls optional` will no longer break server-speaks-first protocols like
     MySQL (although that traffic will not be encrypted).
    
    Since it's necessary to get the connection's original destination to
    determine if it's on a port which should skip protocol detection, I've
    moved the SO_ORIGINAL_DST call down the stack from `Server` to
    `BoundPort`. However, to avoid making an additional unnecessary syscall,
    the original destination is propagated to the server, along with the
    information about whether or not protocol detection is enabled. This is
    the approach described in
    https://github.com/linkerd/linkerd2/issues/1270#issuecomment-406124236.
    
    I've also written a new integration test for server-speaks-first
    protocols with TLS enabled. This test is essentially the same as the
    existing `transparency::tcp_server_first` test, but with TLS enabled for
    the test proxy. I've confirmed that this fails against master.
    Furthermore, I've validated this change by deploying the `booksapp` demo
    with MySQL with TLS enabled, which [previously didn't work](https://github.com/linkerd/linkerd2/issues/1648#issuecomment-432867702).
    
    Closes linkerd/linkerd2#1270
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit d8d1b040f906164f61d26da042807701f77e5fba
Author: Jon Richards <jon@jonrichards.net>
Date:   Tue Dec 11 11:14:58 2018 -0800

    Fix test-flakey target (#157)
    
    Signed-off-by: Jon Richards <jon.richards@nordstrom.com>

commit 0065c13751e1a51d557866818c8d405a48f54ec9
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Dec 5 12:40:29 2018 -0800

    profiles: Drive profile discovery on a daemon task (#156)
    
    The profile router currently is responsible for driving the state of
    profile discovery; but this means that, if a service is not polled for
    traffic, the proxy may not drive discovery (so that requests may
    timeout, etc).
    
    This change moves this discovery onto a daemon task that sends profile
    updates to the service over an mpsc with capacity of 1.

commit b9ffbb7f938e0be861e0d7121267db448be31cf1
Author: Sean McArthur <sean@buoyant.io>
Date:   Wed Dec 5 10:08:45 2018 -0800

    Update h2 to v0.1.14
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 3ac6b72c48b365429dba4c148634f64801e5f336
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Dec 4 18:37:26 2018 -0800

    Add basic tap integration tests (#154)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 68f42c337f2580f3b33ddab2e01540f6849d0d1a
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 4 07:45:20 2018 -0800

    Log discovery updates in the outbound proxy (#153)
    
    When debugging issues that users believe is related to discovery, it's
    helpful to get a narrow set of logs out to determine whether the proxy
    is observing discovery updates.
    
    With this change, a user can inject the proxy with
    ```
    LINKERD2_PROXY_LOG='warn,linkerd2_proxy=info,linkerd2_proxy::app::outbound::discovery=debug'
    ```
    and the proxy's logs will include messages like:
    
    ```
    DBUG voting-svc.emojivoto.svc.cluster.local:8080 linkerd2_proxy::app::outbound::discovery adding 10.233.70.98:8080 to voting-svc.emojivoto.svc.cluster.local:8080
    DBUG voting-svc.emojivoto.svc.cluster.local:8080 linkerd2_proxy::app::outbound::discovery removing 10.233.66.36:8080 from voting-svc.emojivoto.svc.cluster.local:8080
    ```
    
    This change also turns-down some overly chatty INFO logging in main.

commit f3f959b854ab6dd99d19b78ede4a16e76b6ab219
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 3 16:05:27 2018 -0800

    Record grpc-status from response headers (#152)
    
    As we well know, gRPC responses may include the `grpc-status` header
    when there is no response payload.
    
    This change ensures that tap response end events include this value when
    it is set on response headers, since grpc-status is handled specially
    in the Tap API.

commit da9736c9da81f940670ab0b2a866c1b34da2a66f
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 3 13:50:12 2018 -0800

    Update h2 to v0.1.13 (#151)
    
    * 80b4ec5 (tag: v0.1.13) Bump version to v0.1.13 (#324)
    * 6b23542 Add client support for server push (#314)
    * 6d8554a Reassign capacity from reset streams. (#320)
    * b116605 Check whether the send side is not idle, not the recv side (#313)
    * a4ed615 Check minimal versions (#322)
    * ea8b8ac Avoid prematurely unlinking streams in `send_reset`, in some cases. (#319)
    * 9bbbe7e Disable length_delimited deprecation warning. (#321)
    * 00ca534 Update examples to use new Tokio (#316)
    * 12e0d26 Added functions to access io::Error in h2::Error (#311)
    * 586106a Fix push promise frame parsing (#309)
    * 2b960b8 Add Reset::INTERNAL_ERROR helper to test support (#308)
    * d464c6b set deny(warnings) only when cfg(test) (#307)
    * b0db515 fix some autolinks that weren't resolving in docs (#305)
    * 66a5d11 Shutdown the stream along with connection (#304)

commit cbaed8af7160c6dd4fa7e52653d656c37aed27f4
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 3 13:08:00 2018 -0800

    profiles: Add anchors to control-plane provided regexes (#150)
    
    @adleong suggested that profile matching should always be anchored
    so that users must be explicit about unexpected path components.
    
    This change modifies the Profile client to always build anchore
     regular expressions.

commit 872f78df31efe8df6abcf26311998be14f15e191
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 3 12:29:39 2018 -0800

    Expose route labels via tap (#147)
    
    Route labels are not queryable by tap, nor are they exposed to in tap
    events.
    
    This change uses the newly-added fields in linkerd/linkerd2-proxy-api#17
    to make Tap route-aware.

commit 87fb677cdf5e1598b89b24c3f2adb6ccb6e1f01a
Author: khappucino <david.capino@gmail.com>
Date:   Thu Nov 29 20:02:03 2018 -0800

    Minor spelling error in connection.rs comments (#145)
    
    Signed-off-by: David Capino <david.capino@gmail.com>

commit 52a2bf5a3eb8a9422677112c08ddbaebe2f6adfb
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 29 17:28:51 2018 -0800

    canonicalize: Drive resolution on a background task (#146)
    
    canonicalize: Drive resolution on a background task
    
    canonicalize::Service::poll_ready may not be called enough to drive
    resolution, so a background task must be spawned to watch DNS.
    
    Updates are published into service over an mpsc, so the task exits
    gracefully when the service is dropped.

commit 82524e4a1f5d846fbcae259c92253543d067d6c6
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 29 17:12:48 2018 -0800

    Apply tapping logic only when taps are active (#142)
    
    Previously, as the proxy processed requests, it would:
    
    Obtain the taps mutex ~4x per request to determine whether taps are active.
    Construct an "event" ~4x per request, regardless of whether any taps were
    active.
    Furthermore, this relied on fragile caching logic, where the grpc server
    manages individual stream states in a Map to determine when all streams have
    been completed. And, beyond the complexity of caching, this approach makes it
    difficult to expand Tap functionality (for instance, to support tapping of
    payloads).
    
    This change entirely rewrites the proxy's Tap logic to (1) prevent the need
    to acquire muteces in the request path, (2) only produce events as needed to
    satisfy tap requests, and (3) provide clear (private) API boundaries between
    the Tap server and Stack, completely hiding gRPC details from the tap service.
    
    The tap::service module now provides a middleware that is generic over a
    way to discover Taps; and the tap::grpc module (previously,
    control::observe), implements a gRPC service that advertises Taps such that
    their lifetimes are managed properly, leveraging RAII instead of hand-rolled
    map-based caching.
    
    There is one user-facing change: tap stream IDs are now calculated relative to
    the tap server. The base id is assigned from the count of tap requests that have
    been made to the proxy; and the stream ID corresponds to an integer on [0, limit).

commit edd124fa9fac493c8c9f63209267d35f5fb2246b
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Wed Nov 28 11:26:08 2018 -0800

    Dockerfile: copy all lib crates before fetching dependencies (#143)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 88340cadf34fd9f0508c8dfaba3513e746cc016f
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Nov 20 13:01:03 2018 -0800

    replace proxy::http usage of tower-h2 with hyper
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 5d936900454ee4256776e171adf49311da2b97f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 27 14:27:30 2018 -0800

    tests: Replace `uimplemented!` with 'unreachable!' (#141)
    
    When developing, it's convenient to use `unimplemented!` as a
    placeholder for work that has not yet been done. However, we also use
    `unimplemented!` in various tests in stubbed methods; so searching the
    project for `unimplemented` produces false positives.
    
    This change replaces these with `unreachable!`, which is functionaly
    equivalent, but better indicates that the current usage does not reach
    these methods and disambiguates usage of `unimplemented!`.

commit 4f9adf9ca411dade7eaa4addb45c16b867908e82
Author: Luca Bruno <lucab@redhat.com>
Date:   Sun Nov 18 17:05:15 2018 +0100

    metrics/counter: wrap values over 2^53 (#139)
    
    This implements Prometheus reset semantics for counters, in order to
    preserve precision when deriving rate of increase.
    Wrapping is based on the fact that Prometheus models counters as `f64`
    (52-bits mantissa), thus integer values over 2^53 are not guaranteed to
    be correctly exposed.
    
    Signed-off-by: Luca Bruno <luca.bruno@coreos.com>

commit 663eab43dcc76c79a4806175d298aef8fc01eb5f
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 16 13:19:06 2018 -0800

    Reduce log level for orig-proto-downgrade (#138)
    
    Using a downgrade stack is not sufficiently important to log at the INFO
    level. Log it at DEBUG.

commit 2ab7ce2e67fc26c71824971f9dd86ad667673f70
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 16 12:28:28 2018 -0800

    Delete the ctx module (#137)
    
    The `ctx` module is no longer used. It can safely be deleted.

commit cde7675a9a01ed37271a7c866f167d126869cbfe
Author: Sean McArthur <sean@buoyant.io>
Date:   Fri Nov 16 11:45:08 2018 -0800

    Ensure l5d-orig-proto header is removed before returning responses
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit f37c9e51285ef585e600e2a2c7eea3263adedda0
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Nov 16 11:19:17 2018 -0800

    Update all tower pieces to use Service<Request> (#132)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 7add0db68e00cd75eed85b2ce9587d5c729a0f73
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 16 10:03:42 2018 -0800

    Disable debug symbols for tests (#135)
    
    Our test artifacts end up consuming several GB of disk space, largely
    due to debug symbols. This can prevent CI from passing, as CI hosts only
    have about 9G of real estate.
    
    By disabling debug symbols, we reduce artifact size by >90% (and total
    target directory size from 14G to 4G).

commit 1cd340ccaafa9ed3512f5b4f1f3ed887fdf76138
Author: Toby Lawrence <tobz@users.noreply.github.com>
Date:   Thu Nov 15 23:12:46 2018 -0500

    Fix Slack signup link in README. (#133)
    
    Signed-off-by: Toby Lawrence <toby@nuclearfurnace.com>

commit 9a9d929e34331bb1dc22645c57735c362de763e7
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 15 15:30:12 2018 -0800

    Add controller client metrics (#131)
    
    There is no telemetry from the controller client currently.
    
    This change adds a new scope (`control_`) of metrics including HTTP
    metrics for the client to the proxy-api.

commit c970a8c1731a55b71019acc921b98d3c8ba122e8
Author: Alex Leong <alex@buoyant.io>
Date:   Thu Nov 15 11:45:28 2018 -0800

    Add never lib to Dockerfile (#130)
    
    Signed-off-by: Alex Leong <alex@buoyant.io>

commit d5e2ff2cb78ae082f6cda971363ac454cb681845
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 15 11:41:17 2018 -0800

    Canonicalize outbound names via DNS for inbound profiles (#129)
    
    When the inbound proxy receives requests, these requests may have
    relative `:authority` values like _web:8080_. Because these requests can
    come from hosts with a variety of DNS configurations, the inbound proxy
    can't make a sufficient guess about the fully qualified name (e.g.
    _web.ns.svc.cluster.local._).
    
    In order for the inbound proxy to discover inbound service profiles, we
    need to establish some means for the inbound proxy to determine the
    "canonical" name of the service for each request.
    
    This change introduces a new `l5d-dst-canonical` header that is set by
    the outbound proxy and used by the remote inbound proxy to determine
    which profile should be used.
    
    The outbound proxy determines the canonical destination by performing
    DNS resolution as requests are routed and uses this name for profile and
    address discovery. This change removes the proxy's hardcoded Kubernetes
    dependency.
    
    The `LINKERD2_PROXY_DESTINATION_GET_SUFFIXES` and
    `LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES` environment variables
    control which domains may be discovered via the destination service.
    
    Finally, HTTP settings detection has been moved into a dedicated routing
    layer at the "bottom" of the stack. This is done do that
    canonicalization and discovery need not be done redundantly for each set
    of HTTP settings. Now, HTTP settings, only configure the HTTP client
    stack within an endpoint.
    
    Fixes linkerd/linkerd2#1798

commit 21887e57e4d7f58997237779454dfdc50d37a601
Author: Sean McArthur <sean@buoyant.io>
Date:   Mon Nov 12 14:41:49 2018 -0800

    change Inbound to always use localhost
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit fbadd969ce6b3bbb7884c41626152178005d41f3
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 13 15:35:55 2018 -0800

    Remove the `timestamp_request_open` module (#128)
    
    The `timestamp_request_open` module is no longer used.  It can safely be
    removed.

commit 1595b2457da6d15151bc4c5db9dc3b0a8dcf3d00
Author: Sean McArthur <sean@buoyant.io>
Date:   Tue Nov 13 10:21:12 2018 -0800

    convert several Stack unit errors into Never
    
    Since this stack pieces will never error, we can mark their
    `Error`s with a type that can "never" be created. When seeing an `Error
    = ()`, it can either mean the error never happens, or that the detailed
    error is dealt with elsewhere and only a unit is passed on. When seeing
    `Error = Never`, it is clearer that the error case never happens.
    Besides helping humans, LLVM can also remove the error branchs entirely.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 00b4009525b472b1d966f32ce8062458eeef640d
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 13 09:57:08 2018 -0800

    Allow routers to be implemented with a closure (#126)
    
    The router's `Recognize` trait is now essentially a function.
    
    This change provides an implementation of `Recognize` over a `Fn` so
    that it's possible to implement routers without defining 0-point marker
    types that implement `Recognize`.

commit 2d2d209e4e0b9ec8a3048efa8353ada35f0babba
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Nov 13 09:56:46 2018 -0800

    Implement Error for svc::Either (#125)
    
    The `linkerd2_stack::Either` type is used to implement Layer, Stack, and
    Service for alternate underlying implementations. However, the Service
    implementation requires that both inner services emit the same type of
    Error.
    
    In order to allow the underlying types to emit different errors, this
    change uses `Either` to wrap the underlying errors, and implements
    `Error` for `Either`.

commit 4d3e0abd41edbdbde8dd3e748ccae21bc917fd5c
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 12 18:50:36 2018 -0800

    Ensure metrics are not evicted for active routes (#124)
    
    It was possible for a metrics scope to be deregistered for active
    routes. This could cause metrics to disappear and never be recorded in
    some situations.
    
    This change ensure that metrics are only evicted for scopes that are not
    active (i.e. in a router, load balancer, etc).

commit d396acda6d7c6962245fdae305e26f23b47f32f1
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 12 18:22:12 2018 -0800

    Fall-back to former classification logic with profiles (#123)
    
    With the introduction of profile-based classification, the proxy would
    not perform normal gRPC classification in some cases when it could &
    should.
    
    This change simplifies our default classifier logic and falls back to
    the default grpc-aware behavior whenever another classification cannot
    be performed.
    
    Furthermore, this change moves the `proxy::http::classify` module to
    `proxy::http::metrics::classify`, as these modules should only be relied
    on for metrics classification. Other module (for instance, retries),
    should provide their own abstractions.
    
    Finally, this change fixes a test error-formatting issue.

commit c4b376557449f25c02bb82204e95db1e5bda6262
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 8 14:49:42 2018 -0800

    Unify Name/Host/Addr types under Addr (#120)
    
    Currently, the proxy uses a variety of types to represent the logical
    destination of a request. Outbound destinations use a `NameAddr` type
    which may be either a `DnsNameAndPort` or a `SocketAddr`. Other parts of
    the code used a `HostAndPort` enum that always contained a port and also
    contained a `Host` which could either be a `dns::Name` or a `IpAddr`.
    Furthermore, we coerce these types into a `http::uri::Authority` in many
    cases.
    
    All of these types represent the same thing; and it's not clear when/why
    it's appropriate to use a given variant.
    
    In order to simplify the situtation, a new `addr` module has been
    introduced with `Addr` and `NameAddr` types. A `Addr` may
    contain either a `NameAddr` or a `SocketAddr`.
    
    The `Host` value has been removed from the `Settings::Http1` type,
    replaced by a boolean, as it's redundant information stored elsewhere in
    the route key.
    
    There is one small change in behavior: The `authority` metrics label is
    now omitted only for requests that include an `:authority` or `Host`
    with a _name_ (i.e. and not an IP address).

commit 5e0a15b8a792f8e9d4cdff7dcd86a4d63efb7285
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Nov 5 16:30:39 2018 -0800

    Introduce outbound route metrics (#117)
    
    The Destination Profile API---provided by linkerd2-proxy-api v0.1.3--
    allows the proxy to discovery route information for an HTTP service. As
    the proxy processes outbound requests, in addition to doing address
    resolution through the Destination service, the proxy may also discover
    profiles including route patterns and labels.
    
    When the proxy has route information for a destination, it applies the
    RequestMatch for each route to find the first-matching route. The
    route's labels are used to expose `route_`-prefixed HTTP metrics (and
    each label is prefixed with `rt_`).
    
    Furthermore, if a route includes ResponseMatches, they are used to
    perform classification (i.e. for the `response_total` and
    `route_response_total` metrics).
    
    A new `proxy::http::profiles` module implements a router that consumes
    routes from an infinite stream of route lists.
    
    The `app::profiles` module implements a client that continually and
    repeatedly tries to establish a watch for the destination's routes (with
    some backoff).
    
    Route discovery does not _block_ routing; that is, the first request to
    a destination will likely be processed before the route information is
    retrieved from the controller (i.e. on the default route). Route
    configuration is applied in a best-effort fashion.

commit 0b6e35857b492066e5fa4bddabcf126d7892f0a2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Nov 2 11:28:22 2018 -0700

    Upgrade trust-dns-resolver to 0.10.0 (#118)

commit 8fca9ebde289c170c7d876d9b86d50fd18f566b9
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 1 14:59:44 2018 -0700

    Only use the classification label for response_total (#116)
    
    As described in https://github.com/linkerd/linkerd2/issues/1832, our eager
    classification is too complicated.
    
    This changes the `classification` label to only be used with the `response_total` label.
    
    The following changes have been made:
    1. response_latency metrics only include a status_code and not a classification.
    2. response_total metrics include classification labels.
    3. transport metrics no longer expose a `classification` label (since it's misleading).
       now the `errno` label is set to be empty when there is no error.
    4. Only gRPC classification applies when the request's content type starts
       with `application/grpc+`
    
    The `proxy::http::classify` APIs have been changed so that classifiers cannot
    return a classification before the classifier is fully consumed.

commit 19606bd528bfbed109472736744ef3adea9ec922
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Nov 1 11:21:38 2018 -0700

    refactor: Use a stack-based controller client (#115)
    
    The controller's client is instantiated in the
    `control::destination::background` module and is tightly coupled to its
    use for address resolution.
    
    In order to share this client across different modules---and to bring it
    into line with the rest of the proxy's modular layout---the controller
    client is now configured and instantiated in `app::main`. The
    `app::control` module includes additional stack modules needed to
    configure this client.
    
    Our dependency on tower-buffer has been updated so that buffered
    services may be cloned.
    
    The `proxy::reconnect` module has been extended to support a
    configurable fixed reconnect backoff; and this backoff delay has been
    made configurable via the environment.

commit f97239baf0b1d5f7f1cb93a895c7ecadf19b004b
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 30 11:03:31 2018 -0700

    Use the grpc-status response header for classification (#113)
    
    When a gRPC service fails a request eagerly, before it begins sending a
    response, a `grpc-status` header is simply added to the initial response
    header (rather than added to trailers).
    
    This change ensures that classification honors these status codes.
    
    Fixes linkerd/linkerd2#1819

commit 81b83784f07562dc8468876299931e3aae9847f4
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Oct 30 10:47:33 2018 -0700

    Prepare HTTP metrics for per-route classification (#112)
    
    Previously, stacks were built with `Layer::and_then`. This pattern
    severely impacts compile-times as stack complexity grows.
    
    In order to ameliorate this, `app::main` has been changed to build
    stacks from the "bottom" (endpoint client) to "top" (serverside
    connection) by _push_-ing Layers onto a concrete stack, i.e. and not
    composing layers for an abstract stack.
    
    While doing this, we take the oppportunity to remove a ton of
    now-unnecessary `PhantomData`. A new, dedicated `phantom_data` stack
    module can be used to aid type inference as needed.
    
    Other stack utilities like `map_target` and `map_err` have been
    introduced to assist this transition.
    
    Furthermore, all instances of `Layer::new` have been changed to a free
    `fn layer` to improve readability.
    
    This change sets up two upcoming changes: a stack-oriented `controller`
    client and, subsequently, service-profile-based routing.
    
    * Prepare HTTP metrics for per-route classification
    
    In order to support Service Profiles, the proxy will add a new scope of
    HTTP metrics prefixed with `route_`, i.e. so that the proxy exposes
    `request_total` and `route_request_total` independently.
    
    Furthermore, the proxy must be able to use different
    response-classification logic for each route, and this classification
    logic should apply to both metrics scopes.
    
    This alters the `proxy::http::metrics` module so that:
    
    1. HTTP metrics may be scoped with a prefix (as the stack is described).
    
    2. The HTTP metrics layer now discovers the classifier by trying to
       extract it from each request's extensions or fall back to a `Default`
       implementation. Only a default implementation is used presently.
    
    3. It was too easy to use the `Classify` trait API incorrectly.
       Non-default classify implementation could cause a runtime panic!
       The API has been changed so that the type system ensures correct
       usage.
    
    4. The HTTP classifier must be configurable per-request. In order to do
       this, we expect a higher stack layer will add response classifiers to
       request extensions when appropriate (i.e., in a follow-up).
    
    Finally, the `telemetry::Report` type requires updating every time a new
    set of metrics is added. We don't need a struct to represent this.
    `FmtMetrics::and_then` has been added as a combinator so that a fixed
    type is not necessary.

commit 4e0a1f0100d1a87e7658e8ffe6906290c370f8f5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Oct 29 14:02:42 2018 -0700

    refactor: Build stacks from bottom-to-top (#111)
    
    Previously, stacks were built with `Layer::and_then`. This pattern
    severely impacts compile-times as stack complexity grows.
    
    In order to ameliorate this, `app::main` has been changed to build
    stacks from the "bottom" (endpoint client) to "top" (serverside
    connection) by _push_-ing Layers onto a concrete stack, i.e. and not
    composing layers for an abstract stack.
    
    While doing this, we take the oppportunity to remove a ton of
    now-unnecessary `PhantomData`. A new, dedicated `phantom_data` stack
    module can be used to aid type inference as needed.
    
    Other stack utilities like `map_target` and `map_err` have been
    introduced to assist this transition.
    
    Furthermore, all instances of `Layer::new` have been changed to a free
    `fn layer` to improve readability.
    
    This change sets up two upcoming changes: a stack-oriented `controller`
    client and, subsequently, service-profile-based routing.

commit 70d2f57e2106dc78939e3d78ac524aa3ba2e34c2
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 26 15:49:31 2018 -0700

    Make `resolve` a stack module (#106)
    
    The `proxy::http::balance` module uses the `proxy::resolve::Resolve`
    trait to implement a `Discover`.
    
    This coupling between the balance and resolve modules prevents
    integrating the destination profile API such that there is a per-route,
    per-endpoint stack.
    
    This change makes the `balance` stack generic over a stack that produces
    a `Discover`. The `resolve` module now implements a stack that produces
    a `Discover` and is generic over a per-endpoint stack.

commit af4dd6fff3d87f197d8a8174a6dd4d90f4c474ac
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 26 15:43:08 2018 -0700

    Use rust:1.30.0 in development builds (#110)

commit 6f031bdca0d34be6b9522a6f9f8a4c067ed4ae6c
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 26 15:03:40 2018 -0700

    Introduce an optional fixed backoff between reconnects (#105)
    
    The control client implements a backoff service that dampens reconnect
    attempts to the control plane by waiting a fixed period of time after a
    failure.
    
    Furthermore, the control client logs errors each time a reconnect
    attempt fails.
    
    This change moves backoff logic from
    control::destination::background::client to proxy::reconnect.
    
    Because the reconnect module handles connection errors uniformly, muting
    repeated errors, it also has enough context to know when a backoff
    should be applied -- when the underlying NewService cannot produce a
    Service.
    
    If polling the inner service fails once the Service has been
    established, we do not want to apply a backoff, since this may
    just be the result of a connection being terminated, a process being
    restarted, etc.

commit 66b1731f19706e43b1d78cf325067c220e7c06a6
Author: Sean McArthur <sean@buoyant.io>
Date:   Fri Oct 26 13:27:31 2018 -0700

    include address in TCP connect error messages
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 68ec7f1488d264c2d6a39f46d6917e7acd293b8b
Author: Sean McArthur <sean@buoyant.io>
Date:   Fri Oct 26 14:08:32 2018 -0700

    fix test import conflict of assert_contains macro
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 2109f375316536a86b9d5f29ebcad2be3e162d9c
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Oct 26 13:30:09 2018 -0700

    Make a generic Watch stack (#104)
    
    The TLS-configuration-watching logic in `app::outbound::tls_config` need
    not be specific to the outbound types, or even TLS configuration.
    
    Instead, this change extends the `watch` stack module with a Stack type
    that can satisfy the TLS use case independently of the concrete types at
    play.

commit 4625302bd915ea3bd265a716d596c7409f1f8187
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Oct 19 14:44:22 2018 -0700

    Remove panic when failing to get remote address (#107)
    
    The listener *already* got the remote address when it was accepted, but we drop the value by using `TcpListener::incoming`. By the time we call `socket.peer_addr()`, the connection may have been closed, and thus we were panicking.
    
    By removing the panic here, later code should notice that the connection is closed (when a `read` finds EOF), and it should be dropped gracefully.
    
    For the same reasons (that the connection might already be closed), this reduces the `error!` from `get_original_dst` to just a `warn!`, just as `set_nodelay` is a `warn!`. No need to yell in that case.
    
    Closes https://github.com/linkerd/linkerd2/issues/1787
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit f1210b4947e27597e9f7ea70bf2b39fc146908f9
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 11 16:08:25 2018 -0700

    Decouple reconnect & connect layers from proxy::http::client (#101)
    
    Previously, the `client` module was responsible for instrument
    reconnects. Now, the reconnect module becomes its own stack layer that
    composes over NewService stacks.
    
    Additionally, the `proxy::http::client` module can now layer over an
    underlying Connect stack.

commit 978fed1cf651c8ed26ba8aa97d774371673275e8
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Oct 11 11:25:03 2018 -0700

    refactor: Structure the proxy in terms of `Stack` (#100)
    
    As the proxy's functionality has grown, the HTTP routing functionality
    has become complex. Module boundaries have become ill-defined, which
    leads to tight coupling--especially around the `ctx` metadata types and
    `Service` type signatures.
    
    This change introduces a `Stack` type (and subcrate) that is used as the
    base building block for proxy functionality. The `proxy` module now
    exposes generic components--stack layers--that are configured and
    instantiated in the `app::main` module.
    
    This change reorganizes the repo as follows:
    - Several auxiliary crates have been split out from the `src/` directory
      into `lib/fs-watch`, `lib/stack` and `lib/task`.
    - All logic specific to configuring and running the linkerd2 sidecar
      proxy has been moved into `src/app`. The `Main` type has been moved
      from `src/lib.rs` to `src/app/main.rs`.
    - The `src/proxy` has reusable, generic components useful for building
      proxies in terms of `Stack`s.
    
    The logic contained in `lib/bind.rs`, pertaining to per-endpoint service
    behavior, has almost entirely been moved into `app::main`.
    
    `control::destination` has changed so that it is not responsible for
    building services. (It used to take a clone of `Bind` and use it to
    create per-endpoint services). Instead, the destination service
    implements the new `proxy::Resolve` trait, which produces an infinite
    `Resolution` stream for each lookup. This allows the `proxy::balance`
    module to be generic over the servie discovery source.
    
    Furthermore, the `router::Recognize` API has changed to only expose a
    `recgonize()` method and not a `bind_service()` method. The
    `bind_service` logic is now modeled as a `Stack`.
    
    The `telemetry::http` module has been replaced by a
    `proxy::http::metrics` module that is generic over its metadata types
    and does not rely on the old telemetry event system. These events are
    now a local implementation detail of the `tap` module.
    
    There are no user-facing changes in the proxy's behavior.

commit 51db6f8be89d4b6e80e487dd89f7adddc1f462e5
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Oct 10 13:10:36 2018 -0700

    Change trust-dns-resolver to a version rather than git dependency (#103)
    
    This branch changes the proxy's `trust-dns-resolver` dependency to a
    version dependency rather than a Git dependency, since the
    `0.10.0-alpha.3` version has the features that we previously required
    the git dependency for.
    
    The only changes to the proxy codebase itself were fixes for deprecation
    warnings introduced by the dependency upgrade, since it was necessary to
    update the minimum `tokio_timer` version as `trust-dns-proto` uses APIs
    added in `tokio-timer` v0.2.6. In particular, `tokio_timer::Deadline`
    was deprecated and replaced by `Timeout`.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 977ff25cb98e1cc317125d7ff2719bbf417f909a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Oct 3 07:51:54 2018 -0700

    Make config variable naming uniform (#99)
    
    There are a few crufty remaining references to the `private` and
    `public` proxy interfaces. `private` referred to the pod-local side of
    the proxy; and `public` the external side.
    
    These terms have been replaced by `inbound` and `outbound` proxies.
    
    The "private forward address" is now the "inbound forward address".
    The "private listener" is now the "outbound listener".
    The "public listener" is now the "inbound listener".
    
    This change adds alternate environment variables to support configuration:
    - `LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT`
    - `LINKERD2_PROXY_INBOUND_FORWARD`
    - `LINKERD2_PROXY_INBOUND_LISTENER`
    - `LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT`
    - `LINKERD2_PROXY_OUTBOUND_LISTENER`
    
    The old configuration variables have not been removed. Instead, a
    warning is logged when such a variable is used to configure the proxy.

commit b4ced35838ca65d78a44998b6e61cdcf3878051d
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 18 16:16:56 2018 -0700

    Fix linkerd2-metrics test compilation (#98)
    
    * Fix linkerd2-metrics test compilation
    
    The `quickcheck` dependency was lost when the subcrate was split out.
    This change restores the dependency.
    
    Fixes linkerd/linkerd2#1685
    
    * Run tests for all packages in `make test`

commit a4d411077660b6c8222152ab1d75b5527ec3d379
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 18 16:02:31 2018 -0700

    Create a `lib` dir for subcrates (#97)
    
    As we extract subcrates from the `src/` directory, the repository root
    becomes a bit cluttered. This change moves these subcrates into a `lib`
    directory.

commit 53a85f442adc1ccefc0943f88d993262e955bd13
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 18 15:09:31 2018 -0700

    Split the `timeout` module into its own subcrate (#96)
    
    The `timeout` module has very little to do with the proxy, specifically.
    
    This change moves it into a dedicated subcrate. This helps to clarify
    dependencies and to minimize generic logic in the main proxy crate.
    
    In doing this, an unused implementation of AsyncRead/AsyncWrite for
    Timeout was deleted.
    
    Furthermore, the `HumanDuration` type has been copied into
    tests/support/mod.rs so that this type need not be part of the timeout
    module's public API.

commit 0861f968d74517929a757ee32260f950a293ec25
Author: Sean McArthur <sean@buoyant.io>
Date:   Fri Sep 14 10:58:34 2018 -0700

    update hyper to v0.12.9
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 66d59dafdef0046bdebc66b1978cb1fd10f56225
Author: Sean McArthur <sean@buoyant.io>
Date:   Fri Sep 14 10:58:03 2018 -0700

    update http to v0.1.13
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 567b1b7ff2d68808b28cab9ec351f70065647940
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 13 16:43:50 2018 -0700

    Move bind::NormalizeUri to its own module in proxy::http (#94)
    
    Split proxy infrastructure from `bind`
    
    In order to simplify `bind.rs`, this change moves `NormalizeUri` into
    its own module, `proxy::http::normalize_uri`.
    
    This will later become part of the "client stack" built from
    `proxy::http`.

commit bbf296668bb9b032018675394735e75c34994c60
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Sep 13 13:45:56 2018 -0700

    Move HTTP-specific `proxy` modules into proxy::http (#93)
    
    To prepare to move http-specific proxying logic from bind.rs into
    proxy, let's carve out a proxy::http module for HTTP-specific behavior.

commit ccd5d219786ce79df572b25e1ee5072e2d6e2068
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Sep 11 16:47:25 2018 -0700

    Introduce a "server stack" (#90)
    
    Previously, `proxy::Server` was generic over a `NewService` (constructed
    in `lib.rs`) that instruments error handling around the router and metrics. In
    preparation of adding a metrics module into the server stack (that is configured
    by the source connection), `Server` should be changed to instantaneously build
    clients with a `MakeClient<Arc<ctx::transport::Server>>`.
    
    In order to do this, the following changes were made:
    
    1. The `svc::NewClient` type was changed to `svc::MakeClient<Target>`. The
        naming change ("New" to "Make") is intended to differentiate the type from
        `NewService`, which is asynchronous and does not accept a `Target` argument.
    2. The `proxy::h2_router` module was split from `lib.rs` and `map_err.rs`.  `MapErr`
        tried to be generic, though we only used it in once place. Now, the `h2_router::Make`
        type supports cloning routers and handling their errors.
    3. The `TimestampRequestOpen` middleware was split into its own file and given a
        `MakeClient` implementation.
    4. The `svc::Layer` trait has been introduced to support layering middlewares like
        `TimestampRequestOpen`. This is analogous to Finagle's `Stack.Module` type.
    
    There are no functional changes.

commit 9f9518a98f373998b77bb60ec1e677769192f7fd
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 10 16:21:05 2018 -0700

    Rename `transparency` to `proxy` (#89)
    
    This change clarifies the naming and role of the `proxy` (née transparency)
    module. There are no functional changes.
    
    `proxy::tcp::Proxy` has been renamed to `proxy::tcp::Forward` to help
    disambiguate terminology: TCP connections may be _forwarded_
    by the proxy server.

commit 216fe16523a2a4434348b7f46b6ccd40acba21ac
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Sep 10 14:27:36 2018 -0700

    Reorder endpoint-specific HTTP middlewares (#88)
    
    Currently, the layered service implementations that comprise the HTTP
    stack are a mix of `Service` and `NewService` types. In the
    endpoint-specific stack. `transparency::Client` is the only layer that
    actually needs to be a `NewService` if it is wrapped immediately with a
    `Reconnect`.
    
    This allows us to remove several `NewService` implementations.
    
    This extracts a new `svc::Reconnect` middleware from `bind`, handling
    connection error logging and hiding `tower_reconnect::Error` from outer
    layers.
    
    Furthermore, two HTTP/1-specific middlewares have been moved outside of
    the TLS rebinding layer, since they are not dependent on TLS
    configuration.
    
    Finally, `bind`'s type aliases have been simplified, removing the
    `HttpRequest` and `HttpResponse` aliases. By removing these, and
    removing `transparency::Client`'s dependency on the telemetry body
    types, it should be easier to change type signatures going forward.

commit b86694546a4f069bbbef2189e682cf91fe3530e1
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 31 15:58:28 2018 -0700

    Remove redundant reconnect logic (#87)
    
    `bind::BoundService` wraps a `Reconnect` service and handles its Connect
    errors. However, `BoundService` exposes `Reconnect`'s Error type to
    callers even though these errors can never be returned.
    
    Furthermore, `Reconnect` is allowed be polled after returning an error,
    triggering the inner service to be rebuilt. We needlessly duplicate this
    logic in `BoundService`.
    
    Before splitting this file up into smaller chunks, let's update
    `BoundService` to more narrowly adhere to `Reconnect`s API:
    
    - Only the inner error type is returned. `unreachable!` assertions
      have been made where error variants cannot be returned.
    - Do not "rebind" the stack explicitly. Instead, let `Reconnect` do
      this.
    - Now BoundService::call may panic if invoked before poll_ready. It's a
      programming error, since `Reconnect` requires that `poll_ready` be
      called first.

commit d98c83404b7af83154d3d8fb38564da86cdf1e6e
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 28 15:48:28 2018 -0700

    Move `control::Bind` to `svc::NewClient` (#86)
    
    The `control::destination` exposes an important trait, `Bind`, that
    abstracts the logic of instantiating a new service for an individual
    endpoint (i.e., in a load balancer).
    
    This interface is not specific to our service discovery implementation,
    and can easily be used to model other types of client factory.
    
    In the spirit of consolidating our HTTP-specific logic, and making the
    core APIs of the proxy more visible, this change renames the `Bind`
    trait to `NewClient`, simplifies the trait to have fewer type
    parameters, and documents this new generalized API.

commit 8ea9a3644dd527bb4908ff89f62fb9ccf1745289
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 24 15:09:36 2018 -0700

    Move telemetry::transport to transport::metrics (#85)
    
    Following #84, the `telemetry::transport` module can be moved into the
    `transport` module.
    
    This should allow us to simplify type signatures by combining redundant
    types. It's also hoped that we can reduce the API boilerplate around
    metrics so it's much easier to instrument and track new metrics in
    transport code.

commit 8a9a9bf26b3901fdd345a96e6cf8f39ca4d1bf49
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 24 14:53:53 2018 -0700

    Move telemetry::metrics into dedicated crate (#84)
    
    The `metrics!` macro is currently local to the telemetry module.
    Furthermore, the `telemetry::metrics` module no longer has
    proxy-specific logic.
    
    This change moves the `telemetry::metrics` module into a new crate,
    `linkerd2_metrics`.
    
    This will enable unifying `telemetry::http` and `telemetry::transport`
    into `http` and `transport`, respectively.

commit d38f686c5e7a6941cd8b1fdeae0572cb7e5ae5cf
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 22 18:49:41 2018 -0700

    Move metrics server into control module (#83)
    
    The metrics Service implementation that renders prometheus metrics can
    be used independently of any specific listener.
    
    This change moves the binding and listening details into the `control`
    module, as this seems like the best umbrella for the specifics of
    serving things to the control plane.

commit 60683aeca3df1b559ef64c09e2d9113d37bdd301
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 22 17:43:17 2018 -0700

    Make telemetry::metrics application-agnostic (#82)
    
    Now that transport details have been separated into modules, the
    `metrics::Root` type makes more sense as a `telemetry::Report` type.
    With this change, the `telemetry::metrics` module holds only the
    abstract structural details of metrics reporting.
    
    To this end:
    - `metrics::Root` is now `telemetry::Report`
    - `metrics::Serve` is now generic over `FmtMetrics`. It's only an
      implementation detail that the `telemetry::Report` type is used.
    - all _Report_ types now implement `Clone` so that the main report
      can be cloned for each connection (i.e. from prometheus).

commit d6d05905f1511ebb4d6225a4223cc86a6a52d87f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 22 16:20:51 2018 -0700

    Move metrics eviction into telemetry::http (#81)
    
    The metrics server is responsible for evicting unused metrics, which
    seems like an unnecessary coupling with the storage implementation.
    
    This change moves this logic into `telemetry::http` so that the
    eviction strategy is specific to the implementation.
    
    Now that the metrics structure is shared internally to `http`,
    `Report`'s implementation of `FmtMetrics` can evict expired metrics.
    
    There are no functional changes.

commit dfcc0086b8bed82ec964186e56fe81982d9b5650
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 22 15:17:11 2018 -0700

    Hide HTTP telemetry implementation details (#80)
    
    Previously, much of `telemetry::http`'s types and internal
    implementation details are exposed to the rest of the telemetry system.
    In preparation for further changes to support more granular locking,
    this change makes metric storage and recording implementation details.
    
    Following this, `telemetry::http` exposes a `Report` type for printing
    metrics to the server and a `Sensors` type used to instrument stacks
    with HTTP telemetry. These types share an internally-mutable metrics
    registry that is private to the http module.
    
    The `event` types continue to be exposed to support Tap, but the
    convenience exports have been removed.
    
    The `metrics::Root` type no longer needs to be shareable. This type will
    be replaced in a followup change.

commit b0526e4af7cdea4f427ab33dc444f94a5b599064
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 21 15:17:38 2018 -0700

    Consolidate HTTP telemetry in telemetry::http (#79)
    
    In preparation for further simplifications to HTTP telemetry, this
    change consolidates all HTTP-specific logic under the `telemetry::http`
    module.
    
    Specifically, the following modules have been moved:
    - `telemetry::event`;
    - `telemetry::metrics::labels`;
    - `telemetry::metrics::record`;
    - `telemetry::sensors`; and
    - `telemetry::sensors::http`.
    
    This change takes pains to avoid changing any implementation details, so
    some types and methods have been made public temporarily while the
    interface boundaries are not well defined. This will be fixed in a
    subsequent change.

commit 40e9ffcaf84593411625dad6ae278281a2d3e6aa
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 21 10:43:47 2018 -0700

    Require Sensors for Bind (#78)
    
    `Bind` was initially written so that a `Sensors` implementation is
    optional. Over time, this hasn't proven to be very useful.
    
    In preparation for further changes to HTTP telemetry, this change
    simplifies the Bind and Sensors types so that an HTTP sensor is always
    required to construct `Bind`.
    
    Test-only constructors have been added to satisfy the case where Sensors
    were omitted.

commit 447f3320a76107d94c2469078d035ad473816a8d
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 20 15:54:16 2018 -0700

    Record transport telemetry without Events (#76)
    
    Previousy, transport telemetry was recorded by emitting Events from an
    IO instance to an aggegator. This requires that each update take a
    global telemetry lock, and is an impediment to richer telemetry.
    
    This change removes the transport event types so that the Event and
    Record types are left only to represent HTTP telemetry. Now, the
    transport's IO type holds a reference to a shared `Metrics` structure.
    As the transport is used, metric values are updated immediately.
    
    A lock on the transport _registry_ is taken whenever a new transport is
    opened/accepted and when metrics are reported. Each transport class's
    metrics are now shared & locked independently, so it's possible for a
    transport to update its metrics while the registry is being manipulated.
    
    This has one functional change: the `tcp_read_bytes_total` and
    `tcp_write_bytes_total` counters are now updated instantaneously.
    Previously these values were only incremented on transport close, which
    is misleading, especially for long-lived connections.
    
    With this change, all transport-related telemetry logic lives in
    `telemetry::transport`.

commit 912b9d3b7c2fd274a657feeb9a45be0c6e63c3d5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 20 15:02:50 2018 -0700

    Split transport metrics into read and write halves (#74)
    
    In anticipation of removing Transport-related Event types, we want to
    separate the concerns of recording transport metrics updates from
    reporting them to the metrics endpoint.
    
    The transport module has been split into `Registry` and `Report` types:
    `Registry` is responsible for recording updates, and `Report` is
    responsible for rendering metrics.

commit 6b4b35b083511616e7571ca4e9c35259f363cd0a
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Aug 20 13:40:58 2018 -0700

    update rustls for async IO bug (#75)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 652dfb7fc31437f8c46dbe70febff174c5772fbc
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 20 09:27:56 2018 -0700

    Revert "travis: Avoid caching proxy binaries (#69)" (#77)
    
    This reverts commit c64d7aa0e5601228786ca5e968710a68cc62afbd.
    
    The CI change introduced in #69 appears to break the master build.

commit 58ed628308e0c26a9bf5cc8ac3a950f800b26877
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 17 15:09:43 2018 -0700

    Remove the labels::TlsStatus type (#73)
    
    Following #67 and #68, the `labels::TlsStatus` type can be removed in
    favor of extending underlying `ctx::transport::TlsStatus` type to
    implement `FmtLabels`.

commit 35b47fb3a098549acb74ce29d90e1fc8042578b4
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 17 14:50:52 2018 -0700

    Remove the labels::Direction type (#72)
    
    Following #67 and #68, the `labels::Direction` type can be replaced with
    an `impl FmtLabels for ctx::Proxy`.

commit e3df08678dec558d53f7a0c0b2f30f55b38b602a
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Aug 16 11:42:04 2018 -0700

    update hyper 0.12.7 to 0.12.8
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 823f981ec838ddfa527f05ea2e5c56a0ed1ab1e4
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Aug 16 11:31:58 2018 -0700

    update futures 0.1.21 to 0.1.23
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit a43bd34ad22ab98a334c4e867d110e9a2ad11c4d
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Aug 16 11:28:35 2018 -0700

    update h2 0.1.11 to 0.1.12
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 747edb54e33042acc15e47cc31bac32c04e1284a
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Aug 16 11:28:08 2018 -0700

    update bytes 0.4.7 to 0.4.9
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit c64d7aa0e5601228786ca5e968710a68cc62afbd
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 17 13:13:49 2018 -0700

    travis: Avoid caching proxy binaries (#69)
    
    There's no reason that we should ever need to cache proxy binaries
    between CI runs.
    
    For instance, for each pull request build we appear to cache a ~125M
    binary.
    
    Cache interactions seem to account for much of our CI times, so any
    reduction here is helpful.

commit 279611d409cbd422493cdb712ca4bb5d5d9f856f
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 16 17:44:31 2018 -0700

    Make telemetry::metrics::labels::DstLabels private (#71)
    
    The `DstLabels` type has a large an undefined scope. Over time, it's
    become critical in a variety of contexts, even outside of the scope of
    prometheus endpoint labels.
    
    This change makes `DstLabels` private to the
    `telemetry::metrics::labels` module. This more clearly separates the
    concerns of prometheus labeling from discovery, etc.
    
    Now, destination metadata includes an index map of arbitrary metadata
    labels.
    
    Previously, dst label strings would be formatted eagerly at
    service-discovery-time. This change moves this string formatting into
    the data path(!). I think this is an acceptable tradeoff temporarily,
    while we work to stop constructing RequestLabels in the data path
    altogether.

commit 1d1d76aa5b5e3b2ba715b9e64fcd8bb12dd64384
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 16 10:51:03 2018 -0700

    Introduce the FmtMetrics and FmtLabels traits (#67)
    
    There are many different types of things that implement `fmt::Display`
    in the metrics library: lists of key-value labels, individial label keys
    or values, groups of metrics output, etc. While modifying metrics code,
    it can be very easy to use something that's not a label in the context
    of a label.

commit 6dde18cf343a90d3f63ccbd0684af92c2a6167fa
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 15 16:27:57 2018 -0700

    Delete ctx::Process (#68)
    
    In order to start dismantling the monolithic ctx structures, this change
    removes the root `ctx::Process` type. This simplifies `ctx::Proxy` such
    that is copyable and need not be `Arc`ed.
    
    `telemetry::metrics::labels::Direction` has been updated to decorate
    `ctx::Proxy` instead of modeling the same variants directly as an enum.

commit 48b7383ff096c150507623247e2e1d08ded5df6f
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 14 16:29:07 2018 -0700

    Store transport metrics hierarchically (#66)
    
    Previously, transport metrics have been stored in two "scopes": an
    "open" scope, storing metrics by transport class, and a "close" scope
    storing metrics by transport and end-of-stream classes.
    
    Instead of storing these as parallel maps, this changes transport
    metrics to be stored hierarchically so that the end-of-stream metrics
    are stored _within_ the transport metrics type.
    
    This will make it possible to share the transport metrics structure
    directly with the transport wrapper so that a global lock need only be
    taken at connect-time. Subsequent updates will then be scoped to the
    shared transport structure.
    
    This helps to setup linkerd/linkerd2#1430, among other improvements.
    
    Furthermore, the `Scopes` type is no longer used for transport metrics,
    since it's much easier to use the full affordances of `indexmap`,
    especially now that it isn't part of an API.

commit b9051f0f457374b6ad16e3550eb1212c0ab49a83
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 14 15:11:17 2018 -0700

    Narrow transport metric's API (#65)
    
    The `telemetry::metrics::transport` module exposes much of its
    implementation details to callers, which makes it difficult to make
    changes to how the module is structured. In preparation for further
    refactors, this change narrows the module's public API:
    
    All labels and scopes types have been made private. A single, public
    `Transports` type has been introduce to describe the entire public
    interface of the module. This has been crafted to be free of `event`
    types and to have minimal external dependencies.
    
    A new `transport::Eos` type has been introduced to replace the
    overloaded `labels::Classification` type -- this type was initially
    introduced to model _HTTP response_ classification, but it was
    reused for transports. This is an undesirable coupling that will have to
    be broken when we start to adddress HTTP response classification
    properly.

commit d0e1e71bff39bc454faf3e7845695494d2eb3695
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 14 12:43:18 2018 -0700

    Relax Metric::fmt_scopes' type bounds (#64)
    
    005d4f1 made `Metric::fmt_scopes` generic over an Iterator, but
    maintained some of the unnecessary type bounds inherited from its
    initial implementation.
    
    This change relaxes the constraints on the label value so that it need
    not be passed as a reference or be hashable--our only requirement is
    that it can be rendered.

commit 0d890dab6bc8aa854261f3b4a25423921f1a9725
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Aug 14 12:32:41 2018 -0700

    Mark tcp_connect_err tests as macos-specific (#63)
    
    The `tcp_connect_err` tests do not pass on Linux.
    
    I initially observed that the errno produced is ECONNREFUSED on Linux,
    not EXFULL, but even changing this does not help the test to pass
    reliably, as the socket teardown semantics appear to be slightly
    different.
    
    In order to prevent spurious test failures during development, this
    change marks these two tests as macos-specific.

commit 7131d3ccae70607ff2ea6d7862ff5bd104485db8
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 10 14:29:28 2018 -0700

    Consolidate labels into metrics::transport (#57)
    
    Various transport-specific labels are defined in the common
    `metrics::labels` module.
    
    In preparation to refactor transport metrics into Sensor and Report
    halves, this change moves all transport-specific labels into the
    transport metrics module.

commit 37d6e56f3ad45c771a9861a726d11526e591cbea
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 10 11:41:36 2018 -0700

    Make `metrics` private to `telemetry` (#59)
    
    Only the `DstLabels` and `Serve` types in `metrics` are used outside of
    `telemetry`.
    
    This change narrows visibility so that `metrics` is not referenced
    outside of `telemetry`.

commit 005d4f19c6e17e817f6507a04bd24e2478b15034
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 10 11:16:06 2018 -0700

    Make `Metric::fmt_scopes` generic over an Iterator (#60)
    
    The `Scopes` type shouldn't be critical to metrics formatting.
    
    This change makes the `Metric` type unaware of `Scopes` so that other
    labeling mechanisms can be used if appropriate.

commit f7a35442be6d945db4b548d84fc8d02db2c4d9fd
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 10 10:59:36 2018 -0700

    Remove `record` benches (#58)
    
    As we begin to remove event-based metrics telemetry, the `record` bench
    test becomes an obstacle that needs to be updated at every step.
    
    Given that we have already removed the event channel and plan to remove
    the `Record` type entirely, it's suitable to remove the bench test
    entirely.
    
    While this is done, the `test-benches` Make target and rust-nightly
    travis stage are obsoleted.

commit da591802af2b09528424126db1ecc14a5f571f53
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Aug 10 10:20:47 2018 -0700

    Extract metrics::Scopes into its own module (#55)
    
    The metrics::Scopes type exposes its internal implementation to many of
    its uses.
    
    By extracting the type into its own module, we are forced to provide an
    explicit public interface, hiding its IndexMap implementation details.

commit 5a70495496192586488913b3bd90f963a2f3895c
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 9 17:47:05 2018 -0700

    Move metrics::tls_config_reload into telemetry (#53)
    
    Following on #52, this change moves the
    `telemetry::metrics::tls_config_reload` module to
    `telemetry::tls_config_reload`.
    
    The `Fmt` type has been renamed to `Report`.
    
    Furthermore, two helper methods have been added to `metrics::Scopes` so
    that its internal representation need not be made public.

commit 6ddf38f2a70d592b60898178f22933a109e21775
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 9 14:33:13 2018 -0700

    Move Errno into telemetry (#52)
    
    Following on #50, this change moves the `Errno` types into `telemetry`
    so that metrics implementation can be moved out of the `metrics` module.

commit 7cdb5bd7905cf54cd365feedd71a66b96743af01
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 9 12:33:40 2018 -0700

    Move telemetry::metrics::process into telemetry (#51)
    
    As a follow-on to #50, which begins to tease apart metrics
    infrastructure from application logic, this change moves the
    `telemetry::metrics::process` module into `telemetry::process`.
    
    The `Process` type has been renamed to `Report` and some other minor
    cosmetic changes have been made.

commit 4c4edfba2b63c8013a87c674be03a97249410af5
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Aug 9 11:24:32 2018 -0700

    Fix syntax for windows-only error labels (#54)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 009b5bc32e85fbb57ca730a777413b9763f7fd50
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 9 11:01:51 2018 -0700

    Make `metrics!` visible within `telemetry` (#50)
    
    The `telemetry::metrics` module has a mix of core metrics types and
    application-specific code. I'd like to change this module to only
    contain core types. All app-specific module will be moved into
    `telemetry`.
    
    In order to make these changes, the `metrics!` macro (and related types)
    must be visible to to `telemetry`. This change moves the macro
    definition into the parent mod.rs, and makes the `Metric`, `FmtMetric`,
    and `Scopes` types public.
    
    In subsequent PRs, app-specific logic will be moved from
    `telemetry::metrics` to `telemetry`, and the `telemetry::metrics`
    module's public API will be minimized.

commit 0394df0cca53d48671319494192b6b515fb01121
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Aug 9 11:01:25 2018 -0700

    Stop tracking transport metrics for eviction (#49)
    
    Metric eviction was introduced to protect against the situation where,
    over time, the proxy addresses an effectively unbounded number of
    endpoints. Metrics with endpoint-specific dimensions must be removed
    over time to prevent a form of memory leak.
    
    Eviction is implemented for transport stats. However, transport stats do
    not yet contain per-endpoint dimensions. The eviction logic is
    superfluous in this case, since transport metrics are bounded and small.
    
    In preparation of changes to transport telemetry, this disables tracking
    of transport metrics for eviction. This logic will be restored when we
    support per-endpoint transport metrics.

commit 56f72dc5f18c92a54a7f2de471ab61c3175c77f6
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 8 15:57:04 2018 -0700

    Move mk_err_enum into errno module (#48)
    
    The `mk_err_enum` macro is only used in one place: the `labels::errno` module.
    
    In order to make the main `labels` module simpler, the macro definition
    can by moved into the errno module. If this macro is really generally
    useful, it can be factored out later.

commit 2a197dab92a2d24f30e3742369a0f6b490d250a3
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 8 14:25:51 2018 -0700

    Update Dockerfile to use rust:1.28.0 (#47)

commit abc75a506dc3aa91465a863d7e99446efb92cce9
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 8 14:21:19 2018 -0700

    Share a common tls_config_reload metrics object (#46)
    
    The current implementation of TLS config reload telemetry has several
    layers: a sensor emits events into a dispatcher that updates metrics.
    
    This can be simplified by sharing a common metrics object between the
    metrics registry and config module.
    
    The metrics registry is updated to hold a read-only `tls_config_reload::Fmt`;
    and the config module holds a `tls_config_reload::Sensor`.
    
    The `Sensor` type holds a strong reference to an inner metrics
    structure and acquires a lock on updates.
    
    The `Fmt` type holds a weak reference to the metrics structure so
    that the metrics server can print the state as long as it's actually held
    in memory.  If the `Sensor` is dropped (for instance, because TLS has
    been administratively disabled), then no metrics will be formatted by
    `Fmt`.

commit 9912f4577b3c0e689046260a63d967abc546078b
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 8 11:03:15 2018 -0700

    Consolidate telemetry::metrics::tls_config_reload (#45)
    
    Details of TLS configuration reload metrics span several modules.
    
    This change consolidates all of this logic into a single
    module with a single public type, `TlsConfigReload`, that supports
    recording successful reloads, recording errors, and formatting its
    current state.
    
    This sets up further simplifications, eventually leading to the removal
    of the `Event` API.

commit 47b0f0402d1ec8984a80cbbbc8af53e47d31f2c2
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Aug 7 11:00:42 2018 -0700

    strip other connection-level headers from HTTP/1 (#43)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 68f9a427d653f06289cde594cfad1934b035c951
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Aug 6 16:20:32 2018 -0700

    fix orig-proto translation with HTTP1 chunked bodies (#42)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 4e79348af7f7eb12bb3f2003c664d6fb89448d2e
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Aug 6 14:09:33 2018 -0700

    Fully encapsulate process metrics in `mod process` (#41)
    
    The `process` module exposes a `Sensor` type that is different from
    other types called `Sensor`. Most `Sensor` types instrument other
    types with telemetry. The `process::Sensor` type, on the other hand,
    is used to read system metrics from the `/proc` filesystem, returning
    a metrics summary.
    
    Furthermore, `telemetry::metrics::Root` owns the process start time
    metric.
    
    In the interest of making the telemetry system more modular, this moves
    all process-related telemetry concerns into the `process` module.
    Instead of exposing a `Sensor` that produces metrics, a single public
    `Process` type implements `fmt::Display` directly.
    
    This removes process-related concerns from `telemetry/metrics/mod.rs` to
    setup further refactoring along these lines.

commit 1774c874004273a9921e85c9bcd8bdaceabb7585
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Aug 3 17:00:20 2018 -0700

    Refactor control::destination::background::client module (#38)
    
    This branch should not make any functional changes.
    
    This branch makes two minor refactorings to the `client` module in
    `control::destination::background`:
    
     1. Remove the `AddOrigin` middleware and replace it with the
        `tower-add-origin` crate from `tower-http`. These middlewares are
        functionally identical, but the Tower version has tests.
     2. Change `ClientService` from a type alias to a tuple struct. This
        means that some of the middleware that are used only in this module
        (`LogErrors` and `Backoff`) are no longer part of a publicly visible
        type and can be made private to the module.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit ab1b280de813126f1e0686315cac1312f0f11aad
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Aug 3 15:03:14 2018 -0700

    Add orig-proto which uses HTTP2 between proxies (#32)
    
    When the destination service returns a hint that an endpoint is another
    proxy, eligible HTTP1 requests are translated into HTTP2 and sent over
    an HTTP2 connection. The original protocol details are encoded in a
    header, `l5d-orig-proto`. When a proxy receives an inbound HTTP2
    request with this header, the request is translated back into its HTTP/1
    representation before being passed to the internal service.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 1e24aeb6152e4b61a50e6be79900b97e44980c3c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Aug 2 16:40:12 2018 -0700

    Limit concurrent Destination service queries (#36)
    
    Required for linkerd/linkerd2#1322.
    
    Currently, the proxy places a limit on the number of active routes
    in the route cache. This limit defaults to 100 routes, and is intended
    to prevent the proxy from requesting more than 100 lookups from the
    Destination service.
    
    However, in some cases, such as Prometheus scraping a large number of
    pods, the proxy hits this limit even though none of those requests
    actually result in requests to service discovery (since Prometheus
    scrapes pods by their IP addresses).
    
    This branch implements @briansmith's suggestion in
    https://github.com/linkerd/linkerd2/issues/1322#issuecomment-407161829.
    It splits the router capacity limit to two separate, configurable
    limits, one that sets an upper bound on the number of concurrently
    active destination lookups, and one that limits the capacity of the
    router cache.
    
    I've done some preliminary testing using the `lifecycle` tests, where a
    single Prometheus instance is configured to scrape a very large number
    of proxies. In these tests, neither limit is reached. Furthermore, I've added
    integration tests in `tests/discovery` to exercise the destination service
    query limit. These tests ensure that query capacity is released when inactive
    routes which create queries are evicted from the router cache, and that the
    limit does _not_ effect DNS queries.
    
    This branch obsoletes and closes #27, which contained an earlier version of
    these changes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 18a8d7956db7cc06434993d507b9a16a1c6a0b34
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Aug 1 17:25:49 2018 -0700

    Improve tcp_connect_err test flakiness (#37)
    
    Both tcp_connect_err tests frequently fail, even during local
    development. This seems to happen because the proxy doesn't necessarily
    observe the socket closure.
    
    Instead of shutting down the socket gracefully, we can just drop it!
    This helps the test pass much more reliably.

commit 37164afb3a414b68d0b5ff0bfe48c87248702a8b
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Aug 1 15:37:48 2018 -0700

    refactor: Make `Background::query_destination_service_if_relevant` into a method (#35)
    
    This is strictly a refactor which should make no functional changes.
    
    Currently, the function used to construct new Destination service
    queries (`Background::query_destination_service_if_relevant`) is a
    function rather than a method on `Background`, although it takes as an
    argument a field from `Background`. This is because in some cases, it is
    called where `self.destinations` is borrowed mutably, preventing `self`
    from being borrowed immutably.
    
    Right now, this means that one additional field has to be passed
    explicitly. However, in order to add the limit on active Destination
    service queries, it was necessary to add two additional fields to
    `Background` that have to be passed to this function. Since these
    arguments should always come from fields on `Background`, it would be
    preferable for this to be a method.
    
    This branch breaks out some of the fields on
    `control::destination::Background` into their own structs:
    `DestinationCache`, which holds the map of DNS names to
    `DestinationSet`s and the queue of DNS names that need reconnects; and
    `Config`, which holds the configuration necessary to create a new
    Destination service query (currently just the `Namespaces` config). This
    allows us to have separate borrows on the `DestinationCache` and
    `Config`.
    
    When I make the additional changes necessary to add the limit on active
    destination queries, the two additional fields necessary can be added to
    `Confiq`, rather than having to explicitly pass them into
    `query_destination_service_if_relevant` every time it's called.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a615834f7b72d234e2c09f437e1e045ba20928ff
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Aug 1 14:14:34 2018 -0700

    Refactor `control::destination::background` into smaller modules (#34)
    
    This branch is purely a refactor and should result in no functional
    changes.
    
    The `control::destination::background` module has become quite large,
    making the code difficult to read and review changes to. This branch
    separates out the `DestinationSet` type and the destination service
    client code into their own modules inside of `background`. Furthermore,
    it rolls the `control::utils` module into the `client` submodule of
    `background`, as that code is only used in the `client` module.
    
    I think there's some additional work that can be done to make this code
    clearer beyond simply splitting apart some of these large files, and I
    intend to do some refactoring in additional follow-up branches.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 51e07b2a689c8b88977f1307da75b04ba07ea99d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 31 12:12:26 2018 -0700

    Update h2 version to v0.1.11 (#33)
    
    This branch updates the proxy's `h2` dependency to v0.1.11. This version
    removes a busy loop when shutting down an idle server
    (carllerche/h2#296), and fixes a potential panic when dropping clients
    (carllerche/h2#295).
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b2fcd5d27694b577c2a3b30b414e5a87e5600247
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jul 26 11:16:27 2018 -0700

    Remove the telemetry system's event channel (#30)
    
    The proxy's telemetry system is implemented with a channel: the proxy thread
    generates events and the control thread consumes these events to record
    metrics and satisfy Tap observations. This design was intended to minimize
    latency overhead in the data path.
    
    However, this design leads to substantial CPU overhead: the control thread's
    work scales with the proxy thread's work, leading to resource contention in
    busy, resource-limited deployments. This design also has other drawbacks in
    terms of allocation & makes it difficult to implement planned features like
    payload-aware Tapping.
    
    This change removes the event channel so that all telemetry is recorded
    instantaneously in the data path, setting up for further simplifications so
    that, eventually, the metrics registry properly uses service lifetimes to
    support eviction.
    
    This change has a potentially negative side effect: metrics scrapes obtain
    the same lock that the data path uses to write metrics so, if the metrics
    server gets heavy traffic, it can directly impact proxy latency. These
    effects will be ameliorated by future changes that reduce the need for the
    Mutex in the proxy thread.

commit 7788f60e0ef92b51f69828be689683db22f964b9
Author: Markus Jais <markusjais@googlemail.com>
Date:   Wed Jul 25 22:10:59 2018 +0200

    fixed some typos in comments and Dockerfile (#25)
    
    Signed-off-by: Markus Jais <markusjais@googlemail.com>

commit 9a19457ca1b57cccd0755965389287c36fb0be11
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jul 24 17:32:23 2018 -1000

    Add initial tests for client and server connection handling w.r.t. TLS. (#28)
    
    * Add initial tests for client and server connection handling w.r.t. TLS.
    
    Add a simple framework for TLS connection handling and some initial tests
    that use it.
    
    An explicit effort has been made to keep the test configuration as close to the
    production configuration as possible; e.g. we use regular TCP sockets instead of some
    mock TCP sockets. This matters less now, but will matter more later, if/when we
    implement more low-level TLS-over-TCP optimizations.
    
    Rename `ConnectionConfig::identity` to `ConnectionConfig::server_identity` to make
    it clearer that it is always the identity of the server, regardless of which role
    the `ConnectionConfig` is being used in.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 04a8ae3edfbd7a358ba45063b66c5bee47f3d3e1
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Jul 23 18:33:55 2018 -0700

    update to hyper 0.12.7 to fix a keep-alive bug (#26)
    
    Specifically proxied bodies would make use of an optimization in hyper
    that resulted in the connection not knowing (but it did know! just
    didn't tell itself...) that the body was finished, and so the connection
    was closed. 0.12.7 includes the fix in hyper.
    
    As part of this upgrade, the keep-alive tests have been adjusted to send
    a small body, since the empty body was not triggering this case.

commit 2d4086aee98d224ec4868d723bfd1d8beac76587
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jul 23 15:37:04 2018 -0700

    Add errno label to transport close metrics (when applicable) (#12)
    
    This branch adds a label displaying the Unix error code name (or the raw
    error code, on other operating systems or if the error code was not
    recognized) to the metrics generated for TCP connection failures.
    
    It also adds a couple of tests for label formatting.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b3b578be390bb72e314c836f5650c4847ec7ec1d
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jul 20 10:40:50 2018 -1000

    Configure listen ports' TLS when constructing them. (#21)
    
    The way TLS is done for a bound port is fixed based on its role and whatever
    the TLS settings are, so it makes sense to configure the TLS aspects of the
    bound port during construction. This will also make writing tests easier.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 448605b4c35005e42262836644b1e4d2a6ea9240
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jul 20 10:21:25 2018 -1000

    Allow TLS configuration watches to start before telemetry. (#19)
    
    Previously it wasn't possible to create objects that need to watch the TLS
    configuration until the telemetry sensors were created. Split the watching
    initialization into two parts so that in the (near) future TLS-using objects can
    be created before the telemetry sensors are created.
    
    This will allow us to initialize `BoundPort` with the TLS settings during
    creation instead of later in `BoundPort::listen_and_fold()`. This will also
    facilitate TLS testing.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 38058eb7d86244467149e0af278340c080c7535a
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jul 20 10:20:50 2018 -1000

    Reduce visibility of some `transport::connection` items. (#20)
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 6a81e1f137a73f37ce340c3cc225cd660e38d854
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 19 16:38:31 2018 -0700

    Improve error messages in logs (#18)
    
    Currently, the messages that the proxy logs on errors are often not
    very useful. For example, when an error occurred that caused the proxy
    to return HTTP 500, we log a message like this:
    
    ```
    ERR! proxy={server=in listen=0.0.0.0:4143 remote=127.0.0.1:57416} linkerd2_proxy turning Error caused by underlying HTTP/2 error: protocol error: unexpected internal error encountered into 500
    ```
    
    Note that:
    + Regardless of what the error actually was, the current log message
      *always* says protocol error: unexpected internal error encountered,
      which is both fairly unclear *and* often not actually the case.
    + Regardless of whether the error was encountered by an HTTP/1 or
      HTTP/2 client, the error message always includes the string
      "underlying HTTP/2 error". This is probably fairly confusing for
      users who are, say, only proxying HTTP/1 traffic.
    
    This branch fixes several related issues around the clarity of the
    proxy's error messages:
    
    + A couple cases in the `transparency` module that returned
      `io::Error::from(io::ErrorKind::Other)` have been replaced with
      more descriptive errors that propagate the underlying error. This
      necessitated adding bounds on some error types.
    + Introduced a new `transparency::client::Error` enum that can be
      either a `h2::Error` or a `hyper::Error`, depending on whether
      the client is HTTP/1 or HTTP/2, and proxies its' `std::error::Error`
      impl to the wrapped error types. This way, we don't return a
      `tower_h2::client::Error` (with format output that includes the
      string "HTTP/2") from everything, and discard significantly less
      error information.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 04e4b4409b998d162735666f5b58b322627de46b
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jul 19 15:48:43 2018 -0700

    update httparse to v1.3.2
    
    Allows using SIMD instructions when parsing.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 11e7eb6357701ed2b0c40bd2811584d3906d9103
Author: Sean McArthur <sean@buoyant.io>
Date:   Thu Jul 19 15:47:33 2018 -0700

    update hyper to v0.12.6
    
    Brings in fix to reduce connection churn related to keep-alive racing.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 30a48a7d8bef578cb2bc3bfafcdc71c82302bdba
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jul 18 17:06:45 2018 -0700

    Accept TLS connnections even when TLS configuration isn't available (#22)
    
    Closes linkerd/linkerd2#1272.
    
    Currently, if TLS is enabled but the TLS configuration isn't available
    (yet), the proxy will pass through all traffic to the application.
    However, the destination service will tell other proxies to send TLS
    traffic to the pod unconditionally, so the proxy will pass through TLS
    handshakes to the application that are destined for the proxy itself.
    
    In linkerd/linkerd2#1272, @briansmith suggested that we change the
    proxy so that when it hasn't yet loaded a TLS configuration, it will
    accept TLS handshakes, but fail them. This branch implements that
    behaviour by making the `rustls::sign::CertifiedKey` in `CertResolver`
    optional, and changing the `CertResolver` to return `None` when
    `rustls` asks it to resolve a certificate in that case. The server
    config watch is now initially created with `Conditional::Some` with an
    empty `CertResolver`, rather than `Conditional::None(NoConfig)`, so
    that the proxy will accept incoming handshakes, but fail them.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io

commit f208acb3a5f7d6dd86e361ec0e5222a4a035f9ed
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 17 15:48:02 2018 -0700

    Fix incorrect process_cpu_seconds_total metric (#7)
    
    Fixes linkerd/linkerd2#1239.
    
    The proxy's `process_cpu_seconds_total` metric is currently calculated
    incorrectly and will differ from the CPU stats reported by other
    sources. This is because it currently calculates the CPU time by summing
    the `utime` and `stime` fields of the stat struct returned by `procinfo`.
    However, those numbers are expressed in _clock ticks_, not seconds, so
    the metric is expressed in the wrong unit.
    
    This branch fixes this issue by using `sysconf` to get the number of
    clock ticks per second when the process sensor is created, and then
    dividing `utime + stime` by that number, so that the value is expressed
    in seconds.
    
    ## Demonstration:
    
    (Note that the last column in `ps aux` output is the CPU time total)
    ```
    eliza@ares:~$ ps aux | grep linkerd2-proxy | grep -v grep
    eliza    40703  0.2  0.0  45580 14864 pts/0    Sl+  13:49   0:03 target/debug/linkerd2-proxy
    eliza@ares:~$ curl localhost:4191/metrics
    # HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
    # TYPE process_cpu_seconds_total counter
    process_cpu_seconds_total 3
    # HELP process_open_fds Number of open file descriptors.
    # TYPE process_open_fds gauge
    process_open_fds 19
    # HELP process_max_fds Maximum number of open file descriptors.
    # TYPE process_max_fds gauge
    process_max_fds 1024
    # HELP process_virtual_memory_bytes Virtual memory size in bytes.
    # TYPE process_virtual_memory_bytes gauge
    process_virtual_memory_bytes 46673920
    # HELP process_resident_memory_bytes Resident memory size in bytes.
    # TYPE process_resident_memory_bytes gauge
    process_resident_memory_bytes 15220736
    # HELP process_start_time_seconds Time that the process started (in seconds since the UNIX epoch)
    # TYPE process_start_time_seconds gauge
    process_start_time_seconds 1531428584
    eliza@ares:~$
    ```
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1fdcbfaba6a748b6a7a71921417a4b492c01ff32
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jul 17 09:22:17 2018 -1000

    Replace "conduit" with "linkerd" in TLS test data. (#17)
    
    This is purely aesthetic; the TLS logic doesn't care about the product name.
    
    The test data was regenerated by re-running gen-certs.sh after modifying it.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit e1b4e66836dcee22787f8a50623a38b67bc24765
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jul 17 09:21:59 2018 -1000

    Upgrade TLS dependencies. (#16)
    
    Fixes linkerd/linkerd2#1330.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 162f53dc8d5a8b6db6487994aa956b37cd6a6ace
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Jul 17 11:50:57 2018 -0700

    spawn individual admin tasks instead of joining all (#10)
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 2ac114ba652ef466a51ffbd9d757904ee43b3550
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 17 10:21:40 2018 -0700

    Point inotify dependency at master (#14)
    
    Now that inotify-rs/inotify#105 has merged, we will no longer see
    rampant CPU use from using the master version of `inotify`. I've
    updated Cargo.toml to depend on master rather than on my branch.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit aa60ddb08859e6681ca8e8f6f50ed11dd058b279
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Jul 17 09:50:08 2018 -0700

    remove busy loop from destination background future when shutdown (#15)
    
    When the proxy is shutting down, once there are no more outbound
    connections, the sender side of the resolver channel is dropped. In the
    admin background thread, when the destination background future is
    notified of the closure, instead of shutting down itself, it just busy
    loops. Now, after seeing shutdown, the background future ends as well.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 9f5648d955ffba4cfed6471e351dbe5b355aa72b
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Jul 16 12:41:47 2018 -0700

    fix control client Backoff to poll its timer when backing off (#13)
    
    The `Backoff` service wrapper is used for the controller client service
    so that if the proxy can't find the controller (there is a connection
    error), it doesn't keep trying in a tight loop, but instead waits a
    couple seconds before trying again, presuming that the control plane
    was rebooting.
    
    When "backing off", a timer would be set, but it wasn't polled, so the
    task was never registered to wake up after the delay. This turns out to
    not have been a problem in practice, since the background destination
    task was joined with other tasks that were constantly waking up,
    allowing it to try again anyways.
    
    To add tests for this, a new `ENV_CONTROL_BACKOFF_DELAY` config value
    has been added, so that the tests don't have to wait the default 5
    seconds.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 73edefb79525cbbb0ff50980b62abaee7b2e7306
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jul 13 12:46:38 2018 -1000

    Move `connection` submodule to `transport`. (#11)
    
    This allows easier logging configuration for the entire transport system
    using the common prefix `conduit_proxy::transport`. Previously logging had to be
    controlled separately/additionally for `conduit_proxy::connection`.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit f7233fd682c1b352a34d3ce109d2d3400fb832f7
Author: Sean McArthur <sean@buoyant.io>
Date:   Fri Jul 13 13:00:02 2018 -0700

    Revert "remove busy loop from destination background future during shutdown (#8)"
    
    This reverts commit 4bee7b0b55f6556de45f9999a19293ed2ed2b319.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit bbf217ff4f53a8667bba303f2851cb21808e4ff8
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jul 12 20:41:17 2018 -0700

    Replace references to _Conduit_ (#6)
    
    There are various comments, examples, and documentation that refers to
    Conduit. This change replaces or removes these refernces.
    
    CONTRIBUTING.md has been updated to refer to GOVERNANCE/MAINTAINERS.

commit 2f4c1b220a32b1954987b09363190787fa7d419a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 12 16:04:25 2018 -0700

    Add labels for `tls::ReasonForNoIdentity` (#5)
    
    Fixes linkerd/linkerd2#1276.
    
    Currently, metrics with the `tls="no_identity"` label are duplicated.
    This is because that label is generated from the `tls_status` label on
    the `TransportLabels` struct, which is either `Some(())` or a
    `ReasonForNoTls`. `ReasonForNoTls` has a
    variant`ReasonForNoTls::NoIdentity`, which contains a
    `ReasonForNoIdentity`, but when we format that variant as a label, we
    always just produce the string "no_identity", regardless of the value of
    the `ReasonForNoIdentity`.
    
    However, label types are _also_ used as hash map keys into the map that
    stores the metrics scopes, so although two instances of
    `ReasonForNoTls::NoIdentity` with different `ReasonForNoIdentity`s
    produce the same formatted label output, they aren't _equal_, since that
    field differs, so they correspond to different metrics.
    
    This branch resolves this issue, by adding an additional label to these
    metrics, based on the `ReasonForNoIdentity`. Now, the separate lines in
    the metrics output that correspond to each `ReasonForNoIdentity` have a
    label differentiating them from each other.
    
    Note that the the `NotImplementedForTap` and `NotImplementedForMetrics`
    reasons will never show up in metrics labels, currently, since we don't gather
    metrics from the tap and metrics servers at the moment.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 4bee7b0b55f6556de45f9999a19293ed2ed2b319
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Jul 12 15:22:32 2018 -0700

    remove busy loop from destination background future during shutdown (#8)
    
    When the proxy is shutting down, once there are no more outbound
    connections, the sender side of the resolver channel is dropped. In the
    admin background thread, when the destination background future is
    notified of the closure, instead of shutting down itself, it just busy
    loops. Now, after seeing shutdown, the background future ends as well.
    
    While examining this, I noticed all the background futures are joined
    togther into a single `Future` before being spawned on a dedicated
    current_thread executor. Join in this case is inefficient, since *every*
    single time *one* of the futures is ready, they are *all* polled again.
    Since we have an executor handy, it's better to allow it to manage each
    of the futures individually.
    
    Signed-off-by: Sean McArthur <sean@buoyant.io>

commit 3c48ba7f62f45d56e43062f930b740057d4a2629
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 11 16:01:54 2018 -0700

    Add a README (#4)

commit 8db765c7bc93a979f336a1ef14fbc3fe2349ac78
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jul 11 15:27:33 2018 -0700

    dev: Add a Dockerfile for development (#3)
    
    When working on the proxy, it's important to be able to build a Docker
    image that can be tested in the context of the existing linkerd2
    project.
    
    This change adds a `make docker` target that produces a docker image,
    optionally tagged via the `DOCKER_TAG` environment variable.
    
    This is intended to be used for development--especially on non-Linux
    OSes.

commit 0ca5d11c03582591441098cd6c21a47c57b68b05
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jul 10 15:59:12 2018 -0700

    Adopt Linkerd2's governance (#2)
    
    For the time being, @briansmith and I will serve as super-maintainers
    for the linkerd2-proxy.

commit 02a64e980f0bc9e20c909fe66e6f29b6fac67b3b
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Jul 8 14:24:25 2018 -0700

    ci: Publish artifacts to build.l5d.io
    
    In order to setup continuous integration, proxy artifacts need to be
    published somewhere predictable and discoverable. This change configures
    Travis CI to publish proxy artifacts built from master to:
    
        build.l5d.io/linkerd2-proxy/linkerd2-proxy-${ref}.tar.gz
        build.l5d.io/linkerd2-proxy/linkerd2-proxy-${ref}.txt
    
    The tarball includes an optimized proxy binary and metadata (right now, just
    the LICENSE file, but later this should include additional version/build
    metadata that can be used for runtime diagnostics).
    
    The text file includes the sha256 sum of the tarball.
    
    A `Makefile` is introduced to encapsulate build logic so that it can both
    drive CI and be used manually.
    
    Travis CI is configured to run debug-mode tests against PRs and to run a full
    release package-test-publish for commits to
    master.

commit c23ecd0cbc993f2cfbc682537fc1375efdbd760a
Author: Oliver Gould <ver@buoyant.io>
Date:   Sat Jul 7 22:45:21 2018 +0000

    Migrate `conduit-proxy` to `linkerd2-proxy`
    
    The proxy now honors environment variables starting with
    `LINKERD2_PROXY_`.

commit ec303942ee23480dd294c0188dc754afcdff537c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jul 5 16:23:57 2018 -0700

    proxy: Add tls_config_last_reload_seconds metric (#1204)
    
    Depends on #1141.
    
    This PR adds a `tls_config_last_reload_seconds` Prometheus metric
    that reports the last time the TLS configuration files were reloaded.
    
    Proof that it works:
    
    Started the proxy with no certs, then generated them:
    ```
    ➜ http GET localhost:4191/metrics
    HTTP/1.1 200 OK
    content-encoding: gzip
    content-length: 323
    content-type: text/plain
    date: Mon, 25 Jun 2018 23:02:52 GMT
    
    # HELP tls_config_reload_total Total number of times the proxy's TLS config files were reloaded.
    # TYPE tls_config_reload_total counter
    tls_config_reload_total{status="io_error",path="example-example.crt",error_code="2"} 9
    tls_config_reload_total{status="reloaded"} 3
    # HELP tls_config_last_reload_seconds Timestamp of when the TLS configuration files were last reloaded successfully (in seconds since the UNIX epoch)
    # TYPE tls_config_last_reload_seconds gauge
    tls_config_last_reload_seconds 1529967764
    # HELP process_start_time_seconds Time that the process started (in seconds since the UNIX epoch)
    # TYPE process_start_time_seconds gauge
    process_start_time_seconds 1529967754
    ```
    
    Started the proxy with certs already present:
    ```
    ➜ http GET localhost:4191/metrics
    HTTP/1.1 200 OK
    content-encoding: gzip
    content-length: 285
    content-type: text/plain
    date: Mon, 25 Jun 2018 23:04:39 GMT
    
    # HELP tls_config_reload_total Total number of times the proxy's TLS config files were reloaded.
    # TYPE tls_config_reload_total counter
    tls_config_reload_total{status="reloaded"} 4
    # HELP tls_config_last_reload_seconds Timestamp of when the TLS configuration files were last reloaded successfully (in seconds since the UNIX epoch)
    # TYPE tls_config_last_reload_seconds gauge
    tls_config_last_reload_seconds 1529967876
    # HELP process_start_time_seconds Time that the process started (in seconds since the UNIX epoch)
    # TYPE process_start_time_seconds gauge
    process_start_time_seconds 1529967874
    ```
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit dd7ac18cc507f05b65151ce2d02b008c3ddc8c05
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 3 20:16:12 2018 -0700

    proxy: Fix out-of-control inotify CPU use (#1263)
    
    The `inotify-rs` library's `EventStream` implementation currently
    calls `task::current().notify()` in a hot loop when a poll returns
    `WouldBlock`, causing the task to constantly burn CPU.
    
    This branch updates the `inotify-rs` dependency to point at a branch
    of `inotify-rs` I had previously written. That branch  rewrites the
    `EventStream` to use `mio` to  register interest in the `inotify` file
    descriptor instead, fixing the out-of-control polling.
    
    When inotify-rs/inotify#105 is merged upstream, we can go back to
    depending on the master version of the library.
    
    Fixes #1261
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b9b35ec11c39e7dba168a7e302d5f58889c89398
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jul 3 15:36:48 2018 -0700

    proxy: Handle connection close during TLS detection (#1256)
    
    During protocol detection, we buffer data to detect a TLS Client Hello
    message. If the client disconnects while this detection occurs, we do
    not properly handle the disconnect, and the proxy may busy loop.
    
    To fix this, we must handle the case where `read(2)` returns 0 by
    creating a `Connection` with the already-closed socket.
    
    While doing this, I've moved some of the implementation of
    `ConditionallyUpgradeServerToTls::poll` into helpers on
    `ConditionallyUpgradeServerToTlsInner` so that the poll method is easier
    to read, hiding the inner details from the polling logic.

commit 1e39ab6ac4c19a126f8d12d68473ae66e1233123
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 3 15:24:20 2018 -0700

    proxy: Add a Prometheus metric for reporting errors loading TLS configs (#1141)
    
    This PR adds a Prometheus stat tracking the number of times
    TLS config files have been reloaded, and the number of times
    reloading those files has errored.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 5a3b1cdb3a0e09c49cd2538727bd7afbf09de410
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jul 3 12:27:08 2018 -0700

    proxy: Add TLS label in `transparency::retry_reconnect_errors` test (#1258)

commit 866167a955fcbc53ae14b2e15f399fc7169ad81d
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jul 2 17:19:20 2018 -0700

    tap: Support `tls` labeling (#1244)
    
    The proxy's metrics are instrumented with a `tls` label that describes
    the state of TLS for each connection and associated messges.
    
    This same level of detail is useful to get in `tap` output as well.
    
    This change updates Tap in the following ways:
    * `TapEvent` protobuf updated:
      * Added `source_meta` field including source labels
      * `proxy_direction` enum indicates which proxy server was used.
    * The proxy adds a `tls` label to both source and destination meta indicating the state of each peer's connection
    * The CLI uses the `proxy_direction` field to determine which `tls` label should be rendered.

commit 051a7639c57bdfef8ef423457fdbf1721830c272
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jul 2 16:21:06 2018 -0700

    proxy: Always inlcude `tls` label in metrics (#1243)
    
    The `tls` label could sometimes be formatted incorrectly, without a
    preceding comma.
    
    To fix this, the `TlsStatus` type no longer formats commas so that they
    must be provided in the context in which they are used (as is done
    otherwise in this file).

commit 91108a2d53db29082fbb4307f187b886a003ded6
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 29 17:08:03 2018 -0700

    proxy: Fall back to plaintext communication when a TLS handshake fails (#1173)
    
    This branch modifies the proxy's logic for opening a connection so
    that when an attempted TLS handshake fails, the proxy will retry that
    connection without TLS.
    
    This is implemented by changing the `UpgradeToTls` case in the `Future`
    implementation for `Connecting`, so that rather than simply wrapping
    a poll to the TLS upgrade future with `try_ready!` (and thus failing
    the future if the upgrade future fails), we reset the state of the
    future to the `Plaintext` state and continue looping. The `tls_status`
    field of the future is changed to `ReasonForNoTls::HandshakeFailed`,
    and the `Plaintext` state is changed so that if its `tls_status` is
    `HandshakeFailed`, it will no longer attempt to upgrade to TLS when the
    plaintext connection is successfully established.
    
    Closes #1084
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit da61aace6c3dbaa1f5071767a745830adbb31e3c
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Jun 28 17:24:09 2018 -1000

    Proxy: Skip TLS for control plane loopback connections. (#1229)
    
    If the controller address has a loopback host then don't use TLS to connect
    to it. TLS isn't needed for security in that case. In mormal configurations
    the proxy isn't terminating TLS for loopback connections anyway.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 03814c18eba3b76fd22ba1940c1d65515ca654a1
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Jun 27 17:17:34 2018 -1000

    Proxy: Get identity of pod & controller from configuration. (#1221)
    
    Instead of attempting to construct identities itself, have the proxy
    accept fully-formed identities from whatever configures it. This allows
    us to centralize the formatting of the identity strings in the Go code
    that is shared between the `conduit inject`, `conduit install`, and CA
    components.
    
    One wrinkle: The pod namespace isn't necessarily available at
    `conduit inject` time, so the proxy must implement a simple variable
    substitution mechanism to insert the pod namespace into its identity.
    
    This has the side-effect of enabling TLS to the controller since the
    controller's identity is now available.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit c67546653aaebfb9141c0f8acf5370851a6bd0c1
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Jun 27 14:47:57 2018 -1000

    Proxy: Use new destination service TLS identity scheme. (#1222)
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit af7b56f96322d34e36e0e99be3f2e5933d10f9d9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 27 16:53:42 2018 -0700

    proxy: Replace >=100,000 ms latency buckets with 1, 2, 3, 4, and 5 ms  (#1218)
    
    This branch adds buckets for latencies below 10 ms to the proxy's latency
    histograms, and removes the buckets for 100, 200, 300, 400, and 500
    seconds, so the largest non-infinity bucket is 50,000 ms. It also removes
    comments that claimed that these buckets were the same as those created
    by the control plane, as this is no longer true (the metrics are now scraped
    by Prometheus from the proxy directly).
    
    Closes #1208
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 26d2bce656a4e13be3cd2f628411e5327bbe911b
Author: Kevin Lingerfelt <kl@buoyant.io>
Date:   Wed Jun 27 11:40:02 2018 -0700

    Update dest service with a different tls identity strategy (#1215)
    
    * Update dest service with a different tls identity strategy
    * Send controller namespace as separate field
    
    Signed-off-by: Kevin Lingerfelt <kl@buoyant.io>

commit 0cf3a231a207d95f403ecbf2a0b0f2a5989ba1b2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jun 26 16:55:55 2018 -0700

    proxy: Fix ConditionallyUpgradeServerToTls not being notified (#1209)
    
    #1203 introduced a bug in the implementation of `Future` for
    `connection::ConditionallyUpgradeServerToTls`. If the attempt to match
    the current peek buffer was incomplete, the `Future` implementation
    would return `Ok(Async::NotReady)`. This results in the task yielding.
    However, in this case the task would not be notified again, as the
    `NotReady` state wasn't from an underlying IO resource. Instead, the
    would _never_ be ready.
    
    This branch fixes this issue by simply continuing the loop, so that
    we instead try to read more bytes from the socket and try to match
    again, until the match is successful or the _socket_ returns `NotReady`.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit ead3495d4a7db557d3fd6fe2f5905cf4f859b7da
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Jun 26 16:45:06 2018 -0700

    proxy: enable HTTP CONNECT request support (#1200)
    
    When the proxy receives a `CONNECT` request, the HTTP Upgrade pieces
    are used since a CONNECT is very similar to an Upgrade. If the CONNECT
    response back from the proxied client request is successful, the
    connection is converted into a TCP proxy, just like with Upgrades.

commit ae8b7d739156ab4b3a0aea763f2f5325a38c7271
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jun 26 15:56:21 2018 -0700

    proxy: Fix false positives in polling-based fs watches (#1140)
    
    There are currently two issues which can lead to false positives (changes being
    reported when files have not actually changed) in the polling-based filesystem
    watch implementation.
    
    The first issue is that when checking each watched file for changes, the loop
    iterating over each path currently short-circuits as soon as it detects a
    change. This means that if two or more files have changed, the first time we
    poll the fs, we will see the first change, then if we poll again, we will see
    the next change, and so on.
    
    This branch fixes that issue by always hashing all the watched files, even if a
    change has already been detected. This way, if all the files change between one
    poll and the next, we no longer generate additional change events until a file
    actually changes again.
    
    The other issue is that the old implementation would treat any instance of a
    "file not found" error as indicating that the file had been deleted, and
    generate a change event. This leads to changes repeatedly being detected as
    long as a file does not exist, rather than a single time when the file's
    existence state actually changes.
    
    This branch fixes that issue as well, by only generating change events on
    "file not found" errors if the file existed the last time it was polled.
    Otherwise, if a file did not previously exist, we no longer generate a new
    event.
    
    I've verified both of these fixes through manual testing, as well as a new
    test for the second issue. The new test fails on master but passes on this
    branch.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 72761d4552ec70fd4bff9ee42b00b0e45d9b2cc0
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jun 26 10:16:00 2018 -1000

    Proxy: Allow non-Conduit-bound TLS and non-TLS through. (#1203)
    
    On the server (accept) side of TLS, if the traffic isn't targetting the
    proxy (as determined by the TLS ClientHello SNI), or if the traffic
    isn't TLS, then pass it through.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit ba3b40f546fbf2f6cf49c0364617948993348ffb
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Jun 25 12:12:53 2018 -1000

    Proxy: Add `transport::prefixed::Prefixed`. (#1196)
    
    Copy most of the implementation of `connection::Connection` to create
    a way to prefix a `TcpStream` with some previously-read bytes. This
    will allow us to read and parse a TLS ClientHello message to see if it
    is intended for the proxy to process, and then "rewind" and feed it
    back into the TLS implementation if so.
    
    This must be in the `transport` submodule in order for it to implement
    the private `Io` trait.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 04007755f632fba8332c6383701ce446e679a99b
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Jun 25 12:12:25 2018 -1000

    Proxy: Add parser to distinguish proxy TLS traffic from other traffic. (#1197)
    
    * Proxy: Add parser to distinguish proxy TLS traffic from other traffic.
    
    Distinguish incoming TLS traffic intended for the proxy to terminate
    from TLS traffic intended for the proxied service to terminate and from
    non-TLS traffic.
    
    The new version of `untrusted` is required for this to work.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * More tests
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * Stop abusing `futures::Async`.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 42dd8b86a494e371f928d534067a6d30af4df2fb
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 25 15:12:03 2018 -0700

    proxy: Remove TLS client config from Process context (#1201)
    
    As the TLS client config watch stored in `ctx::Process` is used only in
    `Bind`, it's not necessary for it to be part of the process context.
    Instead, it can be explicitly passed into `Bind`.
    
    The resultant code is simpler, and resolves a potential cyclic
    dependency caused when adding `Sensors` to the watch (see
    https://github.com/runconduit/conduit/pull/1141#issuecomment-400082357).
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a8e54fbd7d806865adffa25d73c3e5295bcec559
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 25 12:44:51 2018 -0700

    proxy: Rebind controller client on TLS configuration changes (#1192)
    
    This branch adds the rebinding logic added to outbound clients in #1185
    to the controller client used in the proxy's `control::destination::background`
    module. Now, if we are communicating with the control plane over TLS, we will
    rebind the controller client stack if the TLS client configuration changes,
    using the `WatchService` added in  #1177.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Signed-off-by: Brian Smith <brian@briansmith.org>
    Co-authored-by: Brian Smith <brian@briansmith.org>

commit 7f84c66474720995316232a6ad2ee995d03d02b0
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 25 11:05:48 2018 -0700

    proxy: Move contrul utils into module (#1198)
    
    control/mod.rs contains a variety of miscelaneous utilities. In
    preparation of adding other types into the root of `control`, this
    change creates a `control::util` module that holds them.

commit 6e793f3ef41c0cb86257c61726efabdec8bae3b2
Author: Brian Smith <brian@briansmith.org>
Date:   Sun Jun 24 21:45:56 2018 -1000

    Refactor TLS configuration tests. (#1194)
    
    Rearrange the TLS configuration loading tests to enable them to be
    extended outside the tls::config submodule.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit e0a9d9cba9408efc70cb71c60a04e5ef3c3eb494
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jun 22 21:48:24 2018 -1000

    Report disabled TLS as "disabled" not "no_config". (#1190)
    
    This fixes a regression introduced in PR #1187.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 7f7bc1edb8bfe5fb25abad95aeb051c987fa1537
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Jun 21 17:59:41 2018 -1000

    Proxy: use `Conditional` inside TLS configuration watches. (#1187)
    
    Simplify the code and make it easier to report finer-grained
    reasoning about what part(s) of the TLS configuration are
    missing.
    
    This is based on Eliza's PR #1186.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 684c4d6d6dfbbd6858542fe6801524f1b85ca462
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 21 17:50:10 2018 -0700

    proxy: Add process stats to proxy metrics (on Linux) (#1128)
    
    This branch adds process stats to the proxy's metrics, as described in
    https://prometheus.io/docs/instrumenting/writing_clientlibs/#process-metrics.
    
    In particular, it adds metrics for the process's total CPU time, number of
    open file descriptors and max file descriptors, virtual memory size, and
    resident set size.
    
    This branch adds a dependency on the `procinfo` crate. Since this crate and the
    syscalls it wraps are Linux-specific, these stats are only reported on Linux.
    On other operating systems, they aren't reported.
    
    Manual testing
    
    Metrics scrape:
    ```
    eliza@ares:~$ curl http://localhost:4191/metrics
    # HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
    # TYPE process_cpu_seconds_total counter
    process_cpu_seconds_total 0
    # HELP process_open_fds Number of open file descriptors.
    # TYPE process_open_fds gauge
    process_open_fds 19
    # HELP process_max_fds Maximum number of open file descriptors.
    # TYPE process_max_fds gauge
    process_max_fds 1024
    # HELP process_virtual_memory_bytes Virtual memory size in bytes.
    # TYPE process_virtual_memory_bytes gauge
    process_virtual_memory_bytes 45252608
    # HELP process_resident_memory_bytes Resident memory size in bytes.
    # TYPE process_resident_memory_bytes gauge
    process_resident_memory_bytes 12132352
    # HELP process_start_time_seconds Time that the process started (in seconds since the UNIX epoch)
    # TYPE process_start_time_seconds gauge
    process_start_time_seconds 1529017536
    ```
    Note that the `process_cpu_seconds_total` stat is 0 because I just launched this conduit instance and it's not seeing any load; it does go up after i sent a few requests to it.
    
    Confirm RSS & virtual memory stats w/ `ps`, and get Conduit's pid so we can check the fd stats
    (note that `ps` reports virt/rss in kb while Conduit's metrics reports them in bytes):
    ```
    eliza@ares:~$ ps aux | grep conduit | grep -v grep
    eliza    16766  0.0  0.0  44192 12956 pts/2    Sl+  16:05   0:00 target/debug/conduit-proxy
    ```
    
    Count conduit process's open fds:
    ```
    eliza@ares:~$ cd /proc/16766/fd
    eliza@ares:/proc/16766/fd$ ls -l | wc -l
    18
    ```
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1c5524ff21ac3daf689140c6da92669410cd2ac4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 21 17:49:19 2018 -0700

    proxy: Rebind endpoint stacks on TLS config changes using WatchService (#1185)
    
    This branch changes the proxy's `Bind` module to add a middleware layer
    which watches for TLS cliend configuration changes and rebinds the
    endpoint stacks of any endpoints with which it is able to communicate with over
    TLS (i.e. those with `TlsIdentity` metadata) when the client config changes. The
    rebinding is done at the level of individual endpoint stacks, rather than for the
    entire service stack for the destination.
    
    This obsoletes my previous PRs #1169 and #1175.
    
    Closes #1161
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 432695a77dddff64d9bc5f49b15f11fd106d17af
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 21 15:41:41 2018 -0700

    proxy: Implement a WatchService (#1177)
    
    WatchService is a middleware that rebinds its inner service
    each time a Watch updates.
    
    This is planned to be used to rebind endpoint stacks when TLS
    configuration changes. Later, it should probably be moved into
    the tower repo.

commit c0fd7a9577b12bcc16d6c4fde87f832c9351786d
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 21 11:05:03 2018 -0700

    proxy: Document tls::config::watch_for_config_changes (#1176)
    
    While investigating TLS configuration, I found myself wanting a
    docstring on `tls::config::watch_for_config_changes`.
    
    This has one minor change in functionality: now, `future::empty()`
    is returned instead of `future:ok(())` so that the task never completes.
    It seems that, ultimately, we'll want to treat it as an error if we lose
    the ability to receive configuration updates.

commit 71ea2c1b59be0df24aff32b3f7f44f7b046a5622
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Jun 20 19:46:31 2018 -1000

    Proxy: Implement TLS conditional accept more like TLS conditional connect. (#1166)
    
    * Proxy: Implement TLS conditional accept more like TLS conditional connect.
    
    Clean up the accept side of the TLS configuration logic.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 757ccd8fc93053f83d2c4cc53e63c3a65e2a509e
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Wed Jun 20 16:41:43 2018 -0700

    proxy: add HTTP/1.1 Upgrade support automatically (#1126)
    
    Any HTTP/1.1 requests seen by the proxy will automatically set up
    to prepare such that if the proxied responses agree to an upgrade,
    the two connections will converted into a standard TCP proxy duplex.
    
    Implementation
    -----------------
    
    This adds a new type, `transparency::Http11Upgrade`, which is a sort of rendezvous type for triggering HTTP/1.1 upgrades. In the h1 server service, if a request looks like an upgrade (`h1::wants_upgrade`), the request body is decorated with this new `Http11Upgrade` type. It is actually a pair, and so the second half is put into the request extensions, so that the h1 client service may look for it right before serialization. If it finds the half in the extensions, it decorates the *response* body with that half (if it looks like a response upgrade (`h1::is_upgrade`)).
    
    The `HttpBody` type now has a `Drop` impl, which will look to see if its been decorated with an `Http11Upgrade` half. If so, it will check for hyper's new `Body::on_upgrade()` future, and insert that into the half.
    
    When both `Http11Upgrade` halves are dropped, its internal `Drop` will look to if both halves have supplied an upgrade. If so, the two `OnUpgrade` futures from hyper are joined on, and when they succeed, a `transparency::tcp::duplex()` future is created. This chain is spawned into the default executor.
    
    The `drain::Watch` signal is carried along, to ensure upgraded connections still count towards active connections when the proxy wants to shutdown.
    
    Closes #195

commit 016d748653920014bb8b97084ae75bde626a83fe
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Wed Jun 20 16:31:48 2018 -0700

    proxy: re-enabled vectored writes through our dynamic Io trait object. (#1167)
    
    This adds `Io::write_buf_erased` that doesn't required `Self: Sized`, so
    it can be called on trait objects. By using this method, specialized
    methods of `TcpStream` (and others) can use their `write_buf` to do
    vectored writes.
    
    Since it can be easy to forget to call `Io::write_buf_erased` instead of
    `Io::write_buf`, the concept of making a `Box<Io>` has been made
    private. A new type, `BoxedIo`, implements all the super traits of `Io`,
    while making the `Io` trait private to the `transport` module. Anything
    hoping to use a `Box<Io>` can use a `BoxedIo` instead, and know that
    the write buf erase dance is taken care of.
    
    Adds a test to `transport::io` checking that the dance we've done does
    indeed call the underlying specialized `write_buf` method.
    
    Closes #1162

commit 983faeb7791fd7c5e0efa76f096d7e4237f0a7b4
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Jun 20 07:40:49 2018 -1000

    Proxy: More carefully keep track of the reason TLS isn't used. (#1164)
    
    * Proxy: More carefully keep track of the reason TLS isn't used.
    
    There is only one case where we dynamically don't know whether we'll
    have an identity to construct a TLS connection configuration. Refactor
    the code with that in mind, better documenting all the reasons why an
    identity isn't available.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit f22d39c280243311e5cb20ab005244596c20736f
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jun 19 14:26:42 2018 -1000

    Proxy: Add TLS client infrastructure. (#1158)
    
    Move TLS cipher suite configuration to tls::config.
    
    Use the same configuration to act as a client and a server.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 902b7efac1d2aaa13277ef62572c81cba6b41cd2
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Jun 19 14:01:27 2018 -0700

    proxy: Clarify Outbound::recognize (#1144)
    
    The comments in Outbound::recognize had become somewhat stale as the
    logic changed. Furthermore, this implementation may be easier to
    understand if broken into smaller pieces.
    
    This change reorganizes the Outbound:recognize method into helper
    methods--`destination`, `host_port`, and `normalize`--each with
    accompanying docstrings that more accurately reflect the current
    implementation.
    
    This also has the side-effect benefit of eliminating a string clone on
    every request.

commit 10f327ebc0eff3d0e340b406ff0019c259b39310
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Jun 19 12:30:11 2018 -0700

    proxy: Add `tls="true"` metric label to connections accepted with TLS (#1050)
    
    Depends on #1047.
    
    This PR adds a `tls="true"` label to metrics produced by TLS connections and
    requests/responses on those connections, and a `tls="no_config"` label on
    connections where TLS was enabled but the proxy has not been able to load
    a valid TLS configuration.
    
    Currently, these labels are only set on accepted connections, as we are not yet
    opening encrypted connections, but I wired through the `tls_status` field on
    the `Client` transport context as well, so when we start opening client
    connections with TLS, the label will be applied to their metrics as well.
    
    Closes #1046
    
    Signed-off-by: Eliza Weisman <eliza@buoyanbt.io>

commit 2750ddb77f314e84b743fdd932c34e436c925262
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Jun 18 12:53:10 2018 -1000

    Proxy: Make TLS server aware of its own identity. (#1148)
    
    * Proxy: Make TLS server aware of its own identity.
    
    When validating the TLS configuration, make sure the certificate is
    valid for the current pod. Make the pod's identity available at that
    point in time so it can do so. Since the identity is available now,
    simplify the validation of our own certificate by using Rustls's API
    instead of dropping down to the lower-level webpli API.
    
    This is a step towards the server differentiating between TLS
    handshakes it is supposed to terminate vs. TLS handshakes it is
    supposed to pass through.
    
    This is also a step toward the client side (connect) of TLS, which will
    reuse much of the configuration logic.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 9c55d400816f41982d4fcc519fa8a3079f989483
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Jun 18 14:56:54 2018 -0700

    proxy: Upgrade h2 to 0.1.10 (#1149)
    
    This picks up a fix for https://github.com/carllerche/h2/pull/285

commit dfe3b31c5e35d705075da3b81a7dfe1d3aa7a35d
Author: Brian Smith <brian@briansmith.org>
Date:   Sat Jun 16 08:09:42 2018 -1000

    Update Rustls to the latest Git version to fix a bug. (#1143)
    
    Using MS Edge and probably other clients with the Conduit proxy when
    TLS is enabled fails because Rustls doesn't take into consideration
    that Conduit only supports one signature scheme (ECDSA P-256 SHA-256).
    This bug was fixed in Rustls when ECDSA support was added, after the
    latest release. With this change MS Edge can talk to Conduit.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 4e1b0634b920afd221f9953e9e3eb021f1f9f82b
Author: Brian Smith <brian@briansmith.org>
Date:   Sat Jun 16 08:09:12 2018 -1000

    Proxy: Make the control plane completely optional. (#1132)
    
    Proxy: Make the control plane completely optional.

commit 45622744e8e10378eb08402606be9159fef8b629
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 15 17:32:55 2018 -0700

    Attempt to load TLS settings immediately prior to starting watch (#1137)
    
    Previously, the proxy would not attempt to load its TLS certificates until a fs
    watch detected that one of them had changed. This means that if the proxy was
    started with valid files already at the configured paths, it would not load
    them until one of the files changed.
    
    This branch fixes that issue by starting the stream of changes with one event
    _followed_ by any additional changes detected by watching the filesystem.
    
    I've manually tested that this fixes the issue, both on Linux and on macOS, and
    can confirm that this fixes the issue. In addition, when I start writing
    integration tests for certificate reloading, I'll make sure to include a test
    to detect any regressions.
    
    Closes #1133.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 2322dc955a95ef6a21c64ed79e8b2a9123a71bff
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jun 15 14:26:26 2018 -1000

    Add optional TLS client certificate authentication. (#1135)
    
    Refactor the way the TLS trust anchors are configured in preparation
    for the client and server authenticating each others' certificates.
    
    Make the use of client certificates optional pending the implementation
    of authorization policy.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit d50a65ba3fd8370c8f2c9376d79bf1c8db0e2711
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Jun 15 14:22:58 2018 -1000

    Keep accepting new connections after TLS handshake error. (#1134)
    
    When a TLS handshake error occurs, the proxy just stops accepting
    requests. It seems my expectations of how `Stream` handles errors
    were wrong.
    
    The test for this will be added in a separate PR after the
    infrastructure needed for TLS testing is added. (This is a chicken
    and egg problem.)
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 24d54dc2d2469f42e8386895b3b32f675c668611
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 15 11:40:04 2018 -0700

    proxy: Fix Inotify falling back to polling when files don't exist yet (#1119)
    
    This PR changes the proxy's Inotify watch code to avoid always falling back to
    polling the filesystem when the watched files don't exist yet. It also contains
    some additional cleanup and refactoring of the inotify code, including moving
    the non-TLS-specific filesystem watching code out of the `tls::config` module
    and into a new `fs_watch` module.
    
    In addition, it adds tests for both the polling-based and inotify-based watch
    implementations, and changes the polling-based watches to hash the files rather
    than using timestamps from the file's metadata to detect changes. These changes
    are originally from #1094 and #1091, respectively, but they're included here
    because @briansmith asked that all the changes be made in one PR.
    
    Closes #1094. Closes #1091. Fixes #1090. Fixes #1097. Fixes #1061.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a5cf4c2db996632ff873d4f1a760c72c0f75311e
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Jun 14 19:10:03 2018 -1000

    Simplify & clarify "No TLS" server configuration (#1131)
    
    The same pattern will be used for the "No TLS" client configuration.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 3aa5ac04535be1d61597b341f09b1412fe7fda59
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 14 16:29:41 2018 -0700

    proxy: Update prost to 0.4.0 (#1127)
    
    prost-0.4.0 has been released, which removes unnecessary dependencies.
    tower-grpc is being updated simultaneously, as this is the proxy's
    primary use of prost.
    
    See: https://github.com/danburkert/prost/releases/tag/v0.4.0

commit 8becd7bfa1638a6639458b75815723e70c268bff
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 14 15:09:58 2018 -0700

    proxy: Update `rand` to 0.5.1 (#1125)
    
    * proxy: Update `rand` to 0.5.1
    
    The proxy depends on rand-0.4, which is superceded by newer APIs in
    rand-0.5. Since we're already using rand-0.5 via the tower-balance
    crate, it seems appropriate to upgrade the proxy.
    
    * Expand lock files in reviews

commit e8e163a2e93071574398f15cd122cb767c2d5e75
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Jun 13 16:18:51 2018 -0700

    proxy: Convert `convert` from crate to module (#1115)
    
    In e2093e3, we created a `convert` crate when refactoring the proxy's
    gRPC bindings into a dedicated crate.
    
    It's not really necessary to handle `convert` as a crate, given that it
    holds a single 39-line file that's mostly comments. It's possible to
    "vendor" this file in the proxy, and controller-grpc crate doesn't
    even need this trait (in fact, the proxy probably doesn't either).

commit 72cd70bef2a44b25389ed2ae9128b7a1c19d8da8
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Jun 8 15:52:52 2018 -0700

    proxy: Update tower-balance (#1093)
    
    To pick up https://github.com/tower-rs/tower/pull/86

commit 2ed7c4ad406ba7501090f123902599873c6241a4
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Jun 7 22:06:12 2018 -0700

    proxy: Use a PeakEWMA outbound load balancer (#1080)
    
    `tower-balance` has been updated with a Peak-EWMA load balancer; and a
    new crate, `tower-h2-balance` has been introduced to make the load
    balancer aware of some H2 stream events.
    
    The Peak-EWMA balancer is designed to reduce tail latency by maintaining
    an Exponentially Weighted Moving Average of latencies to each endpoint
    which decay over a 10s window.

commit 06876654447427f4b1bd0f7e185edbad942282ab
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 7 19:16:54 2018 -0700

    proxy: Forward TLS config to client watches (#1087)
    
    This commit adds the initial wiring to forward TLS config changes to the
    watches used by TLS clients as well as TLS servers. As the TLS clients
    are not yet implemented, the config type is currently `()`, but once
    the client config is implemented, we should be able to drop it in
    seamlessly.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-authored-by: Brian Smith <brian@briansmith.org>

commit d70bb6d06cbf934070e78d9abdd9f57237cc9025
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 7 17:16:07 2018 -0700

    proxy: More DNS cleanup (#1052)
    
    Depends on #1032.
    
    This branch makes some additional changes to the proxy's DNS code. In
    particular, since we no longer need to clone the resolver on every lookup,
    it removes some `clone()` calls in `DestinationSet::reset_dns_query`.
    I've also changed the DNS futures to use the new contextual logging code
    on master.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit c5b13fb3f7cdc7488ec7b07378c45217a60b62b7
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Jun 7 13:08:37 2018 -1000

    Proxy: Better encapsulate the details of TLS config watching. (#1082, #1083)
    
    * Fix non-Linux builds.
    
    The change to signal.rs is needed for Windows.
    The change to config.rs is needed for Windows and maybe other platforms.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * Proxy: Better encapsulate the details of TLS config watching.
    
    Encapsulate more of the TLS configuration logic in the TLS submodule. This allows
    for easier refactoring. In particular, this will make adding the client TLS configuration
    easier.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit fbbab10c6ee83fdf8431acb01e6f760617bcb39d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jun 7 14:45:20 2018 -0700

    proxy: detect TLS configuration changes using inotify on Linux (#1077)
    
    This branch adds an inotify-based implementation of filesystem watches
    for the TLS config files. On Linux, where inotify is available, this is
    used instead of the polling-based code I added in #1056 and #1076.
    
    In order to avoid the issues detecting changes to files in Kubernetes
    ConfigMaps described in #1061, we watch the directory _containing_ the
    files we care about rather than the files themselves. I've tested this
    manually in Docker for Mac Kubernetes and can confirm that ConfigMap
    changes are detected successfully.
    
    Closes #1061. Closes #369.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 19d92e9ad24dc154c809a76be9d3883fc749880c
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Jun 7 11:14:57 2018 -1000

    Proxy: Map Kubernetes Pod Namespace/Name to TLS identity. (#1074)
    
    * Proxy: Map Kubernetes Pod Namespace/Name to TLS identity.
    
    Map the Kubernetes identity into a DNS name that can be used to
    validate the peer's certificate. The final mapping is TBD; the
    important thing for now is that the mapped name doesn't collide
    with any real DNS name.
    
    Encapsulate the mapping logic within the TLS submodule.
    
    Minimize `Arc`ing and `Clone`ing of TLS identities.
    
    This has no effect in default configurations since the settings that
    enable the functionality are not set by default.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit f17b09898af5d48e9e5f804668553bf6b99a0493
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jun 6 13:43:17 2018 -0700

     proxy: Canonicalize TLS config paths before polling filesystem metadata (#1076)
    
    This branch changes the polling-based implementation of TLS config file watches
    to fully canonicalize the path to each config file prior to polling for its
    metadata. Doing so fixes the issues detecting changes when the watched path is
    a symbolic link to another symbolic link (see #1061), which is how Kubernetes
    implements ConfigMaps mounted as volumes.
    
    I've manually tested this with Conduit running in Docker for Mac Kubernetes,
    by volume-mounting a ConfigMap containing the TLS config files, and
    regenerating, deleting, and adding the certificates. Watching the Conduit logs
    confirms that the changes are now successfully detected.
    
    Note that we have to re-canonicalize the path every time we poll the filesystem
    for metadata. Otherwise, if the file is a symlink and the link target changes,
    we will continue polling the _old_ link target's path, and fail to detect any
    changes to the _new_ link target.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 143f3668d1810fb2447ef971504cbd4d1d54a9a0
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jun 5 14:23:08 2018 -1000

    Implement `dns::Name` using webpki's `DNSName`. (#1071)
    
    webpki's DNSName type does full validation and normalization (lowercasing) of
    DNS names, which is exactly what `dns::Name` does. webpki's DNSName type
    considers a DNS name to be valid according to the rules for TLS certificates,
    which is slightly stricter than what a DNS library might otherwise allow. In
    anticipation of possible compatibility issues, introduce separate tls::DnsName
    and dns::Name names for this type. In the future, if we find that tls::DnsName
    is too strict for non-TLS cases, we can have these types diverge without
    affecting TLS validation.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 6c7173075c8a5f583a273e3f9a33fc97e61e8e0d
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Jun 5 17:05:10 2018 -0700

    proxy: update to released hyper 0.12 (#1069)

commit a70e324da3a0b5b6d63a174136a629d071cb036c
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jun 5 13:42:46 2018 -1000

    Ensure Request IDs are unique & avoid `Arc`ing. (#1066)
    
    Encapsulate HTTP request ID generation logic.
    
    Request IDs need to be globally unique, so there can only be one request ID
    sequence per process. Simplify the request ID generation with that in mind,
    and make it more efficient.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit f9cc52e1c038196c1eeebbbe2e3a7bec1ce85de9
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jun 5 08:58:18 2018 -1000

    Stop cloning & hashing HTTP requests & related types. (#1058)
    
    During code review of another change I noticed that a lot of types seem
    to derive `Hash` (and `Eq`, `PartialEq`) even though the types should
    never (for performance reasons) be used as keys of a hash table, and
    where it is kind of questionable what equality should mean for those
    types. Then I noticed that similarly many types implement `Clone` even
    though I expect we should never be cloning them, again because of our
    performance goals.
    
    Because these types derive these traits, then whenever we add a field
    to them, that field also has to implement these traits. That means we
    then have to expand the problem, deriving implementations of these
    traits for types that don't otherwise want/need to implement these
    traits. This makes review complicated, because, for example, we have
    to decide whether something should be compared case-insensitively or
    case-sensitively when really we don't want to compare those things at
    all.
    
    To prove that we can get by by doing less, to speed up code review
    (particularly related to some stuff related to TLS), stop deriving
    `Clone`, `Eq`, `PartialEq`, and `Hash` for these types.
    
    I believe that, in particular, the change to key the Tap hash table
    based on request ID, instead of the whole request, should speed up
    the tap feature since we don't hash and/or compare every field,
    recursively, of requests.
    
    Later more such cleanup of this sort should be done.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 73163ad01908dd721a967fe46542caea8d4dffae
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 4 20:08:55 2018 -0700

    proxy: Add TLS identity to endpoint metadata and wire it through to `Connect::new` (#1008)
    
    Depends on #1006. Depends on #1041.
    
    This PR adds a `tls_identity` field to the endpoint `Metadata` struct, which
    contains the `TlsIdentity` metadata sent by the control plane's Destination
    service.
    
    I changed the `ctx::transport::Client` context struct to hold a `Metadata`,
    rather than just the labels, so the TLS support determination is always
    available. In addition, I've added it as an additional parameter to
    `transport::Connect::new`, so that when we create a new connection, the TLS
    code will be able to determine whether or not TLS is supported and, if it is,
    how to verify the endpoint's identity.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1678d6b33b634199161512ed9ef97ed153375bef
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 4 14:34:34 2018 -0700

    proxy: Change `DEFAULT_OUTBOUND_ROUTER_CAPACITY` from 10,000 to 100 (#1060)
    
    The proxy can't actually support 10K clients currently (for one, we can't open
    10K resolution streams to the destination service). 100 is a more-realistic
    but sufficiently-high default.

commit 896fe7592974968fb564bc9860d951550d35f780
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jun 4 13:36:28 2018 -0700

    proxy: Reload TLS config on changes (#1056)
    
    This PR modifies the proxy's TLS code so that the TLS config files are reloaded
    when any of them has changed (including if they did not previously exist).
    
    If reloading the configs returns an error, we log an error and continue using
    the old config.
    
    Currently, this is implemented by polling the file system for the time they
    were last modified at a fixed interval. However, I've implemented this so
    that the changes are passed around as a `Stream`, and that reloading and
    updating the config is in a separate function the one that detects changes.
    Therefore, it should be fairly easy to plug in support for `inotify` (and
    other FS watch APIs) later, as long as we can use them to generate a
    `Stream` of changes.
    
    Closes #369
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit f73e34e0d807a3fe4821c18b4c55b7b0b4b61d25
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 1 14:36:37 2018 -0700

    proxy: Update `dns` module to use new Trust-DNS `AsyncResolver` API (#1032)
    
    Depends on #974.  Closes #859.
    
    This PR updates the proxy's `dns` module to use the new `AsyncResolver` API I
    added to `trust-dns-resolver` in bluejekyll/trust-dns#487. This allows us to
    spawn one `Future` that will drive DNS resolution in the background, rather
    than having to repeatedly clone a heavyweight `ResolverFuture` for every
    lookup. It also means that we no longer have to clone the name to resolve in
    quite as many places.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 0e29e2f5cff6bee5441e6ae9ad355f328496ad70
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Jun 1 12:17:48 2018 -0700

    proxy: Honor TTLs for DNS responses (#974)
    
    Closes #711. Depends on #967.
    
    This PR changes the proxy's `destination` module to honor the TTLs associated
    with DNS lookups, now that bluejekyll/trust-dns#444 has been merged and we can
    access this information from the Trust-DNS Resolver API.
    
    The `destination::background::DestinationSet` type has been modified so that,
    when a successful result is received for a DNS query, the DNS server will be
    polled again after the deadline associated with that query, rather than after
    a fixed deadline. The fixed deadline is still used to determine when to poll
    again for negative DNS responses or for errors.
    
    Furthermore, Conduit now accepts an optional CONDUIT_PROXY_DNS_MIN_TTL
    environment variable that will configure a minimum TTL for DNS results. If the
    deadline of a DNS response gives it a TTL shorter than the configured minimum,
    Conduit will not poll DNS again until after that minimum TTL is elapsed. By
    default, there is no minimum value set, as this feature is intended primarily
    for when Conduit is run locally for development purposes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit fbbe28d032edb74dc2e44276eb11bd77431024b1
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Jun 1 02:53:21 2018 +0200

    proxy: update h2 to cancel reset requests (#1051)
    
    This includes the changes that should detect when a client sends a `RST_STREAM`, and cancels our pending response future or streaming body.
    
    Closes #986

commit 044754ee2432b18e89f31192a83930da0cee2a34
Author: Brian Smith <brian@briansmith.org>
Date:   Thu May 31 12:20:57 2018 -1000

    Add initial infrastructure for optionally accepting TLS connections (#1047)
    
    * Add initial infrastructure for optinally accepting TLS connections.
    
    If the environment gives us the paths to the certificate chain and private key
    then use TLS for all accepted TCP connections. Otherwise, continue on using
    plaintext for all accepted TCP connections. The default behavior--no TLS--isn't
    changed.
    
    Later we'll make this smarter by adding protocol detection so that when the TLS
    configuration is available, we'll accept both TLS and non-TLS connections.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit be9486c239c9c89deb7c108599bc4d5a82d9fd2d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu May 31 11:48:25 2018 -0700

    proto: Add TLS identity to WeightedAddr message (#1041)
    
    Required for #1008.
    
    This PR adds the `TlsIdentity` message to the Destination service proto,
    to describe what strategy the proxy should use for verifying an endpoint's TLS
    certificates. It also adds a `TlsIdentity` field to the `WeightedAddr` message.
    
    Currently, there is one possible variant for `TlsIdentity`, `KubernetesPodName`,
    which consists of the Kubernetes pod name of the endpoint, the namespace of
    the endpoint, and the namespace of that pod's Conduit control plane. The proxy
    should attempt to connect over TLS if the control plane namespace matches its
    own control plane namespace. The pod name and namespace are used to verify
    the endpoint's TLS certificate.
    
    See https://github.com/runconduit/conduit/issues/386#issuecomment-392948046.
    
    This change was initially part of #1008, but I factored it out to make the diff
    smaller.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 30ae471dda075a15c7126f6cd2f07c320bf08bcf
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 30 13:41:59 2018 -0700

    proxy: Add rich logging contexts (#1037)
    
    While debugging proxy issues, I found it necessary to change how logging contexts are
    instrumented, especially for clients.
    
    This change moves away from using `Debug` types to in favor of `Display` types.
    Furthermore, the `logging` module now provides a uniform set of logging contexts to be
    used throughout the application.  All clients, servers, and background tasks should now be
    instrumented so that their log messages contain predictable metadata.
    
    Some small improvements have been made to ensure that logging contexts are correct
    when a `Future` is dropped (which is important for some H2 uses, especially).

commit 91075e7d32dd2c43ded692db610ebf5919c444eb
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 30 07:20:28 2018 -0700

    proxy: Fix bench tests and require bench tests in CI (#1038)
    
    b3170af changed the DstLabels api, but the bench test was not updated
    accordingly.
    
    Furthermore, since bench tests require a nightly rust version, we've
    avoided running them in CI. This makes it easy for these tests to break, however.
    
    This updates the benches/record.rs. Additionally, in CI, we pin the rust nightly'
    version to a known-good version so that we can reliably run these bench test
    without the fear of external changes breaking our build.

commit 1c8916550ed1f1a8c601557970e1c513576bec9f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 30 07:13:26 2018 -0700

    proxy: Ensure labels are reliably ordered (#1030)
    
    The proxy receives a hash map of endpoint labels from the destination
    service. As this map is serialized into a string, its keys and values
    do not have a stable ordering.
    
    To fix this, we sort the keys for all labels before constructing an
    instance of `DstLabels`.
    
    This change was much more difficult to test than it was to fix, so tests
    this change was tested manually.
    
    Fixes #1015

commit ec720129824cd35b5ae229e29ea2bb7f3edb32d8
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue May 29 12:48:59 2018 -0700

    proxy: Remove dynamic label updating on bound services (#1006)
    
    Depends on tower-rs/tower#75. Required for #386
    
    In order for the proxy to use the TLS support metadata from the Destination
    service correctly, we determined that the code for dynamically changing the
    labels on an already-bound service should be removed, and any change in
    metadata should cause an endpoint to be rebound.
    
    I've modified the proxy so that we no longer update the labels using
    `futures-watch` (as a sidenote, we no longer depend on that crate). Metadata
    update events now cause the `tower-discover::Discover` implementation for
    `DestinationSet` to re-insert the changed endpoint into the load balancer.
    Upstream PR tower-rs/tower#75 in tower-balance changes the load balancer
    to honor duplicate insertions by replacing the old endpoint rather than
    ignoring them; that change is necessary for the tests to pass on this branch.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 4ede9a7ef322b50ea386bdc8c2a9d36b4c076c52
Author: Brian Smith <brian@briansmith.org>
Date:   Sat May 26 18:30:37 2018 -1000

    Fix location of raw pointer comment in `ContextGuard`. (#1027)
    
    Commit b861a6df317c937123825098a7ef0b50cf52e281 moved the code the
    comment was describing, but didn't move the comment.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 79a38327d2312a4b2f1d9073af58f183ae2e666e
Author: Brian Smith <brian@briansmith.org>
Date:   Sat May 26 10:04:31 2018 -1000

    Abstract I/O interface into a trait. (#1020)
    
    * Rename so_original_dst.rs to addr_info.rs.
    
    Prepare for expanding the functionality of this module by renaming it.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * Abstract I/O interface into a trait.
    
    Instead of pattern matching over an `Io` variant, use a `Box<Io>` to
    abstract the I/O interface. This will make it easier to add a TLS
    transport.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 4cca72fb92b63ab30e8bf3b2557b3b8da560b5e9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri May 25 16:31:33 2018 -0700

    proxy: Fix missing logging contexts on inbound/outbound (#1025)
    
    Changes to `BoundPort::listen_and_fold` inadvertently broke the
    `::logging::context_future`s on the `serve` futures for the Inbound and
    outbound proxies, leading to log messages that didn't have the appropriate
    context. This fixes that.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 7764e97a2550e7ee8d77fd51a23f3d9253c65cef
Author: Brian Smith <brian@briansmith.org>
Date:   Fri May 25 09:59:05 2018 -1000

    Prepare `BoundPort::listen_and_fold` for upcoming TLS work. (#1018)
    
    Refactor `listen_and_fold()` to make it possible to insert more futures
    into the chain before the folding.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 0e6c4c1450de18a65ae4027d0e035c306a08aac6
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 24 10:40:29 2018 -0700

    proxy: Record EOS when bodies are dropped (#1003)
    
    It appears that hyper does not necessarily poll bodies to completion,
    and instead simply drops a body as soon as `content-length` is reached
    (hyperium/hyper#1521).
    
    This change implements Drop for MeasuredBody such that the stream-end
    event is triggered if it had not been triggered previously. This ensures
    that response latencies and counts are recorded for HTTP/1 streams.
    
    Fixes #994

commit 4fdbd1631a465ca0255cc6a8faca6ba451d5a529
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 24 07:23:14 2018 -0700

    proxy: Fix h1 body implementation (#995)
    
    In the h1-h2 glue code, we incorrectly called `is_empty()` to determine
    if an H1 stream had ended. `is_empty` only returns true if there was no
    body at all (rather than if the body has been fully consumed).
    
    By changing this to call `hyper::body::Payload::is_end_stream`, h1
    bodies now behave the same as h2 bodies.
    
    Relates to #994

commit 1d5ef1e4d583af782e2d3652c6574a968f8f7ac8
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 23 16:02:44 2018 -0700

     proxy: Record HTTP latency at first data frame (#981)
    
    Currently, the proxy records a request's latency as the time between
    when a request is opened and when its response stream completes. This is
    not what we intend to record, especially when a response is long-lived.
    
    In order to more accurate record latency, we want to track the time at
    which the first response body frame is received (which is a close
    approximation of time-to-first-byte).
    
    Telemetry aggregation has been changed to use the first-frame time to
    compute latencies; tests have been updated to exercise this behavior; and
    the metrics documentation has been updated to reflect this change.
    
    Addresses #818
    Relates to #980

commit f41e74fd2ca883fb5cc5b15e594551d2459a34aa
Author: Carl Lerche <me@carllerche.com>
Date:   Wed May 23 12:45:14 2018 -0700

    Proxy: Bump h2 version to v0.1.8 (#990)
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit afa7fef976326d533181182932f0b5494b765ee0
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 22 14:57:00 2018 -0700

    proxy: Alter telemetry to use discrete instants (#980)
    
    Proxy tasks emit events to the telemetry system. These events are used
    aggregate counts and latencies, as well as to inform Tap requests.
    Initially, these events included durations, describing the relevant time
    that elapsed between this event and another.
    
    This approach is somewhat inflexible -- it unnecessarily constrains the
    set of measurements that can computed in the telemetry system.
    
    To remedy this, the `Event` types can be changed to report discrete
    `Instant`s (rather than `Duration`s). Then, when latencies are computed
    in the telemetry system, these discrete instants can be compared to
    produce durations.
    
    There are no functional changes in this PR.

commit d709ec37e3390f156a4215d891b8f4ef82da9d20
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon May 21 15:40:33 2018 -0700

    proxy: Remove configure-and-bind-to-executor pattern (#967)
    
    A common pattern when using the old Tokio API was separating the configuration
    of a task from binding it to an executor to run on. This was often necessary
    when we wanted to construct a type corresponding to some task before the
    reactor on which it would execute was initialized. Typically, this was
    accomplished with two separate types, one of which represented the
    configuration and exposed only a method to take a reactor `Handle` and
    transform it to the other type, representing the actual task.
    
    After we migrate to the new Tokio API in #944, executors no longer need to be
    passed explictly, as we can use `DefaultExecutor::current` or
    `current_thread::TaskExecutor::current` to spawn a task on the current
    executor. Therefore, a lot of this complexity can be refactored away.
    
    This PR refactors the `Config` and `Process` structs in
    i`control::destination::background` into a single `Background` struct, and
    removes the `dns::Config` and `telemetry::MakeControl` structs (`dns::Resolver`
    and `telemetry::Control` are now constructed directly). It should not cause
    any functional changes.
    
    Closes #966
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 7bf4c1bc4126a4d1c0d480b3796c1f65ce8a085f
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sat May 19 13:19:05 2018 -0700

    proxy: Use `impl Trait` to unbox some futures (#969)
    
    Now that `impl Trait` is stable, we don't need to box as many futures. We still
    need to box before spawning them on an executor, but the component futures no
    longer require their own boxes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io

commit 1b1623dd83958475625dcb38efdc59d2ab804429
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu May 17 16:38:15 2018 -0700

    proxy: Upgrade Conduit to use the new version of Tokio (#944)
    
    Closes #888.  Closes #867.
    
    This branch upgrades Conduit to use the new Tokio API. It was also necessary to
    upgrade some other dependencies (including `hyper`, and `trust-dns`) alongside
    this upgrade.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit d9fd091411dc20a2633894a55be55953bff3c054
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu May 17 14:15:16 2018 -0700

    proxy: rebind services on connect errors (#952)
    
    Instead of having connect errors destroy all buffered requests,
    this changes Bind to return a service that can rebind itself when
    there is a connect error.
    
    It won't try to establish the new connection itself, but waits for
    the buffer to poll again. Combing this with changes in tower-buffer
    to remove canceled requests from the buffer should mean that we
    won't loop on connect errors for forever.
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit cd923abf9420ed0aa01c94dc62246e2a1e0e14ec
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 16 17:28:11 2018 -0700

    proxy: Drop destination resolutions when unused (#956)
    
    A proxy dispatches requests over a constrained number of routes. When
    the router's upper bound is reached---and potentially in other future
    scenarios---router capacity is created by removing unused routes, their
    load balancers, and all related endpoint stacks.
    
    However, in the current regime, the controller subsystem will continue
    to monitor discovery observations. As the number of active observations
    expands over time, the controller task ends up with more and more work
    to do.
    
    This change introduces a shared atomic boolean between the resolution
    returned to the load balancer and the state maintained when
    communicating with the service. Before the controller polls its active
    resolutions, it first ensures that all unused resolutions are dropped.

commit 4473fd114d2d61dcf79909c4a52fb7fd8950b5e6
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 16 16:24:29 2018 -0700

    proxy: Fix end events not firing when a stream is ended by a DATA frame (#957)
    
    A recent upstream change in `tower-h2` (tower-rs/tower-h2@d9b3140) caused some
    HTTP/2 streams that were previously terminated by TRAILERS frames to be
    terminated by empty DATA frames with the end of stream bit set, instead.
    
    This broke some tests in my dev branch for #944, as our test server also uses
    `tower-h2`, and some of the metrics tests were no longer seeing the expected
    `StreamResponseEnd` events due to this change. This issue may also occur in
    other cases, resulting in incorrect metrics.
    
    This PR changes `MeasuredBody::poll_data` to trigger the Stream End event if
    it sees a DATA frame that ends the stream.
    
    Fixes #954
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b23ed6e651d3b3098fdf427fdd4592d9a14bf644
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 15 17:23:01 2018 -0700

    rfc: proxy: Split `control::discovery` into submodules (#955)
    
    While preparing #946, I was again struck by the `discovery` module being very weighty
    (nearly 800 dense lines). The intent of this change is only to improve readability. There
    are no functional changes. The following aesthetic changes have been made:
    
    * `control::discovery` has been renamed to `control::destination` to be more consistent
      with the rest of conduit's terminology (destinations aren't the only thing that need to
      be discovered).
    * In that vein, the `Discovery` type has been renamed `Resolver` (since it exposes one
      function, `resolve`).
    * The `Watch` type has been renamed `Resolution`. This disambiguates the type form
      `futures_watch::Watch`(which is used in the same code) and makes it more clearly the
      product of a `Resolver`.
    * The `Background` and `DiscoveryWork` names were very opaque.  `Background` is now
      `background::Config` to indicate that it can't actually _do_ anything; and
      `DiscoveryWork` is now `background::Process` to indicate that it's responsible for
      processing destination updates.
    * `DestinationSet` is now a private implementation detail in the `background` module.
    * An internal `ResolveRequest` type replaces an unnamed tuple (now that it's used across
      files).
    * `rustfmt` has been run on `background.rs` and `endpoint.rs`

commit 86a75907cac00c855266a7e9a96ac53b240400a4
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue May 15 13:16:58 2018 -0700

    proxy: Move absolute URI detection to `bind::Protocol` (#938)
    
    This is in preparation for landing the Tokio upgrade.
    
    In the upcoming Hyper release, the handling of absolute form request URIs
    moved from `hyper::Request` to the `hyper::client::connect::Connect` trait.
    Once we upgrade to the new Tokio, we will have to upgrade our Hyper
    dependency as well.
    
    Currently, Conduit detects whether the request URI is in absolute form in
    `h1::normalize_our_view_of_uri` and adds an extension to the request if it is.
    This will no longer work with the new Hyper, as that function is called from
    the `bind::NormalizeUri` service, which is not constructed until after the
    client connection is established. Therefore, it is necessary to move this
    information to `bind::Protocol`, so that it can be passed to
    `transparency::client::HyperConnect` (our implementation of Hyper's `Connect`
    trait) when we are using the newest Hyper.
    
    For now, however, I've left in the `UriIsAbsoluteForm` extension and continued
    to set it in  `h1::normalize_our_view_of_uri`, since we currently still use it
    on the current Hyper version. I thought it was good to minimize the changes to
    this existing code, as it will be removed when we migrate to the new Hyper.
    
    This PR shouldn't cause any functional changes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit be1b06fa22cb6b806c587648b1551095122dabe5
Author: Carl Lerche <me@carllerche.com>
Date:   Mon May 14 11:23:25 2018 -0700

    Proxy: Update h2 dependency. (#948)
    
    This also updates `bytes` as the newest version is required by `h2`.
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit 57c850489951a107e851503e0e0b0b7688a4c68e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri May 11 17:26:23 2018 -0700

    proxy: Add a lazy version of ThreadRng (#936)
    
    This is in preparation for landing the Tokio upgrade.
    
    In order to be generic over Tokio's current thread and threadpool executors,
    a number of types in Conduit which were not previously `Send` are now required
    to be `Send`. A majority of this work will be done in the main Tokio upgrade
    PR, as it is in many cases not possible to make these types `Send` _without_
    using the new Tokio API (in order to remove `Handle`s, etc.); however, I'm
    factoring out everything possible and trying to land it in separate PRs.
    
    The p2c load balancer constructed in `Outbound` is currently parameterized
    over a random number generator. We currently construct it by getting the
    thread-local RNG, and passing it to the load balancer constructor. However,
    the thread-local RNG is not `Send`. I've fixed this issue by creating a new
    zero-sized empty struct type which implements `rand::Rng` simply by calling
    `thread_rng()` every time its' called, and passing that to
    `choose::power_of_two_choices` instead. Since this is an empty type which
    contains no data, and the correct thread-local RNG is accessed whenever
    the methods are called, this new type can trivially be `Send`. According to
    the `rand` crate's documentation, this is the correct way to use `ThreadRng`
    anyway:
    > Retrieve the lazily-initialized thread-local random number generator, seeded
    > by the system. Intended to be used in method chaining style, e.g.
    > `thread_rng().gen::<i32>()`.
    > (from https://docs.rs/rand/0.4.2/rand/fn.thread_rng.html)
    
    This shouldn't lead to any functional changes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 281281f5bca64266e46da46ae3541bbc12710cd1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri May 11 14:36:03 2018 -0700

    proxy: Make `outbound_updates_newer_services` test forward-compatible (#939)
    
    This is in preparation for landing the Tokio upgrade.
    
    The test `discovery::outbound_updates_newer_services` currently contains an
    assertion that an HTTP/2 request to an HTTP/1 service will return a response
    with status code 500. This is because the current version of Hyper on which
    Conduit depends does not support protocol upgrades.
    
    However, commit hyperium/hyper@bc6af88a32e29e5a4f3719d8abc664f9ab10dddd, which
    adds support for this kind of protocol upgrade, was recently merged to Hyper's
    master branch. Therefore, this assertion will no longer be correct once we
    depend on the upcoming Hyper release. When we migrate to the new Tokio, it will
    be necessary to upgrade our Hyper dependency as well, and this test will fail.
    
    I've modified the test to no longer make assertions about the response's status
    code, so that it's compatible with both the current and future Hyper versions.
    If the response is not `Ok`, the test will still fail, since
    `tests::support::Client::request()` `expect`s that the response is successful,
    but the status code is ignored. I've added a comment in the test explaining
    this.
    
    Eventually, when the master version of Conduit depends on the latest Hyper, we
    may want to change this test to assert that the status code is 200 instead. We
    may also want to add more tests for Hyper's protocol upgrade functionality, but
    that seems out of scope for this PR.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 030bd404fa4e0a8b1b81d84fde6b3ba43b58566e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 10 19:06:31 2018 -0700

    proxy/router: Implement LRU cache eviction (#925)
    
    The router's cache has no means to evict unused entries when capacity is
    reached.
    
    This change does the following:
    
    - Wraps cache values in a smart pointer that tracks the last time of
      access for each entry. The smart pointer updates the access time when
      the reference to entry is dropped.
    - When capacity is not available, all nodes that have not been accessed
      within some minimal idle age are dropped.
    
    Accesses and updates to the map are O(1) when capacity is available.
    Reclaiming capacity is O(n), so it's expected that the router is
    configured with enough capacity such that capacity need not be reclaimed
    usually.

commit 1842418c971e81f14c334f920a0da802bd0f0822
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 10 14:00:50 2018 -0700

    proxy/router: Create a separate `cache` module (#920)
    
    The router's `Inner` type contains a map of routes. Recently, this map's
    capacity has become constrained to prevent leakage for long-running
    processes.
    
    This change prepares for a fuller LRU implementation by moving the
    router's `Inner` type to a new (tested) module, `cache`.

commit b238d97137abd98c91f65e3d7571141640dcd409
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu May 10 11:51:01 2018 -0700

    router: Store `recognize` outside of lock (#913)
    
    The router stores its cache and `Recognize` implementation within a `Mutex`,
    but there is no need for the recognizer to be locked.
    
    This change creates a new `Cache` type that is locked independently of
    `Recognize`. In order to accomplish this, `Recognize::bind_service` has
    been changed to take an immutable reference to its `self`.
    
    The (unused) `Single` type has been removed because it relied on
    `bind_service` being mutable.

commit ee839d5ba607fd79e86a2478df95c8daa40cdb44
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 9 14:38:20 2018 -0700

    proxy: Remove try_bind_route! macro (#915)
    
    The macro is now only used once, so it seems clearer just to inline the
    logic.

commit 011d2541ebf7f684fe7dff76e0c2451143d9d07f
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue May 8 18:19:12 2018 -0700

    proxy: change peek to use reads for eventual support of TLS (#901)

commit 50cb2f84db85748969001fe0bded07a959a73974
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 8 16:54:20 2018 -0700

    rfc: Make DestinationServiceQuery generic (#749)
    
    The goals of this change are:
    1. Reduce the size/complexity of `control::discovery` in order to ease code reviews.
    2. Extract a reusable grpc streaming utility.
    
    There are no intended functional changes.
    
    `control::discovery::DestinationServiceQuery` is used to track the state of a request (and
    streaming response) to the destination service. Very little of this logic is specific to
    the destination service.
    
    The `DestinationServiceQuery` and associated `UpdateRx` type have been moved to a new
    module, `control::remote_stream`, as `Remote` and `Receiver`, respectively. Both of these
    types are generic over the gRPC message type, so it will be possible to use this utility
    with additional API endpoints.
    
    The `Receiver::poll` implementation has been simplified to be more idiomatic with the rest
    of our code (namely, using `try_ready!`).

commit 2392b3df2d81853c7c094583d23c0bb0a2c791d6
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 8 13:54:12 2018 -0700

    proxy: Parse units with duration configurations (#909)
    
    Configuration values that take durations are currently specified as
    time values with no units.  So `600` may mean 600ms in some contexts and
    10 minutes in others.
    
    In order to avoid this problem, this change now requires that
    configurations provide explicit units for time values such as '600ms' or
    10 minutes'.
    
    Fixes #27.

commit f97cc718dd7397857bbdc68ed8775f3eb55f0df0
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 8 10:58:22 2018 -0700

    proxy: Use Duration types for config defaults (#906)
    
    It's easy to misconfigure default durations, since they're recorded as
    integers and converted to Durations separately.
    
    Now, all default constants that represent durations use const `Duration`
    instances (enabled by a recent Rust release).
    
    This fixes #905 which was caused by using the wrong time unit for the
    metrics retain time.

commit 3d6586a19f91d67f53e80e9efc16f41aceeff0d5
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 8 10:57:56 2018 -0700

    proxy: Track SingleUse services against router capacity (#902)
    
    PR #898 introduces capacity limits to the balancer. However, because the
    router supports "single-use" routes--routes that are bound only for the
    life of a single HTTP1 request--it is easy for a router to exceed its
    configured capacity.
    
    In order to fix this, the `Reuse` type is removed from the router
    library so that _all_ routes are considered cacheable. It's now the
    responsibility of the bound service to enforce policies with regards to
    client retention.
    
    Routes were not added to the cache when the service could not be used to
    process more than a single request. Now, `Bind` wraps its returned
    services (via the `Binding` type), that dictate whether a single client
    is reused or if one is bound for each request.
    
    This enables all routes to be cached without changing behavior with
    regards to connection reuse.

commit a80da120ad95d5a6517fbd28b31ed0a89daac1dc
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri May 4 16:32:30 2018 -0700

    proxy: Bound on router capacity (#898)
    
    Currently, the proxy may cache an unbounded number of routes. In order
    to prevent such leaks in production, new configurations are introduced
    to limit the number of inbound and outbound HTTP routes. By default, we
    support 100 inbound routes and 10K outbound routes.
    
    In a followup, we'll introduce an eviction strategy so that capacity can
    be reclaimed gracefully.

commit a8d55b5293a05ed02fd6d4f22209717064a21cdc
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 2 15:47:36 2018 -0700

    proxy: Refactor router implementation (#894)
    
    The Router's primary `call` implementation is somewhat difficult to
    follow.
    
    This change does not introduce any functional changes, but makes the
    function easier to reason about.
    
    This is being done in preparation for functional changes.

commit bdc19d926ce1287d456517eb6de4d832931e8f36
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed May 2 13:40:55 2018 -0700

    proxy: Upgrade tower dependencies (#892)
    
    In order to pick up https://github.com/tower-rs/tower-grpc/pull/60,
    upgrade tower dependencies. This will reduce the cost of updating
    for upcoming tower-h2 improvements.

commit a85434551f5d84708dbf09a417f8da96b89c6378
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed May 2 13:26:27 2018 -0700

    Add unit tests for `metrics::record` (#890)
    
    This PR adds unit tests for `metrics::record`, based on the benchmarks for the
    same function. Currently, there is a test that fires a single response end event
    and asserts that the metrics state is correct afterward, and a test that fires
    all the events to simulate a full connection lifetime, and asserts that the
    metrics state is correct afterward. I'd like to also add a test that simulates
    multiple events with different labels, but I'll add that in a subsequent PR,
    
    In order to add these tests, it was necessary to to add test-only accessors
    to make some `metrics` structs `pub`` so that the test can access them.
    I also added some test-only functions to `metrics::Histogram`s, to make
    them easier to make assertions about.

commit 77017eedea71499f9f441926f6da00a3c7535403
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue May 1 11:59:45 2018 -0700

    proxy: Fix Tap ID generation (#885)
    
    The proxy's tap server assigns a sequential numeric ID to each inbound
    Tap request to assist tap lifecycle management.
    
    The server implementation keeps a local counter to keep track of tap
    IDs. However, this implementation is cloned for each individual tap
    requests, so `0` the only tap ID ever used.
    
    This change moves the Tap ID to be stored in a shared atomic integer.
    
    Debug logging has been improved as well.

commit 18e6eafb855c4ab4048efcd81c24c0b4c8e3d71d
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 30 17:48:07 2018 -0700

    proxy: Fix metrics constructor in benches (#881)
    
    Fixes a test compilation error.

commit 810f6bb7196ca505d713b690e8dbfe44c86d9d30
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 30 16:11:12 2018 -0700

    proxy: Expire metrics that have not been updated for 10 minutes (#880)
    
    The proxy is now configured with the CONDUIT_PROXY_METRICS_RETAIN_IDLE
    environment variable that dictates the amount of time that the proxy will retain
    metrics that have not been updated.
    
    A timestamp is maintained for each unique set of labels, indicating the last time
    that the scope was updated. Then, when metrics are read, all metrics older than
    CONDUIT_PROXY_METRICS_RETAIN_IDLE are dropped from the stats registry.
    
    A ctx::test_utils module has been added to aid testing.
    
    Fixes #819

commit 01aba7c7118d44b47bbabf9423ddafa2ce5f539a
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 30 15:33:09 2018 -0700

    proxy: Group metrics by label (#879)
    
    Previously, we maintained a map of labels for each metric. Because the same keys are used
    in multiple scopes, this causes redundant hashing & map lookup when updating metrics.
    
    With this change, there is now only one map per unique label scope and all of the metrics
    for each scope are stored in the value. This makes metrics inserting faster and prepares
    for eviction of idle metrics.
    
    The Metric type has been split into Metric, which now only holds metric metadata and is
    responsible for printing a given metric, and Scopes which holds groupings of metrics by
    label.
    
    The metrics! macro is provided to make it easy to define Metric instances statically.

commit c63f0a19760a3ae6fb0baa6957111cb4764adcd5
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 30 13:00:21 2018 -0700

    proxy: Make each metric type responsible for formatting (#878)
    
    In order to set up for a refactor that removes the `Metric` type, the
    `FmtMetric` trait--implemented by `Counter`, `Gauge`, and
    `Histogram`--is introduced to push prometheus formatting down into each
    type.
    
    With this change, the `Histogram` type now relies on `Counter` (and its
    metric formatting) more heavily.

commit 29330b0dc14d9d4634077d1badf2b16d532e1185
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Apr 30 10:52:08 2018 -0700

    Move `metrics::Serve` into its own module (#877)
    
    With this change, metrics/mod.rs now contains only metrics types.

commit 19e6a9c4a662c00e93d8624b9ae74c26d8a3eba7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Sun Apr 29 13:50:27 2018 -0700

    proxy: Remove Arcs from metric labels (#873)
    
    This PR removes the `Arc`s from the various label types in the proxy's
    `metrics` modules. This should make the write side of the metrics code
    much more efficient (and makes the code much simpler! :D).
    
    This change was particularly easy to implement for the TCP `TransportLabels`
    and `TransportCloseLabels`, which consisted of only `struct`s and `enum`s,
    and could easily be changed to derive `Copy`.
    
    For protocol-level `RequestLabels`, the request's authority was a `String`,
    which still needs to be reference-counted, as the overhead of cloning `String`s
    is almost certainly worse than that added by ref-counting. However, rather than
    adding an additional `Arc<str>`, I changed `RequestLabels` to store the
    authority as a `http::uri::Authority`, which is backed by a `ByteStr` and thus
    already ref-counted. Now, when constructing `RequestLabels`, we just take
    another reference to the `Authority` already stored in the request context.
    Since `Authority` implements `fmt::Display` already, formatting the labels
    still works.
    
    `ResponseLabels` already store the `DstLabels` string in an `Arc`, so no
    additional changes there were necessary. By removing the outer `Arc` around
    `ResponseLabels`, we now only have to ref-count the portion of the label type
    that would actually be inefficient to clone.
    
    @olix0r ran the benchmarks from #874 against this branch, and it seems to be
    a small but noticeable improvement:
    ```
    test record_many_dsts        ... bench:     151,076 ns/iter (+/- 182,151)
    test record_one_conn_request ... bench:       1,599 ns/iter (+/- 209)
    test record_response_end     ... bench:         676 ns/iter (+/- 144)
    ```
    
    before:
    ```
    test record_many_dsts        ... bench:     158,403 ns/iter (+/- 130,241)
    test record_one_conn_request ... bench:       1,823 ns/iter (+/- 1,408)
    test record_response_end     ... bench:         547 ns/iter (+/- 70)
    ```
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit cb6daaa9bb95e74d60c46541baf403ce9d13923b
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Apr 29 12:55:26 2018 -0700

    proxy: Implement benchmarks for telemetry recording (#874)
    
    Before changing the telemetry implementation, we should have a means to
    understand the impacts of such changes.
    
    To run, you must use a nightly toolchain:
    ```
    rustup run nightly cargo bench -p conduit-proxy -- record
    ```

commit 1246d917605c5ad46747a583742a838b28e44758
Author: Oliver Gould <ver@buoyant.io>
Date:   Sat Apr 28 15:35:29 2018 -0700

    Rename `metrics::Aggregate` to `metrics::Record` (#875)
    
    Move `Record` into its own file.

commit 9dc06a56f2f7a3864f3fe7379c6818f56f3254f4
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Apr 27 17:55:44 2018 -0700

    proxy: Implement a From converter for latency::Ms (#872)
    
    This reduces callsite verbosity for latency measurements at the expense of a fn-level
    generic.

commit aeaf1bf0729714257f65c0af6794a49ede55e978
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Apr 27 17:02:13 2018 -0700

    proxy: Add histogram unit tests (#870)
    
    This PR adds the unit tests for the proxy metrics module's Histogram
    implementation that I wrote in #775 to @olix0r's Histogram implementation
    added in #868. The tests weren't too difficult to adapt for the new code,
    and everything seems to work correctly!
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit cf470439ef84ac80d35974714357b3ebb76e026e
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Apr 27 14:43:09 2018 -0700

    proxy: Make `Histogram` generic over its value (#868)
    
    In order to support histograms measured in, for instance, microseconds,
    Histogram should blind store integers without being aware of the unit.
    In order to accomplish this, we make `Histogram` generic over a `V:
    Into<u64>`, such that all values added to the histogram must be of type
    `V`.
    
    In doing this, we also make the histogram buckets configurable, though
    we maintain the same defaults used for latency values.
    
    The `Histogram` type has been moved to a new module, and the `Bucket`
    and `Bounds` helper types have been introduced to help make histogram
    logic clearer and latency-agnostic.

commit 2e296dbf69376a831f9f5c060e7c97e01b4fb8a2
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Apr 27 14:18:23 2018 -0700

    proxy: wrap connections in Transport sensor before peeking (#851)
    
    In case there are any errors while peeking the connection to do protocol
    detection, the sensors will now be in place to detect them. Besides just
    errors, this will also allow reporting about connections that are
    accepted, but then immediately closed.
    
    Additionally:
    
    - add write_buf implementation for Transport sensor, can help
      performance for http1/http2
    - add better logs for tcp connections errors
    - add printlns for when tests fail
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit 6bcc8b25fb6670cf992b3a60baba11143dca421e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 26 16:49:37 2018 -0700

    Move `Counter` and `Gauge` to their own modules (#861)
    
    In preparation for a larger metrics refactor, this change splits the
    Counter and Gauge types into their own modules.
    
    Furthermore, this makes the minor change to these types: incr() and
    decr() no longer return `self`. We were not actually ever using the
    returned self references, and I find the unit return type to more
    obviously indicate the side-effecty-ness of these calls. #smpfy

commit 219872bab8223c18a348107895f6bcacb0f2dd6a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 25 14:06:33 2018 -0700

    Introduce the `peer` label to transport metrics (#848)
    
    Previously, the proxy exposed separate _accept_ and _connect_ metrics
    for some metric types, but not for all. This leads to confusing
    aggregations, particularly for read and write taotals.
    
    This change primarily introduces the `peer` prometheus label (with
    possible values _src_ or _dst_) to indicate which side of the proxy the
    metric reflects.
    
    Additionally, the `received_bytes` and `sent_bytes` metrics have been
    renamed as `tcp_read_bytes_total` and `tcp_write_bytes_total`,
    resectively. This more naturally fits into existing idioms.  Stream
    classification is not applied to these metrics, as we plan to increment
    them throughout stream lifetime and not only on close.
    
    The `tcp_connections_open` metric has also been renamed to
    `tcp_open_connections` to reflect Prometheus idioms.
    
    Finally, `msg1` and `msg2` have been constified in telemetry test
    fixtures so that tests are somewhat easier to read.

commit 287606565f3210463e96339f8b6607703f664add
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Apr 25 10:04:49 2018 -1000

    Proxy: Use trust-dns-resolver for DNS. (#834)
    
    trust-dns-resolver is a more complete implementation. In particular,
    it supports CNAMES correctly, which is needed for PR #764. It also
    supports /etc/hosts, which will help with issue #62.
    
    Use the 0.8.2 pre-release since it hasn't been released yet. It was
    created at our request.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 337eeb5a176a375e29b08328260b48f8c6c18221
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 25 11:02:52 2018 -0700

    Fix assertions in metrics_compression test (#847)
    
    Fixes #846
    
    The proxy `metrics_compression` test contained an assertion that a compressed scrape contained the `request_duration_ms_count` metric. This was chosen completely arbitrarily, and was only intended as an assertion that metrics were updated between compressed scrapes. Unfortunately, that metric was removed in d9112abc933035ba48eabc1e9e5a81b4da0e367f, so when #665 merged to master, this test broke. CI didn't catch this since we don't build merges for PRs --- we should probably (re)enable this in Travis?
    
    This PR fixes the test to assert on a metric that wasn't removed. Sorry for the ❌s!

commit 326d69dc34e0eab66b49db3af9e9efe01d679f22
Author: Carl Lerche <me@carllerche.com>
Date:   Wed Apr 25 08:40:42 2018 -0700

    Bump proxy h2 dependency to v0.1.6. (#845)
    
    This release includes a number of bug fixes related to HTTP/2.0 stream
    management.
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit 514074129ed07f16bb72b748a040dbb7b72fbe99
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 24 17:42:50 2018 -0700

    Add optional GZIP compression to proxy /metrics endpoint (#665)
    
    Closes #598.
    
    According to the Prometheus documentation, metrics export endpoints should support serving metrics compressed using GZIP. I've modified the proxy's `/metrics` endpoint to serve metrics compressed with GZIP when an `Accept-Encoding: gzip` request header is sent.
    
    I've also added a new unit test that attempts to get the proxy's metrics endpoint as GZIP, and asserts that the metrics are decompressed successfully.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3389f39d63bdfe03955639f9637bbc50a6dea674
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Apr 24 17:15:13 2018 -0700

    Add destination labels to all relevant tap events (#840)
    
    The proxy incorrectly only added labels to response events. Destination
    labels should be added to all tap events sent by the proxy.

commit ea72f774a81659d299b37d514cefc9f1ba83f813
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 24 10:17:48 2018 -0700

    proxy: Add tcp_connections_open gauge (#791)
    
    Depends on #785.
    
    This PR adds the `tcp_connections_open` gauge to the proxy's TCP metrics. It also adds some tests for that metric.

commit 60823456b1d755e7ed14e23e9f0b9863cc1f6735
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Apr 23 18:01:51 2018 -0700

    proxy tests: reduce some boilerplate, improve error information (#833)
    
    The `controller` part of the proxy will now use a default, removing the
    need to pass the exact same `controller::new().run()` in every test
    case.
    
    The TCP server and client will include their socket addresses in some
    panics.
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit 3511801b1cc378288fc8d19f6b2636c77c4f837c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 23 16:05:20 2018 -0700

    proxy: remove unused metrics (#826)
    
    This PR removes the unused `request_duration_ms` and `response_duration_ms` histogram metrics from the proxy. It also removes them from the `simulate-proxy` script's output, and from `docs/proxy-metrics.md`
    
    Closes #821

commit d27782b9d07a0a73e60bf2668694540f0acaf5f9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 23 14:29:34 2018 -0700

    Ignore flaky metrics tests on CI (#832)
    
    Fixes #831.
    
    Proxy metrics tests `transport::inbound_tcp_accept` and `transport::inbound_tcp_duration` are known to be flaky and should be ignored on CI. Note that the outbound versions of these tests were already marked as flaky, so this was almost certainly either an oversight or the result of an incorrect merge.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit a379cc079c2a3907de3e25fea9a164266c7073e8
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Apr 20 15:59:08 2018 -0700

    proxy: Unbreak process_start_time_seconds metric (#825)
    
    The refactoring of how metrics are formatted in 674ce87588bfe27ee64b5601cfe5b8e3e548dd34 inadvertently introduced a bug that caused the `process_start_time_seconds` metric to be formatted as just a number without the metric name. This causes Prometheus to fail with a parse error rather than accepting the metrics.
    
    I've fixed this issue, and added a unit test to detect regressions in the future.

commit f4fd8ce98e03896c32a6c94bb700207aec56cd7a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 19 19:01:48 2018 -0700

    proxy: Add classifications to TCP close stats (#790)
    
    This PR adds a `classification` label to transport level metrics collected on transport close. Like the `classification` label on HTTP response metrics, the value may be either `"success"` or `"failure"`. The label value is determined based on the `clean` field on the `TransportClose` event, which indicates whether a transport closed cleanly or due to an error.
    
    I've updated the tests for transport-level metrics to reflect the addition of the new label. I'd like to also modify the test support code to allow us to close transports with errors, in order to test that the errors are correctly classified as failures.

commit c3e33648d0126d674614e877b89f5eaeb3946693
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 17:58:45 2018 -0700

    proxy: Support destination label matching for tap (#817)
    
    Now, the tap server may specify that requests should be matched by destination
    label.
    
    For example, if the controller's Destination service returns the labels:
    `{"service": "users", "namespace": "prod"}` for an endpoint, then tap would be
    able to specify a match like `namespace=prod` to match requests destined to
    that namespace.

commit 8368bb711eff8b023de141a04cc4c235ff13a015
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 19 17:27:43 2018 -0700

    proxy: Add transport-level metrics (#785)
    
    This branch adds all the transport-level Prometheus metrics as described in #742, with the exception of the `tcp_connections_open` gauge (to be added in a subsequent branch).
    
    A brief description of the metrics added in this branch:
    * `tcp_accept_open_total`: counter of the number of connections accepted by the proxy
    * `tcp_accept_close_total`: counter of the number of accepted connections that have closed
    * `tcp_connect_open_total`: counter of the number of connections opened by the proxy
    * `tcp_connect_close_total`: counter of the number of connections opened by the proxy that have been closed.
    * `tcp_connection_duration_ms`: histogram of the total duration of each TCP connection (incremented on connection close)
    * `sent_bytes`: counter of the total number of bytes sent on TCP connections (incremented on connection close)
    * `received_bytes`: counter of the total number of bytes received on TCP connections (incremented on connection close)
    
     These metrics are labeled with the direction (inbound or outbound) and whether the connection was proxied as raw TCP or corresponds to an HTTP request.
    
    Additionally, I've added several proxy tests for these metrics. Note that there are some cases which are currently untested; in particular, while there are tests for the `tcp_accept_close_total` counter, it's more difficult to test the `tcp_connect_close_total` counter, due to connection pooling. I'd like to improve the tests for this code in additional branches.

commit 2e2a5761ed833a4bd8454ed597f22daffba43ce8
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 16:57:40 2018 -0700

    proxy: Add destination labels to TapEvents (#814)
    
    The Tap API supports key-value labels on endpoint metadata. The proxy was not
    setting these labels previously.
    
    In order to add these labels onto tap events, we store the original set of
    labels in an `Arc<HashMap>` on `DstLabels`. When tap events are emitted, the
    destination' labels are copied from the `DstLabels` into each event.

commit 91299c67a008d45d38ffd2d37540249b5df66bf0
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 15:36:01 2018 -0700

    proxy: Remove the `Labeled` middleware in favor of client context labels (#812)
    
    The `Labeled` middleware is used to add `DstLabels` to each request. Now that
    each client context maintains a watch on its endpoint's `DstLabels`, the
    `Labeled` middleware can safely be removed.
    
    This has one subtle behavior change: labels are associated with requests
    _lazily_, whereas before they were determined _eagerly_. This means that if an
    endpoints labels are updated before the telemetry system captures the labels
    for the request, it may use the newer labels. Previously, it would only use the
    labels at the time that the request originated.

commit 6b2b12796aab7db1f27dcc347167f876fd7b84c6
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 14:22:13 2018 -0700

    proxy: Track destination labels in client ctx (#799)
    
    Currently, only the request context holds destination labels. However,
    destination labels are more accurately associated with the client context,
    since the client context is what tracks the remote peer address (and
    destination labels are associated with this address).
    
    No functional changes.

commit 94faf54ea44f33853093b3a1ace839ce4a9afbb3
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 13:31:21 2018 -0700

    proxy: Introduce the control::discovery::Endpoint type (#798)
    
    Building on #796, this creates a new `Endpoint` type that wraps `SocketAddr`.
    
    Still, no functional change has been introduced, but this sets up to move
    destination labels into the bind stack directly (by adding the labels watch to
    the `Endpoint` type).

commit 25b1e48b0b296fa8b375b38502f7d12402410d1e
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 11:01:10 2018 -0700

    proxy: Rewrite mock controller to accept a stream of dst updates (#808)
    
    Currently, the mock controller, which is used in tests, takes all of its
    updates a priori, which makes it hard to control when an update occurs within a
    test.
    
    Now, the controller exposes a `DstSender`, which wraps an unbounded channel of
    destination updates. This allows tests to trigger updates at a specific point
    in the test.
    
    In order to accomplish this, the controller's hand-rolled gRPC server
    implementation has been discarded in favor of a real gRPC destination service.
    This requires that the `controller-grpc` project now builds both clients
    and servers for the destination service. Additionally, we now build a tap
    client as well (assuming that we'll want to write tests against our tap
    server).

commit 7676738d6ed75390a76cd80bf0e8e2010e8bfd0f
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 11:00:28 2018 -0700

    proxy: Make control::discovery::Bind generic over its Endpoint type (#796)
    
    Previously, `Bind` required that it bind to `SocketAddr` (and `SocketAddr`
    only). This makes it hard to pass additional information from service discovery
    into the client's stack.
    
    To resolve this, `Bind` now has an additional `Endpoint` trait-generic type,
    and `Bind::bind` accepts an `Endpoint` rather than a `SocketAddr`.
    
    No additional endpoints have been introduced yet. There are no functional
    changes in this refactor.

commit 53dd79afaa17c8d69011d256a28931a15af970d7
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 19 10:59:24 2018 -0700

    proxy: Cleanup control::discovery (#797)
    
    `set_labels` was needlessly `Arc`ed.
    
    `Metadata` does not need to be public.
    
    No functional changes.

commit 02258786b7506355ce8db93717d769ca9dfe052a
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 18 15:37:07 2018 -0700

    Introduce the TapByResource API (#778)
    
    This changes the public api to have a new rpc type, `TapByResource`.
    This api supersedes the Tap api. `TapByResource` is richer, more closely
    reflecting the proxy's capabilities.
    
    The proxy's Tap api is extended to select over destination labels,
    corresponding with those returned by the Destination api.
    
    Now both `Tap` and `TapByResource`'s responses may include destination
    labels.
    
    This change avoids breaking backwards compatibility by:
    
    * introducing the new `TapByResource` rpc type, opting not to change Tap
    * extending the proxy's Match type with a new, optional, `destination_label` field.
    * `TapEvent` is extended with a new, optional, `destination_meta`.

commit 0370b4476fc4ceff2a6c2bbcfe56b913e70f72cf
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 17 15:01:36 2018 -0700

    Move request open timestamp to the top of the stack (#744)
    
    Currently, the request open timestamp, which is used for calculating latency, is captured in the `sensor::http::Http` middleware. However, the sensor middleware is placed fairly low in the stack, below some of the proxy's components that can add measurable latency (e.g. the router).
    
    This PR moves the request_open timestamp out of the `Http` middleware and into a new `TimestampRequestOpen` middleware, which is installed at the top of the stack (before the router). The `TimestampRequestOpen` middleware adds the timestamp as a request extension, so that it can later be consumed by the `Http` sensor to generate the request stats.
    
    By moving the timestamping to the top of the stack, the timestamp should more accurately cover the overhead of the proxy, but a majority of the telemetry work can still be done where it was previously.
    
    I'd like to have included unit tests for this change, but since the expected improvement is in the accuracy of latency measurements, there's no easy way to test this programmatically.

commit 9198e7fd9bb84bd20d384b81e3a657cfd0a53d2e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 17 14:15:56 2018 -0700

    Factor out reused test fixtures from telemetry tests (#782)
    
    This is a fairly minor refactor to the proxy telemetry tests. b07b554d2bdb4b92a1feeed22a79bd71e87856eb added a `Fixture` in the Destination service labeling tests added in #661 to reduce the repetition of copied and pasted code in those tests. I've refactored most of the other telemetry tests to also use the test fixture. Significantly less code is copied and pasted now.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 3e2d782d195b4b8b02ea66137647d6464219078a
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Apr 17 12:53:20 2018 -0700

    proxy: clean up some logs and a few warnings in proxy tests (#780)
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit 239b362e9a591fb0932f8944ceb8c2733618a735
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Apr 17 11:19:27 2018 -0700

    proxy: move metrics::prometheus module to root metrics module (#763)
    
    The proxy `telemetry::metrics::prometheus` module was initially added in order to give the Prometheus metrics export code a separate namespace from the controller push metrics. Since the controller push metrics code was removed from the proxy in #616, we no longer need a separate module for the Prometheus-specific metrics code. Therefore, I've moved that code to the root `telemetry::metrics` module, which should hopefully make the proxy source tree structure a little simpler.
    
    This is a fairly trivial refactor.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 734cfbbe973f1128ef70c8090cdd7eededc5a80c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Apr 16 16:42:55 2018 -0700

    Refactor control::Cache and add tests (#733)
    
    Closes #713. This is a follow-up from #688.
    
    This PR makes a number of refactorings to the proxy's `control::Cache` module and removes all but one of the `clone` calls.
    
    The `CacheChange` enum now contains the changed key and a reference to the changed value when applicable. This simplifies `on_change` functions, which no longer have to take both a tuple of `(K, V)` and a `CacheChange` and can now simply destructure the `CacheChange`, and since the changed value is passed as a reference, the `on_change` function can now decide whether or not it should be cloned. This means that we can remove a majority of the clones previously present here.
    
    I've also rewritten `Cache::update_union` so that it no longer clones values (twice if the cache was invalidated). There's still one `clone` call in `Cache::update_intersection`, but it seems like it will be fairly tricky to remove. However, I've moved the `V: Clone` bound to that function specifically. `Cache::clear` and `Cache::update_union` so that they no longer call `Cache::update_intersection` internally, so they don't need a `V: Clone` bound.
    
    In addition, I've added some unit tests that test that `on_change` is called with the correct `CacheChange`s when key/value pairs are modified.

commit 2c4d00afc3142b110419c482891a957de479dc69
Author: Oliver Gould <ver@buoyant.io>
Date:   Fri Apr 13 13:09:51 2018 -0700

    Remove NODE_NAME and POD_NAME env usage (#758)
    
    * proxy: Remove pod_name and node_name
    
    * cli: Do not inject POD_NAME and NODE_NAME env vars

commit 26750ce41fcf342d726c2defeafdb00a623795ac
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Apr 12 17:39:29 2018 -0700

    Stop pushing telemetry reports from the proxy (#616)
    
    Now that the controller does not depend on pushed telemetry reports, the
    proxy need not depend on the telemetry API or maintain legacy sampling
    logic.

commit 6f8580c40c93d86a7546248e202e31d64ea2a26a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 12 15:10:01 2018 -0700

    Add unit tests for Labeled middleware (#738)
    
    I've added unit tests for the `Labeled` middleware used to add Destination labels in the proxy, as @olix0r requested in https://github.com/runconduit/conduit/pull/661#discussion_r179897783.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit f637c9cb9dbd3490c2580ee52bc16fbf7d9bbbe2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 12 14:59:17 2018 -0700

    Ignore flaky telemetry tests on CI (#752)
    
    The tests for label metadata updates from the control plane are flaky on CI. This is likely due to the CI containers not having enough cores to execute the test proxy thread, the test proxy's controller client thread, the mock controller thread, and the test server thread simultaneously --- see #751 for more information.
    
    For now, I'm ignoring these on CI. Eventually, I'd like to change the mock controller code in test support so that we can trigger it to send a second metadata update only after the request has finished.
    
    I think this issue also makes merging #738 a higher priority, so that we can still have some tests running on CI that exercise some part of the label update behaviour.

commit 7e242ca07a91fbfe10a44b78d68b96318c39b122
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 12 12:54:38 2018 -0700

    Add labels from service discovery to proxy metrics reports (#661)
    
    PR #654 adds pod-based metric labels to the Destination API responses for cluster-local services.
    
    This PR modifies the proxy to actually add these labels to reported Prometheus metrics for outbound requests to local services.
    
    It enhances the proxy's `control::discovery` module to track these labels and add a `LabelRequest` middleware to the service stack built in `Bind` for labeled services. Requests transiting `LabelRequest` are given an `Extension` which contains these labels, which are then added to events produced by the `Sensors` for these requests. When these events are aggregated to Prometheus metrics, the labels are added.
    
    I've also added some tests in `test/telemetry.rs` ensuring that these metrics are added correctly when the Destination service provides labels.
    
    Closes #660
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 2b9033cf1697adb7bf067e7abb3bb1ef546c64d9
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Apr 10 19:47:00 2018 -0700

    proxy: fix flaky tcp graceful shutdown test (#735)

commit 20855519d24bf39ebe280ba13effa4dc00b8b414
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Apr 10 14:15:37 2018 -0700

    proxy: improve graceful shutdown process (#684)
    
    - The listener is immediately closed on receipt of a shutdown signal.
    - All in-progress server connections are now counted, and the process will
      not shutdown until the connection count has dropped to zero.
    - In the case of HTTP1, idle connections are closed. In the case of HTTP2,
      the HTTP2 graceful shutdown steps are followed of sending various
      GOAWAYs.

commit b8015bca4e4a3bbd0ae975b9a67a17fa6b779369
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Apr 10 08:07:16 2018 -1000

    Proxy: Do L7 load balancing for all external HTTP services. (#726)
    
    Previously when the proxy could tell, by parsing, the request-target
    is not in the cluster, it would not override the destination. That is,
    load balancing would be disabled for such destinations.
    
    With this change, the proxy will do L7 load balancing for all HTTP
    services as long as the request-target has a DNS name.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 938d0d8e1625c1c9a42e82d8c5d2c1efae3de87b
Author: Brian Smith <brian@briansmith.org>
Date:   Sat Apr 7 18:26:06 2018 -1000

    Proxy: Fall back to using DNS when Destination service can't find service. (#692)
    
    Fixes #155.

commit 91816fcc8c6ed8c0289d7e17e075a0fc1e399453
Author: Brian Smith <brian@briansmith.org>
Date:   Sat Apr 7 18:15:19 2018 -1000

    Refactor poll_destination() in service discovery. (#725)
    
    No change in behavior is intended here.
    
    Split poll_destination() into two parts, one that operates locally
    on the DestinationSet, and the other that operates on data that isn't
    wholly local to the DestinationSet. This makes the code easier to
    understand. This is being done in preparation for adding DNS fallback
    polling to poll_destination().
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit a88479fd8f7cf5547d935019aa6a91a480b46fb4
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Apr 6 15:04:09 2018 -1000

    Proxy: Move DNS name normalization to service discovery (#722)
    
    Only the destination service needs normalized names (and even then,
    that's just temporary). The rest of the code needs the name as it was
    given, except case-normalized (lowercased). Because DNS fallack isn't
    implemented in service discovery yet, Outbound still a temporary
    workaround using FullyQualifiedName to keep things working; thta will
    be removed once DNS fallback is implemented in service discovery.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit d39457f10d669baaeafbb296a946d10441541d51
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Apr 6 13:54:16 2018 -0700

    Make `control::Cache` key-value in order to store discovery metadata (#688)
    
    This PR changes the proxy's `control::Cache` module from a set to a key-value map.
    
    This change is made in order to use the values in the map to store metadata from the Destination API, but allow evictions and insertions to be based only on the `SocketAddr` of the destination entry. This will make code in PR #661 much simpler, by removing the need to wrap `SocketAddr`s in the cache in a `Labeled` struct for storing metadata, and the need for custom `Borrow` implementations on that type.
    
    Furthermore, I've changed from using a standard library `HashSet`/`HashMap` as the underlying collection to using `IndexMap`, as we suspect that this will result in performance improvements.
    
    Currently, as `master` has no additional metadata to associate with cache entries, the type of the values in the map is `()`. When #661 merges, the values will actually contain metadata.
    
    If we suspect that there are many other use-cases for `control::Cache` where it will be treated as a set rather than a map, we may want to provide a separate set of impls for `Cache<T, ()>` (like `std::HashSet`) to make the API more ergonomic in this case.

commit 3c5f1c824fb580b72f4d371767480e300ca8dd05
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Apr 6 08:45:18 2018 -1000

    Proxy: Improve DNS name parsing (#708)
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit a701682e7f4e110e2fc2166130ea796689168128
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Apr 6 10:49:17 2018 -0700

    Add pretty durations to panics from `assert_eventually!` (#677)
    
    This PR adds the pretty-printing for durations I added in #676 to the panic message from the `assert_eventually!` macro added in #669.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1374cb4acfbf5bd4b4bc8760398521126c2ef7f9
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Apr 6 07:35:35 2018 -1000

    Remove unused conversions for Destination. (#701)
    
    These have not been used for a while; they are dead code.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit e3a1c1f3180120f23a9efbaffc015a1aaa5fa6d4
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Apr 5 16:49:32 2018 -1000

    Revert "Proxy: Refactor DNS name parsing and normalization (#673)" (#700)
    
    This reverts commit 311ef410a8baf513153e060ec0f60d9e803af28e.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit d8a6cb979ab795b43d3748c382f7535265b7836a
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Apr 5 16:36:01 2018 -1000

    Revert "Proxy: Refactor poll_destination() in service discovery. (#674)" (#698)
    
    This reverts commit 4fb9877b89e27283dbe314bbb6950d412ecfe5d7.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit fed593fc55b89d21712cd27a49e249d0af1b21ec
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Apr 5 13:05:11 2018 -1000

    Proxy: Refactor poll_destination() in service discovery. (#674)
    
    No change in behavior is intended here.
    
    Split poll_destination() into two parts, one that operates locally
    on the DestinationSet, and the other that operates on data that isn't
    wholly local to the DestinationSet. This makes the code easier to
    understand. This is being done in preparation for adding DNS fallback
    polling to poll_destination().
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit e079824ef5363540968f26ecb40f50912157be95
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Apr 5 12:32:12 2018 -1000

    Proxy: Refactor DNS name parsing and normalization (#673)
    
    Proxy: Refactor DNS name parsing and normalization
    
    Only the destination service needs normalized names (and even then,
    that's just temporary). The rest of the code needs the name as it was
    given, except case-normalized (lowercased). Because DNS fallack isn't
    implemented in service discovery yet, Outbound still a temporary
    workaround using FullyQualifiedName to keep things working; thta will
    be removed once DNS fallback is implemented in service discovery.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 2b1af94744c147e9f525193c7aeebacae1503639
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 5 13:47:19 2018 -0700

    Pretty-print durations in log messages (#676)
    
    This branch adds simple pretty-printing to duration in log timeout messages. If the duration is >= 1 second, it's printed in seconds with a fractional part. If the duration is less than 1 second, it is printed in milliseconds. This simple formatting may not be sufficient as a formatting rule for all cases, but should be sufficient for printing our relatively small timeouts.
    
    Log messages now look something like this:
    ```
    ERROR 2018-04-04T20:05:49Z: conduit_proxy: turning operation timed out after 100 ms into 500
    ```
    
    Previously, they looked like this:
    ```
    ERROR 2018-04-04T20:07:26Z: conduit_proxy: turning operation timed out after Duration { secs: 0, nanos: 100000000 } into 500
    ```
    
    I made this change partially because I wanted to make the panics from the `eventually!` macro added in #669 more readable.

commit 5415480ec79641951cba48a51b7b28e71031d37c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Apr 5 11:23:34 2018 -0700

     Add `assert_eventually!` macro to help de-flake telemetry tests  (#669)
    
    Closes #615.
    
    Based on @olix0r's suggestion in https://github.com/runconduit/conduit/issues/613#issuecomment-376024744, this PR adds an `assert_eventually!` macro to retry an assertion a set number of times, waiting for 15 ms between retries. This is loosely based on ScalaTest's [eventually](http://doc.scalatest.org/1.8/org/scalatest/concurrent/Eventually.html).
    
    I've rewritten the flaky telemetry tests to use the `assert_eventually!` macro, to compensate for delays in the served metrics being updated between client requests and metrics scrapes.

commit 5d68d94c475187052b71b695652f32ea78611cd7
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 4 15:49:17 2018 -0700

    Split labels out of `prometheus.rs` into its own file (#680)
    
    The proxy's `telemetry/metrics/prometheus.rs` file was starting to get long and hard to find one's way around in. I split the prometheus labels code out into a separate submodule and `RequestLabels` and `ResponseLabels` public. This seems like a reasonable division of the code, and the resultant files are much easier to read.

commit a1a09d85cad8f3ac193608c67323b72e35381e2f
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Apr 4 14:27:04 2018 -0700

    Move control::discovery::Cache into its own module (#672)
    
    The proxy's control::discovery module is becoming a bit dense in terms
    of what it implements.
    
    In order to make this code more understandable, and to be able to use a
    similar caching strategy in other parts of the controller, the
    `control::cache` module now holds discovery's cache implementation.
    
    This module is only visible within the `control` module, and it now
    exposes two new public methods: `values()` and
    `set_reset_on_next_modification()`.

commit c9b61a35d4b089d666e08dddf18555f10f6fae35
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Apr 4 10:41:21 2018 -0700

    Fix missing comma in gRPC status code labels (#670)
    
    Fixes the issue caught by @olix0r in https://github.com/runconduit/conduit/pull/661#issuecomment-378431155

commit b8f5e41e312ce0328ada2fb8869f64179c5dea2d
Author: Phil Calçado <pcalcado@users.noreply.github.com>
Date:   Mon Apr 2 21:36:57 2018 -0400

     Add pod-based metric_labels to destinations response (#429) (#654)
    
    * Extracted logic from destination server
    * Make tests follow style used elsewhere in the code
    * Extract single interface for resolvers
    * Add tests for k8s and ipv4 resolvers
    * Fix small usability issues
    * Update dep
    * Act on feedback
    * Add pod-based metric_labels to destinations response
    * Add documentation on running control plane to BUILD.md
    
    Signed-off-by: Phil Calcado <phil@buoyant.io>
    
    * Fix mock controller in proxy tests (#656)
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    
    * Address review feedback
    * Rename files in the destination package
    
    Signed-off-by: Kevin Lingerfelt <kl@buoyant.io>

commit 7071aefafa3ae2990e79147d66aa8de281ca64ba
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Apr 2 14:24:36 2018 -0700

    proxy: allow disable protocol detection on specific ports (#648)
    
    - Adds environment variables to configure a set of ports that, when an
      incoming connection has an SO_ORIGINAL_DST with a port matching, will
      disable protocol detection for that connection and immediately start a
      TCP proxy.
    - Adds a default list of well known ports: SMTP and MySQL.
    
    Closes #339

commit 7aa57ec830e6fca4a3522be2bfb52d3ef08ce559
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Mar 29 16:50:08 2018 -1000

    Proxy: Completely replace current set of destinations on reconnect (#632)
    
    Previosuly, when the proxy was disconnected from the Destination
    service and then reconnects, the proxy would not forget old, outdated
    entries in its cache of endpoints. If those endpoints had been removed
    while the proxy was disconnected then the proxy would never become
    aware of that.
    
    Instead, on the first message after a reconnection, replace the entire
    set of cached entries with the new set, which may be empty.
    
    Prior to this change, the new test
    outbound_destinations_reset_on_reconnect_followed_by_no_endpoints_exists
    passed already
    but outbound_destinations_reset_on_reconnect_followed_by_add_none
    and outbound_destinations_reset_on_reconnect_followed_by_remove_none
    failed. Now all these tests pass.
    
    Fixes #573
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit c3aca6cdae5fda7b6c5388f4b837454822f6fc2c
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Mar 29 08:20:57 2018 -1000

    Proxy: Factor out Destination service connection logic (#631)
    
    * Proxy: Factor out Destination service connection logic
    
    Centralize the connection initiation logic for the Destination service
    to make it easier to maintain. Clarify that the `rx` field isn't needed
    prior to a (re)connect.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * Rename `rx` to `query`.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * "recoonect" -> "reconnect"
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 7f96f104837e9a118da958eaa65d00976bda8774
Author: Carl Lerche <me@carllerche.com>
Date:   Thu Mar 29 09:22:54 2018 -0700

    proxy: Update h2 to 0.1.3 (#640)
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit 3011369d31612ade0172cc73c97a68105052379a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Mar 28 14:49:00 2018 -0700

    Add response classification to proxy metrics (#639)
    
    This PR adds a `classification` label to proxy response metrics, as @olix0r described in https://github.com/runconduit/conduit/issues/634#issuecomment-376964083. The label is either "success" or "failure", depending on the following rules:
    + **if** the response had a gRPC status code, *then*
       - gRPC status code 0 is considered a success
       - all others are considered failures
    + **else if** the response had an HTTP status code, *then*
      - status codes < 500 are considered success,
      - status codes >= 500 are considered failures
    + **else if** the response stream failed **then**
      - the response is a failure.
    
    I've also added end-to-end tests for the classification of HTTP responses (with some work towards classifying gRPC responses as well). Additionally, I've updated `doc/proxy_metrics.md` to reflect the added `classification` label.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 81d4b8b78373471123c004cb72962311777d27f1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Mar 27 14:03:12 2018 -0700

    All counters in proxy telemetry wrap on overflows (#603)
    
    In #602, @olix0r suggested that telemetry counters should wrap on overflows, as "most timeseries systems (like prometheus) are designed to handle this case gracefully."
    
    This PR changes counters to use explicitly wrapping arithmetic.
    
    Closes #602.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit ea2668b3cac835103ff75d1fd43c81ee24bb25c5
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Mar 27 10:45:41 2018 -1000

    Add the NoEndpoints message to the Destination API (#564)
    
    Have the controller tell the client whether the service exists, not
    just what are available. This way we can implement fallback logic to
    alternate service discovery mechanisms for ambigious names.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    Signed-off-by: Kevin Lingerfelt <kl@buoyant.io>

commit 987b7404eb85d55d75f7d2477e7c303c8df23bef
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Mar 27 12:54:31 2018 -0700

    Add process_start_time_seconds Prometheus metric (#628)
    
    As described in #619. `process_start_time_seconds` is the idiomatic way of reporting to Prometheus the uptime of a process. It should contain the time in seconds since the beginning of the Unix epoch.
    
    The proxy now exports this metric:
    ```
    ➜ http get localhost:4191/metrics
    HTTP/1.1 200 OK
    Content-Length: 902
    Content-Type: text/plain; charset=utf-8
    Date: Mon, 26 Mar 2018 22:09:55 GMT
    
    # HELP request_total A counter of the number of requests the proxy has received.
    # TYPE request_total counter
    
    # HELP request_duration_ms A histogram of the duration of a request. This is measured from when the request headers are received to when the request stream has completed.
    # TYPE request_duration_ms histogram
    
    # HELP response_total A counter of the number of responses the proxy has received.
    # TYPE response_total counter
    
    # HELP response_duration_ms A histogram of the duration of a response. This is measured from when theresponse headers are received to when the response stream has completed.
    # TYPE response_duration_ms histogram
    
    # HELP response_latency_ms A histogram of the total latency of a response. This is measured from whenthe request headers are received to when the response stream has completed.
    # TYPE response_latency_ms histogram
    
    process_start_time_seconds 1522102089
    
    ```
    
    Closes #619

commit 67b99fa989bb55ef26ea8a0868ff1ee27cc9b301
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Mar 26 10:45:05 2018 -1000

    Proxy: Clarify destination test support code queue handling (#617)
    
    Use `VecDeqeue` to make the queue structure clear. Follow good practice
    by minimizing the amount of time the lock is held. Clarify how
    defaulting logic works.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 8b619b9762e2ecdec6bdf0a3d03330b020bfd5ed
Author: Oliver Gould <ver@buoyant.io>
Date:   Sun Mar 25 14:26:14 2018 -0700

    Skip flaky tests for #613 (#614)
    
    The metrics endpoint tests are flaky because there are no guarantees
    that the metrics pipeline has processed events before the metrics
    endpoint is read. This can cause CI to fail spuriously.
    
    Disable these tests from running in CI until #613 is resolved.

commit 7012c5f9fe705111fa1cbc3a0e6249b6b9585560
Author: Andrew Seigner <andrew@sig.gy>
Date:   Fri Mar 23 16:11:34 2018 -0700

    Move injected data from env var to k8s labels (#605)
    
    The inject code detects the object it is being injected into, and writes
    self-identifying information into the CONDUIT_PROMETHEUS_LABELS
    environment variable, so that conduit-proxy may read this information
    and report it to Prometheus at collection time.
    
    This change puts the self-identifying information directly into
    Kubernetes labels, which Prometheus already collects, removing the need
    for conduit-proxy to be aware of this information. The resulting label
    in Prometheus is recorded in the form `k8s_deployment`.
    
    Signed-off-by: Andrew Seigner <siggy@buoyant.io>

commit 5eb14ee80ab46e5a218887cd18b6734158c15a55
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Mar 22 15:27:34 2018 -0700

    Add request_duration_ms metric and increment request_total on request end (#589)
    
    This PR adds the `request_duration_ms` metric to the Prometheus metrics exported by the proxy. It also modifies the `request_total` metric so that it is incremented when a request stream finishes, rather than when it opens, for consistency with how the `response_total` metric is generated.
    
    Making this change required modifying `telemetry::sensors::http` to generate a `StreamRequestEnd` event similar to the `StreamResponseEnd` event. This is done similarly to how sensors are added to response bodies, by generalizing the `ResponseBody` type into a `MeasuredBody` type that can wrap a request or response body. Since this changed the type of request bodies, it necessitated changing request types pretty much everywhere else in the proxy codebase in order to fix the resulting type errors, which is why the diff for this PR is so large.
    
    Closes #570

commit f5a4701d20963bd4f6f18e24aed0410132f2f187
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Mar 22 14:17:10 2018 -0700

    Fix double comma in outbound metrics (#601)
    
    Fixes #600
    
    The proxy metrics endpoint has a bug where metrics recorded in the outbound direction can contain two commas in a row when no outbound label is present. This occurs because the code for formatting the outbound direction label mistakenly assumed that there would always be a destination pod owner label as well, but the proxy isn't currently aware of the destination's pod owner (waiting for #429).
    
    I've fixed this issue by moving the place where the comma is output from the `fmt::Display` impl for `RequestLabels` to the `fmt::Display` impl for `OutboudnLabels`. This way, the comma between the `direction` and `dst_*` labels is only output when the `dst_*` label is present.
    
    This bug made it to master since all of the proxy end-to-end tests for metrics only test the inbound router. I've rectified this issue by adding tests on the outbound router as well (which would fail against the current master due to the double comma bug). I've also added a test that asserts there are no double commas in exported metrics, to protect against regressions to this bug.

commit 5e50f8809315158b095300b6bb07adc3a1e07496
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Mar 21 16:19:32 2018 -0700

    Add Prometheus /metrics endpoint to proxy (#569)
    
    This PR adds an endpoint to the proxy that serves metrics in Prometheus' text exposition format. The endpoint currently serves the `request_total`, `response_total`, `response_latency_ms`, and `response_duration_ms metrics`, as described in #536. The endpoint's port and address are configurable with the `CONDUIT_PROXY_METRICS_LISTENER` environment variable.
    
    Tests have been added in t`ests/telemetry.rs`

commit 84e1a89d239bbcadd9dfc962a01b0d560d372a84
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 21 10:43:32 2018 -1000

    Update tempdir dependency to improve deps situation. (#596)
    
    Replace an unconditional dependency on windows-specific crates in
    tempdir (via its update of its remove_dir_all dependency), which
    eliminates the need to download any windows-specific crates during
    the build when targetting non-Windows platforms.
    
    Also, when targetting Windows platforms, replace a winapi 0.2.x
    dependency with a winapi 0.3.x dependency.
    
    This results in two fewer downloads during Docker builds:
    
    ```diff
    - Downloading winapi v0.2.8
    - Downloading winapi-build v0.1.1
    ```
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 1fac6296e9f02fbfd932e5141b40faf6493535af
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 21 08:28:33 2018 -1000

    Update codegen and tower-balance to remove indexmap dep. (#594)
    
    ```sh
    $ cargo update -p codegen -p tower-balance
        [...]
        Removing indexmap v0.4.1
    ```
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 79b6285f8bd2832927133585a2d4c0b387ffb81d
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Mar 16 18:53:20 2018 -0700

    proxy: add SIGTERM and SIGINT handlers (#581)
    
    When the proxy is run in a Docker container, it runs as PID 1, with
    no default signal handlers setup. In order to react to signals from
    Kubernetes about shutting down, we need to set up explicit handlers.
    
    This adds handlers for SIGTERM and SIGINT.
    
    Closes #549

commit 3e4143759f04178a5ea39c8cca4a89a8749123e3
Author: Carl Lerche <me@carllerche.com>
Date:   Wed Mar 14 12:35:38 2018 -0700

    Proxy: Upgrade h2 and indexmap crates (#572)
    
    In order to pick up a bugfix in h2, upgrade:
    
    h2 0.1.2
    indexmap 1.0.0
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit 16371b3201ca765c3375a4ff1d2eb00e7d21774c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Mar 9 17:24:48 2018 -0800

    Run all discovery tests for HTTP/1 as well as HTTP/2 (#556)
    
    In order to ensure we catch discovery and routing issues arising from different logic for HTTP/1 and HTTP/2 requests, I've modified tests/discovery.rs to run all applicable tests with both HTTP/1 and HTTP/2 requests. The tests themselves are largely unchanged, but now there are separate modules containing HTTP/1 and HTTP/2 versions of a majority of the tests.

commit 698e355537f2b010210a916b8a439f929f2b73ea
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Mar 9 16:25:19 2018 -0800

    Fix outbound HTTP/1 requests not using Destinations (#555)
    
    Commit 569d6939a799bb0df6bd4053de7d7e8ac6b49ab6 introduced a regression that caused the proxy to stop using the Destination service for outbound HTTP/1 requests with no authority in the request URI but a valid authority in the `Host:` header.
    
    The bug is due to some code in `Outbound::recognize` which assumed that a request had already been passed through `normalize_our_view_of_uri`. This was valid at one point while I was writing #492, as URIs were normalized prior to `recognize` and a request `Extension` was used to mark that they had been rewritten, and the host header and request URI could be assumed to be in agreement, but after merging #514 into the dev branch for #492, this behaviour changed and I forgot to update the logic in `recognize`.
    
    I've fixed the issue by adding the logic for routing on `Host:` headers back into `Outbound::recognize`.
    
    @seanmonstar added a test in `discovery.rs`, `outbound_http1_asks_controller_about_host`, which should exercise this case. I've added a couple more unit tests in that file to try and ensure we cover more of the different cases that can occur here.
    
    Fixes #552

commit e6ce8b693d1a2a93eaa9cdcc29751970d77f900a
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Mar 8 18:38:10 2018 -1000

    Proxy: Update deps to improve logging and remove slab 0.3 & ordermap deps. (#550)
    
    Improve per-module logging (reportedly log 0.3 doesn't work with
    env_logger 0.5 as well as log 0.4 does in this respect) and eliminate
    unnecesary dependencies.
    
    ```
    cargo update -p mio
    cargo update -p tokio-io
    cargo update -p tower
    cargo update -p tower-h2
    cargo update -p tower-grpc
    ```
    
    This removes (partial output of the above `cargo update` commands):
    
    ```
        Removing log v0.3.9
        Removing ordermap v0.2.13
        Removing ordermap v0.3.5
        Removing slab v0.3.0
    ```
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit b30448ff823a1544560a440b6f7e45bf68e250d9
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Mar 8 13:15:21 2018 -0800

    proxy: improve transparency of host headers and absolute-uris (#535)
    
    In some cases, we would adjust an existing Host header, or add one. And in all cases when an HTTP/1 request was received with an absolute-form target, it was not passed on.
    
    Now, the Host header is never changed. And if the Uri was in absolute-form, it is sent in the same format.
    
    Closes #518

commit 4ebc8e7578f0a5be59489ccfc3e0fbc7802f5090
Author: Carl Lerche <me@carllerche.com>
Date:   Thu Mar 8 12:59:27 2018 -0800

    Proxy: Update h2 dependency. (#539)
    
    The h2 crate (HTTP/2.0 client and server) has a new release which
    includes bug fixes and stability improvements.
    
    This updates the Cargo.lock file to include the new release.
    
    Closes #538
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit e5ba89f2259ea7beaf41e14a9cbb55bb73719ae5
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Mar 8 12:43:19 2018 -0800

    Fix infinite loop in `tcp::HalfDuplex::copy_into()` (#537)
    
    An infinite loop exists in the TCP proxy, which could be triggered by any raw TCP connection (including HTTPS requests). The connection will be proxied successfully, but instead of closing, it will remain open, and the proxy's CPU usage will remain extremely high indefinitely.
    
    Since `Duplex::poll` will call `half_in.copy_into()`/`half_out.copy_into()` repeatedly, even after they return `Async::Ready`, when one half has shut down and returned ready, it may still be polled again, as `Duplex::poll` waits until _both_ halves have returned `Ready`. Because of the guard that `!dst.is_shutdown`, intended to prevent the destination from shutting down twice, the function will not return if it is polled again after returning `Async::Ready` once.
    
    I've fixed this by moving the guard against double shutdowns out of the loop, so that the function will return `Async::Ready` again if it is polled after shutting down the destination.
    
    I've also included a unit test against regressions to this bug. The unit test fails against master.
    
    Fixes #519
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>
    Co-Authored-By: Andrew Seigner <andrew@sig.gy>

commit bf8a697aa48e9141a63e71f428f9d985e091d970
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 7 17:40:39 2018 -1000

    Proxy: Test & document localhost. name resolution. (#531)
    
    * Proxy: Test & document localhost. name resolution.
    
    Closes #358.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit f297e91bf31eb82c40721b7d6002309b8d4d32e9
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 7 14:53:32 2018 -1000

    Proxy: Don't resolve absolute names outside zone using Destinations (#530)
    
    * Proxy: Don't resolve absolute names outside zone using Destinations service
    
    Many absolute names were being resolved using the Destinations service due to logic error
    in the proxy's matching of the zone to the default zone.
    
    Fix that bug.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit cb943fce3da6485ad12d874c18d95dbfdcf2903a
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 7 14:30:13 2018 -1000

    Simplify cluster zone suffix handling in the proxy (#528)
    
    * Temporarily stop trying to support configurable zones in the proxy.
    
    None of the zone configuration is tested and lots of things assume the cluster
    zone is `cluster.local`. Further, how exactly the proxy will actually learn the
    cluster zone hasn't been decided yet.
    
    Just hard-code the zone as "cluster.local" in the proxy until configurable zones
    are fully implemented and tested to be working correctly.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * Remove the CONDUIT_PROXY_DESTINATIONS_AUTOCOMPLETE_FQDN setting
    
    The way that Kubernetes configures DNS search suffixes has some negative
    consequences as some names like "example.com" are ambiguous: depending on
    whether there is a service "example" in the "com" namespace, "example.com"
    may refer to an external service or an internal service, and this can
    fluctuate over time. In recognition of that we added the
    CONDUIT_PROXY_DESTINATIONS_AUTOCOMPLETE_FQDN setting, thinking this would
    be part of a solution for users to opt out of the unfortunate behavior
    if their applications didn't depend on the DNS search suffix feature.
    
    It turns out similar effects can be acheived using a custom dnsConfig,
    starting in Kubernetes 1.10 when dnsConfig reaches the beta stability level.
    Now any CONDUIT_PROXY_DESTINATIONS_AUTOCOMPLETE_FQDN-based seems duplicative.
    Further, attempting to support it optionally made the code complex and hard
    to read.
    
    Therefore, let's just remove it. If/when somebody actually requests this
    functionality then we can add it back, if dnsConfig isn't a valid alternative
    for them.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>
    
    * Further hard-code "cluster.local" as the zone, temporarily.
    
    Addresses review feedback.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 38f8dffc7d6ae99b8a75309380e745bceb5666be
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 7 11:12:05 2018 -1000

    Proxy: Make CONDUIT_PROXY_POD_NAMESPACE a required parameter. (#527)
    
    Wwe will be able to simplify service discovery in the near future if we
    can rely on the namespace being available.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit c359aadfab6e7a80b9a0a77b585a7f59d6868d48
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Mar 7 10:27:00 2018 -1000

    Patch prost-derive 0.3.2 to current master to prune dependencies. (#526)
    
    Pick up https://github.com/danburkert/prost/pull/87, which results in the
    following reduction in build dependencies for the proxy:
    
        Removing failure_derive v0.1.1
          Adding prost-derive v0.3.2 (https://github.com/danburkert/prost#3427352e)
        Removing prost-derive v0.3.2
        Removing quote v0.3.15
        Removing syn v0.11.11
        Removing synom v0.11.3
        Removing synstructure v0.6.1
        Removing unicode-xid v0.0.4
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit d2c8d588e66112fa3b94a699ffc1f837cbc54dd2
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Mar 6 16:44:14 2018 -0800

    Enforce that requests are mapped to connections for each Host: header values (#492)
    
    
    This PR ensures that the mapping of requests to outbound connections is segregated by `Host:` header values. In most cases, the desired behavior is provided by Hyper's connection pooling. However, Hyper does not handle the case where a request had no `Host:` header and the request URI had no authority part, and the request was routed based on the SO_ORIGINAL_DST in the desired manner. We would like these requests to each have their own outbound connection, but Hyper will reuse the same connection for such requests.
    
    Therefore, I have modified `conduit_proxy_router::Recognize` to allow implementations of `Recognize` to indicate whether the service for a given key can be cached, and to only cache the service when it is marked as cachable. I've also changed the `reconstruct_uri` function, which rewrites HTTP/1 requests, to mark when a request had no authority and no `Host:` header, and the authority was rewritten to be the request's ORIGINAL_DST. When this is the case, the `Recognize` implementations for `Inbound` and `Outbound` will mark these requests as non-cachable.
    
    I've also added unit tests ensuring that A, connections are created per `Host:` header, and B, that requests with no `Host:` header each create a new connection. The first test passes without any additional changes, but the second only passes on this branch. The tests were added in PR #489, but this branch supersedes that branch.
    
    Fixes #415. Closes #489.

commit 6d3e0a28508cfaed2c34b5f05dd45ecfa619028f
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Mar 6 11:03:35 2018 -1000

    Update prost to 0.3.2 to remove 29 crate dependencies. (#506)
    
    The main goal with this change is to make it clear, from looking at
    Cargo.lock, that the Conduit proxy doesn't depend on OpenSSL. Although
    the *ring* crate attempts to avoid conflicts with symbols defined in
    OpenSSL, that is a manual process that doesn't have automatic
    verification yet.
    
    The secondary goal is to reduce the total number of dependencies to
    make (at least) full from-scratch builds, such as those in CI, faster.
    
    As a result of this PR, following the following upstream PRs we
    submitted to prost, as well as  some similar PRs in other upstream
    projects and in conduit inself, our usage of prost now results in us
    depending on many fewer crates:
    
      * https://github.com/danburkert/prost/pull/78
      * https://github.com/danburkert/prost/pull/79
      * https://github.com/danburkert/prost/pull/82
      * https://github.com/danburkert/prost/pull/84
    
    Here are the crate dependencies that are removed:
    
      * adler32
      * aho-corasick
      * build_const
      * bzip2
      * bzip2-sys
      * crc
      * curl
      * curl-sys
      * env_logger (0.4)
      * flate2
      * lazy_static
      * libz-sys
      * memchr
      * miniz_oxide
      * miniz_oxide_c_api
      * msdos_time
      * openssl-probe
      * openssl-sys
      * pkg-config
      * podio
      * regex
      * regex-syntax
      * schannel
      * socket2
      * thread_local
      * unreachable
      * utf8-ranges
      * vcpkg
      * zip
    
    Pretty much all of these are build dependencies, but Cargo.lock doesn't
    distinguish between build dependencies and regular dependencies.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit e07700bbcc28aade933aefa6e3164c5620b7a6e0
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Mar 5 18:10:51 2018 -0800

    proxy: preserve body headers in http1 (#457)
    
    As a goal of being a transparent proxy, we want to proxy requests and
    responses with as little modification as possible. Basically, servers
    and clients should see messages that look the same whether the proxy was
    injected or not.
    
    With that goal in mind, we want to make sure that body headers (things
    like `Content-Length`, `Transfer-Encoding`, etc) are left alone. Prior
    to this commit, we at times were changing behavior. Sometimes
    `Transfer-Encoding` was added to requests, or `Content-Length: 0` may
    have been removed. While RC 7230 defines that differences are
    semantically the same, implementations may not handle them correctly.
    
    Now, we've added some fixes to prevent any of these header changes
    from occurring, along with tests to make sure library updates don't
    regress.
    
    For requests:
    
    - With no message body, `Transfer-Encoding: chunked` should no longer be
    added.
    - With `Content-Length: 0`, the header is forwarded untouched.
    
    For responses:
    
    - Tests were added that responses not allowed to have bodies (to HEAD
    requests, 204, 304) did not have `Transfer-Encoding` added.
    - Tests that `Content-Length: 0` is preserved.
    - Tests that HTTP/1.0 responses with no body headers do not have
    `Transfer-Encoding` added.
    - Tests that `HEAD` responses forward `Content-Length` headers (but not
    an actual body).
    
    Closes #447
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit b6250b6ec6ad6a2614f794c8f10584d43baef6f9
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Mar 5 15:38:20 2018 -0800

    Remove connect timeouts from Bind (#487)
    
    Currently, the `Reconnect` middleware does not reconnect on connection errors (see  #491) and treats them as request errors. This means that when a connection timeout is wrapped in a `Reconnect`, timeout errors are treated as request errors, and the request returns HTTP 500. Since  this is not the desired behavior, the connection timeouts should be removed, at least until their errors can be handled differently.
    
    This PR removes the connect timeouts from `Bind`, as described in https://github.com/runconduit/conduit/pull/483#issuecomment-369380003.
    
    It removes the `CONDUIT_PROXY_PUBLIC_CONNECT_TIMEOUT_MS` environment variable, but _not_ the `CONDUIT_PROXY_PRIVATE_CONNECT_TIMEOUT_MS` variable, since this is also used for the TCP connect timeouts. If we want also want to remove the TCP connection timeouts, I can do that as well.
    
    Closes #483. Fixes #491.

commit 70c22a8c26ae603127827a4bc8a3b1894e50f98a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Mar 2 12:44:18 2018 -0800

    Use fmt::Display to format error messages in logs (#477)
    
    This PR changes the proxy to log error messages using `fmt::Display` whenever possible, which should lead to much more readable and meaningful error messages
    
    This is part of the work I started last week on issue #442. While I haven't finished everything for that issue (all errors still are mapped to HTTP 500 error codes), I wanted to go ahead and open a PR for the more readable error messages. This is partially because I found myself merging these changes into other branches to aid in debugging, and because I figured we may as well have the nicer logging on master.

commit 0effefa5d7c2e381078aab553858a1e5cc54789f
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Mar 2 10:14:54 2018 -0800

    proxy: detect TCP socket hang ups from client or server (#463)
    
    We previously `join`ed on piping data from both sides, meaning
    that the future didn't complete until **both** sides had disconnected.
    Even if the client disconnected, it was possible the server never knew,
    and we "leaked" this future.
    
    To fix this, the `join` is replaced with a `Duplex` future, which pipes
    from both ends into the other, while also detecting when one side shuts
    down. When a side does shutdown, a write shutdown is forwarded to the
    other side, to allow draining to occur for deployments that half-close
    sockets.
    
    Closes #434

commit 95057b067a9e456184572a2a8b260096c5dbc559
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Mar 1 17:16:21 2018 -1000

    Proxy: Update domain dep. to remove rand 0.3 dep. (#495)
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 72dc1e1f17bf552b3b72343c2f13d3cf13f80616
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Wed Feb 28 14:12:36 2018 -0800

    proxy: de-duplicate method parsing in tap quickcheck (#472)
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit 0b0cd33267052b33b53e52d1a9bc9b582c9f4c1a
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Tue Feb 27 17:38:43 2018 -0800

    Refactor FullyQualifiedAuthority::normalize to always return authority (#476)
    
    As requested by @briansmith in https://github.com/runconduit/conduit/issues/415#issuecomment-369026560 and https://github.com/runconduit/conduit/issues/415#issuecomment-369032059, I've refactored `FullyQualifiedAuthority::normalize` to _always_ return a `FullyQualifiedAuthority`, along with a boolean value indicating whether or not the Destination service should be used for that authority.
    
    This is in contrast to returning an `Option<FullyQualifiedAuthority>` where `None` indicated that the Destination service should not be used, which is what this function did previously.
    
    This is required for further progress on #415.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 09fe835aae67a307bd44322597256976b63a8a89
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 19:40:03 2018 -1000

    Update abstract-ns and tempdir dependencies to use rand 0.4. (#468)
    
    ```
    cargo update -p tempdir
    cargo update -p abstract-ns
    ```
    
    The new version of tempdir actually adds a new dependency, but
    apparently that is to fix a bug.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 8dddd3ff471fc3d264123367ce281f9f77c7076a
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 19:29:22 2018 -1000

    Proxy: Upgrade from ordermap 0.2 crate to indexmap 0.4. (#466)
    
    Currently we have to download and build two different versions of
    the ordermap crate.
    
    I will submit similar PRs for the dependent crates so that we will
    eventually all be using the same version of indexmap.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 457e65e512127afd76fdeb60986ce711425bce10
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 19:07:36 2018 -1000

    Fix intermittent outbound_times_out failure. (#471)
    
    This was caused by the fact that a new instance of `env_logger::init()`
    was added after the PR that rewrote them all to `env_logger::try_init()`
    was added.
    
    Fixes #469
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 6d3a7c337d4694a089a5746939d6b62208d2eb41
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 18:32:47 2018 -1000

    Reduce memory allocations during logging. (#445)
    
    Stop initializing env_logger in every test. In env_logger 0.5, it
    may only be initialized once per process.
    
    Also, Prost will soon upgrade to env_logger 0.5 and this will
    (eventually) help reduce the number of versions of env_logger we
    have to build. Turning off the regex feature will (eventually) also
    reduce the number of dependencies we have to build. Unfortunately,
    as it is now, the number of dependencies has increased because
    env_logger increased its dependencies in 0.5.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 320c794f0f0393bca1c1f9bfb1d97d1ca1ab40c7
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 16:04:58 2018 -1000

    Turn off the `use_logging` default feature of quickcheck. (#465)
    
    Turning off the default features of quickcheck removes its
    `env_logger` and `log` dependencies. It uses older versions of
    those packages than conduit-proxy will use, so this will
    (eventually) reduce the number of versions of those packages that
    get downloaded and built.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit f2c711230b7a157675eecf447018d59ada5a38fd
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 08:56:05 2018 -1000

    Remove the unused tokio-proto build dependency. (#451)
    
    Hyper depends on tokio-proto with a default feature. By turning off
    its default features, we can avoid that dependency. That reduces the
    number of dependencies by 4.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 819fa072d6dd30a27acb81f446a30b869cc38480
Author: Brian Smith <brian@briansmith.org>
Date:   Mon Feb 26 08:55:48 2018 -1000

    Stop using the url crate in the proxy. (#450)
    
    Version 1.7.0 of the url crate seems to be broken which means we cannot
    `cargo update` the proxy without locking url to version 1.6. Since we only
    use it in a very limited way anyway, and since we use http::uri for parsing
    much more, just switch all uses of the url crate to use http::uri for parsing
    instead.
    
    This eliminates some build dependencies.
    
    Signed-off-by: Brian Smith <brian@briansmith.org>

commit 6df6e8150fa0dd8c2faece5ec0c109e81d497043
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Feb 26 10:18:35 2018 -0800

    Add timeout to Outbound::bind_service (#436)
    
    Closes #403.
    
    When the Destination service does not return a result for a service, the proxy connection for that service will hang indefinitely waiting for a result from Destination. If, for example, the requested name doesn't exist, this means that the proxy will wait forever, rather than responding with an error.
    
    I've added a timeout wrapping the service returned from `<Outbound as Recognize>::bind_service`. The timeout can be configured by setting the `CONDUIT_PROXY_BIND_TIMEOUT` environment variable, and defaults to 10 seconds (because that's the default value for [a similar configuration in Linkerd](https://linkerd.io/config/1.3.5/linkerd/index.html#router-parameters)).
    
    Testing with @klingerf's reproduction from #403:
    ```
    curl -sIH 'Host: httpbin.org' $(minikube service proxy-http --url)/get | head -n1
    HTTP/1.1 500 Internal Server Error
    ```
    proxy logs:
    ```rust
    proxy-5698f79b66-8rczl conduit-proxy INFO conduit_proxy using controller at HostAndPort { host: Domain("proxy-api.conduit.svc.cluster.local"), port: 8086 }
    proxy-5698f79b66-8rczl conduit-proxy INFO conduit_proxy routing on V4(127.0.0.1:4140)
    proxy-5698f79b66-8rczl conduit-proxy INFO conduit_proxy proxying on V4(0.0.0.0:4143) to None
    proxy-5698f79b66-8rczl conduit-proxy INFO conduit_proxy::transport::connect "controller-client", DNS resolved proxy-api.conduit.svc.cluster.local to 10.0.0.240
    proxy-5698f79b66-8rczl conduit-proxy ERR! conduit_proxy::map_err turning service error into 500: Inner(Timeout(Duration { secs: 10, nanos: 0 }))
    ```

commit 777b2fcfe45c366b509a03ec42333e2b974f3934
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Feb 26 10:17:53 2018 -0800

    Add flaky_tests feature for skipping some tests on CI (#441)
    
    This PR adds a `flaky_tests` cargo feature to control whether or not to ignore tests that are timing-dependent. This feature is enabled by default in local builds, but disabled on CI and in all Docker builds.
    
    Closes #440

commit 427335a4d5fce48156a61ba625ed93c886cb2ecb
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Feb 23 16:22:45 2018 -0800

    proxy: don't send transfer-encoding for empty GET requests (#410)
    
    This is fixed in hyper v0.11.19.
    
    Closes #402

commit 8ea68f9c44c4fdfa047917cf17f09aa23ad4b8c8
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Fri Feb 23 12:13:51 2018 -0800

    proxy: fix intermittent tap match method quickcheck failure (#427)
    
    Closes #413

commit 4e53eaf909ade84d89c9bdce0b57e47fbb08681c
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Feb 22 15:51:04 2018 -0800

    proxy: improve overall quality of logs (#424)
    
    - Removed several useless `trace!("poll")` lines
    - Upgraded controller client errors to `error` level
    - Made controller client errors human-readable

commit 34f5c58c99c3dfa8ef47fd6e58e8a564a98cf9a4
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Wed Feb 21 20:15:23 2018 -0800

    proxy: add more tests for loopback IPs in FullyQualifiedAuthority (#411)
    
    Closes #357
    
    Signed-off-by: Sean McArthur <sean@seanmonstar.com>

commit 10915b6da330d53331a45f32ccdc06710f5a7f49
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Feb 21 15:17:17 2018 -0800

    Remove timestamps from log messages (#399)
    
    As @olix0r requested in https://github.com/runconduit/conduit/issues/56#issuecomment-356771758, I've removed timestamps from the Conduit proxy's log records.
    
    Closes #56
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 13275818ee7b21fcc65e3ba4c00bff99359982e1
Author: Kevin Lingerfelt <kl@buoyant.io>
Date:   Wed Feb 21 11:14:11 2018 -0800

    Prepare for the v0.3.0 release (#406)
    
    Signed-off-by: Kevin Lingerfelt <kl@buoyant.io>

commit d2e86904efe0aa81f3e51370f0d5a3bbbd7855e0
Author: Carl Lerche <me@carllerche.com>
Date:   Tue Feb 20 19:56:21 2018 -0800

    Proxy: Limit the max number of in-flight requests. (#398)
    
    Currently, the max number of in-flight requests in the proxy is
    unbounded. This is due to the `Buffer` middleware being unbounded.
    
    This is resolved by adding an instance of `InFlightLimit` around
    `Buffer`, capping the max number of in-flight requests for a given
    endpoint.
    
    Currently, the limit is hardcoded to 10,000. However, this will
    eventually become a configuration value.
    
    Fixes #287
    
    Signed-off-by: Carl Lerche <me@carllerche.com>

commit 30dc48db515e1ea91c049876403a018b4592cefb
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Feb 20 18:09:21 2018 -0800

    proxy: use original dst if authority doesnt look like local service (#397)
    
    The proxy will check that the requested authority looks like a local service, and if it doesn't, it will no longer ask the Destination service about the request, instead just using the SO_ORIGINAL_DST, enabling egress naturally.
    
    The rules used to determine if it looks like a local service come from this comment:
    
    > If default_zone.is_none() and the name is in the form $a.$b.svc, or if !default_zone.is_none() and the name is in the form $a.$b.svc.$default_zone, for some a and some b, then use the Destination service. Otherwise, use the IP given.

commit ea06854fca9b3ef669d0f0f3356667b3b5a7bf98
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Feb 9 17:14:17 2018 -0800

    Remove unused metrics (#322)
    
    Removed the `method` label from Prometheus, and removed HTTP methods from reports. Removed `StreamSummary` from reports and replaced it with a `u32` count of streams.
    
    Closes #266
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 713ddf24c8fc276fdd37df4f46741aa7191b4433
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Fri Feb 9 14:20:28 2018 -0800

    Remove per-path metrics from telemetry pipeline (#317)
    
    Follow-up from #315.
    
    Now that the UIs don't report per-path metrics, we can remove the path label from Prometheus, the path aggregation and filtering options from the telemetry API, and the path field from the proxy report API.
    
    I've modified the tests to no longer expect the removed fields, and manually verified that Conduit still works after making these changes.
    
    Closes #265
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit ae0e2d7d8642dac6e628bc94e99d584afd8017c0
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Feb 7 18:02:59 2018 -0800

    Store proxy latencies in a structure that matches controller histogram (#11)
    
    The proxy currently stores latency values in an `OrderMap` and reports every observed latency value to the controller's telemetry API since the last report. The telemetry API then sends each individual value to Prometheus. This doesn't scale well when there are a large number of proxies making reports.
    
    I've modified the proxy to use a fixed-size histogram that matches the histogram buckets in Prometheus. Each report now includes an array indicating the histogram bounds, and each response scope contains a set of counts corresponding to each index in the bounds array, indicating the number of times a latency in that bucket was observed. The controller then reports the upper bound of each bucket to Prometheus, and can use the proxy's reported set of bucket bounds so that the observed values will be correct even if the bounds in the control plane are changed independently of those set in the proxy.
    
    I've also modified `simulate-proxy` to generate the new report structure, and added tests in the proxy's telemetry test suite validating the new behaviour.

commit 9c02c4d6e70c6fdb38a12df6d3931aea9b5d3e87
Author: Oliver Gould <ver@buoyant.io>
Date:   Wed Feb 7 09:39:31 2018 -0800

    Use a load-aware balancer (#251)
    
    Currently, the conduit proxy uses a simplistic Round-Robin load
    balancing algorithm. This strategy degrades severely when individual
    endpoints exhibit abnormally high latency.
    
    This change improves this situation somewhat by making the load balancer
    aware of the number of outstanding requests to each endpoint. When nodes
    exhibit high latency, they should tend to have more pending requests
    than faster nodes; and the Power-of-Two-Choices node selector can be
    used to distribute requests to lesser-loaded instances.
    
    From the finagle guide:
    
        The algorithm randomly picks two nodes from the set of ready endpoints
        and selects the least loaded of the two. By repeatedly using this
        strategy, we can expect a manageable upper bound on the maximum load of
        any server.
    
        The maximum load variance between any two servers is bound by
        ln(ln(n))` where `n` is the number of servers in the cluster.
    
    Signed-off-by: Oliver Gould <ver@buoyant.io>

commit 0cd1f65e393a24bf51cffe37f6b47f0ad1c8a035
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Feb 6 10:31:48 2018 -0800

    Move the Rust gRPC bindings to a dedicated crate (#275)
    
    The proxy depends on `protoc`-generated gRPC bindings to communicate
    with the controller. In order to generate these bindings, build-time
    dependencies must be compiled.
    
    In order to support a more granular, cacheable build scheme, a new crate
    has been created to house these gRPC bindings,
    `conduit-proxy-controller-grpc`.
    
    Because `TryFrom` and `TryInto` conversions are implemented for
    protobuf-defined types, the `convert` module also had to be moved to
    into a dedicated crate.
    
    Furthermore, because the proxy's tests require that
    `quickcheck::Aribtrary` be implemented for protobuf types, the
    `conduit-proxy-controller-grpc` crate supports an _arbitrary_ feature
    fla protobuf types, the `conduit-proxy-controller-grpc` crate supports
    an _arbitrary_ feature flag.
    
    While we're moving these libraries around, the `tower-router` crate has
    been moved to `proxy/router` and renamed to `conduit-proxy-router.`
    `futures-mpsc-lossy` has been moved into the proxy directory but has not
    been renamed.
    
    Finally, the `proxy/Dockerfile-deps` image has been updated to avoid the
    wasteful building of dependency artifacts, as they are not actually used
    by `proxy/Dockerfile`.

commit ad1aedf7b61043935093514e3d469fc93d61d5b9
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 1 15:16:02 2018 -0800

    Add a newline to dco.yml (#254)

commit 817f914798b5d5232af911f72b681061faaf1e05
Author: Oliver Gould <ver@buoyant.io>
Date:   Thu Feb 1 13:45:32 2018 -0800

    Do not require DCO signoff for project members (#252)
    
    We only need the DCO bot to validate external submissions.

commit b56cc883c1a9a41edb69545d40219591e0b3246e
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Feb 1 11:57:02 2018 -0800

    Adopt external tower-grpc and tower-h2 deps #225)
    
    The conduit repo includes several library projects that have since been
    moved into external repos, including `tower-grpc` and `tower-h2`.
    
    This change removes these vendored libraries in favor of using the new
    external crates.

commit 53299f6c7872ad6cb277f3c9181f3e4b379bde9c
Author: Dennis Adjei-Baah <dadjeibaah@gmail.com>
Date:   Wed Jan 31 15:39:48 2018 -0800

    Prepare for v0.2.0 release (#248)
    
    * prepare for v0.2.0 release
    
    Signed-off-by: Dennis Adjei-Baah <dennis@buoyant.io>

commit 719000082f74ee340eef22b18ba067d3c9e718ba
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Mon Jan 29 15:15:06 2018 -0800

    proxy: fix tcp_with_no_orig_dst test (#229)
    
    Sometimes, the try_read will return a connection error, sometimes it
    will just return EOF. Handle both cases.
    
    Closes #226

commit 8b7baf62c3fc28ac914626b3a40deb67a7c923bc
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Jan 25 16:36:16 2018 -0800

    proxy: fix h1 streams to trigger response end events
    
    Response End events were only triggered after polling the trailers of
    a response, but when the Response is given to a hyper h1 server, it
    doesn't know about trailers, so they were never polled!
    
    The fix is that the `BodyStream` glue will now poll the wrapped body for
    trailers after it sees the end of the data, before telling hyper the
    stream is over. This ensures a ResponseEnd event is emitted.
    
    Includes a proxy telemetry test over h1 connections.

commit 000800223646c34b4448aee8efaffd8866110624
Author: Andrew Seigner <andrew@sig.gy>
Date:   Wed Jan 24 15:48:00 2018 -0800

    Move EosCtx to common for Tap and Telemetery (#204)
    
    * Make Eos optional in TapEvent
    
    grpc_status not being set in protobuf is the same as being set to zero,
    which is also status OK
    
    Modify TapEvent to include an optional EOS struct
    
    Signed-off-by: Andrew Seigner <siggy@buoyant.io>
    
    Part of #198
    
    * Add Eos to proto & proxy tap end-of-stream events
    
    The proxy now outputs `Eos` instead of `grpc_status` in all end-of-stream tap events. The EOS value is set to `grpc_status_code` when the response ended with a `grpc_status` trailer, `http_reset_code` when the response ended with a reset, and no `Eos` when the response ended gracefully without a `grpc_status` trailer.
    
    This PR updates the proxy. The proto and controller changes are in PR #204.
    Part of #198. Closes #202
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1e9ff8be0326a67baa130f3df19c449b2cf3822d
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Tue Jan 23 16:14:07 2018 -0800

    proxy: add transparent protocol detection and handling
    
    The proxy will now try to detect what protocol new connections are
    using, and route them accordingly. Specifically:
    
    - HTTP/2 stays the same.
    - HTTP/1 is now accepted, and will try to send an HTTP/1 request
      to the target.
    - If neither HTTP/1 nor 2, assume a TCP stream and simply forward
      between the source and destination.
    
    * tower-h2: fix Server Clone bounds
    * proxy: implement Async{Read,Write} extra methods for Connection
    
    Closes #130
    Closes #131

commit cb6c2eab1683b76a59889d9a45148a8dc7f64f35
Author: Andrew Seigner <andrew@sig.gy>
Date:   Fri Jan 19 13:58:52 2018 -0800

    Updates for v0.1.3 release (#185)
    
    Signed-off-by: Andrew Seigner <siggy@buoyant.io>

commit d22ce60c0c6070cc0775f55f357c79018f12d5f2
Author: Andrew Seigner <andrew@sig.gy>
Date:   Fri Jan 19 10:56:20 2018 -0800

    Updates for v0.1.2 release (#171)
    
    Signed-off-by: Andrew Seigner <siggy@buoyant.io>

commit 3bbeac09d21f69154991131bf8a304c1ef71ab86
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Wed Jan 17 09:23:27 2018 -0800

    Use cargo:rerun-if-changed to avoid recompiling protos (#160)
    
    As @seanmonstar noticed, the build script will currently re-compile all the protobufs regardless of whether or not they have changed, making the build much slower.
    
    This PR modifies it to emit `cargo:rerun-if-changed=` for all the protobuf files, so they will only be regenerated if one of them changes.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 1a386d1f1f218b2d5a9a77fb082f0f99109d9808
Author: Andrew Seigner <andrew@sig.gy>
Date:   Tue Jan 16 23:19:53 2018 -0800

    Introduce BUILD.md (#137)
    
    Our build instructions were scattered across a few README's.
    
    This consolidates all instructions relevant to Conduit development into
    a single BUILD.md.
    
    Fixes #134
    
    Signed-off-by: Andrew Seigner <andrew@sig.gy>

commit d6cd34fc98e9e2d0a8fd3d631b9577a51a6101f1
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 11 16:00:38 2018 -0800

    Add Protocol field to Transports telemetry (#138)
    
    See #132. This PR adds a protocol field to the ClientTransport and ServerTransport messages, and modifies the proxy to report a value for this field (currently, it's only ever HTTP).
    
    Currently, HTTP/1 and HTTP/2 are collapsed into one Protocol variant, see #132 (comment). I expect that we can treat H1 as a subset of H2 as far as metrics goes.
    
    Note that after discussing it with @klingerf, I learned that the control plane telemetry API currently does not do anything with the ClientTransport and ServerTransport messages, so beyond regenerating the protobuf-generated code, no controller changes were actually necessary. As we actually add metrics to TCP transports, we'll want to make some additions to the telemetry API to ingest these metrics. If any metrics are shared between HTTP and raw TCP transports (say, bytes sent), we'll want to differentiate between them in Prometheus. All the metrics that the control plane currently ingests from telemetry reports are likely to be HTTP-specific (requests, responses, response latencies), or at least, do not apply to raw TCP.
    
    Actually adding metrics to raw TCP transports will probably have to wait until there are raw TCP transports implemented in the proxy...
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit 84ab38414e7f67c3dd29d21a71487d3dbd99b12b
Author: clemensw <clemensw@users.noreply.github.com>
Date:   Tue Jan 9 00:40:12 2018 +0100

    [proxy] Fix rendering for top-level rustdoc (#113)
    
    Signed-off-by: clemensw <clemensw@users.noreply.github.com>

commit cb73e42fab646272cbc867cc6c41089281d622d4
Author: Andrew Seigner <andrew@sig.gy>
Date:   Mon Jan 8 11:19:49 2018 -0800

    Fix Go and Proxy dependency image SHAs (#117)
    
    The image tags for gcr.io/runconduit/go-deps and
    gcr.io/runconduit/proxy-deps were not updating to account for all
    changes in those images.
    
    Modify SHA generation to include all files that affect the base
    dependency images. Also add instructions to README.md for updating
    hard-coded SHAs in Dockerfile's.
    
    Fixes #115
    
    Signed-off-by: Andrew Seigner <andrew@sig.gy>

commit 77dba6f0135efbdb153dcfc427850cb5af370ffa
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Mon Jan 8 10:29:51 2018 -0800

    Change Cargo.lock to trigger deps image rebuild (#116)
    
    Because whether or not to build a new deps image is based on the SHA of Cargo.lock, changes to the deps Dockerfile will not cause a new deps image to be built. Because of this, the current proxy deps Docker image is based on the wrong Rust version, breaking the build. See #115 for details on this issue.
    
    I've appended a newline to Cargo.lock to change the lockfile's SHA and trigger a rebuild of the deps Docker image on CI. I've also added a comment in the Dockerfile noting that it is necessary to do this when changing that file.
    
    Signed-off-by: Eliza Weisman eliza@buoyant.io

commit 27ababf5bdb1a62ca35fc97ff4d8c2c0bf7b5a0c
Author: Eliza Weisman <eliza@buoyant.io>
Date:   Thu Jan 4 10:49:13 2018 -0800

    Remove `AsciiExt` import (#104)
    
    Since the methods on this trait were moved to direct implementations on the
    implementing types, this produces an unused import warning with the latest
    (1.23) Rust standard library. As we set `deny(warnings)`, this breaks the build.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit f1a4e98053b2f83eb9962eb28c8a56d1d969371a
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Jan 2 08:44:27 2018 -1000

    Remove default controller URL from proxy. (#48)
    
    Previously there was a default controller URL in the proxy. This
    default was never used for any proxy injected by `conduit inject` and
    it was the wrong default when using the proxy outside of Kubernetes.
    Also more generally this is such an important setting in terms of
    correctness and security that it was dangerous to let it be implied in
    any context.
    
    Remove the default, requiring that it be set in order for the proxy to
    start.

commit 20a6e18922b855084110837fac0a961280ebbb04
Author: Sky Ao <aoxiaojian@gmail.com>
Date:   Sat Dec 30 02:14:49 2017 +0800

    correct typo: Enviroment -> Environment (#100)
    
    Signed-off-by: Sky Ao <aoxiaojian@gmail.com>

commit 138d6e8a32a5bec1a49a4d4d7b69921c4f161418
Author: Kevin Lingerfelt <kl@buoyant.io>
Date:   Fri Dec 22 14:54:27 2017 -0800

    Add contributing doc and DCO file (#88)
    
    * Add contributing doc and DCO file
    
    Signed-off-by: Kevin Lingerfelt <kl@buoyant.io>
    
    * Fix small typos
    
    Signed-off-by: Kevin Lingerfelt <kl@buoyant.io>

commit c40e407ad02a00f43fcf779b8eb8ab9edef8e057
Author: Sean McArthur <sean@seanmonstar.com>
Date:   Thu Dec 21 14:41:17 2017 -0800

    disable push promises in proxy (#70)

commit 957d02b9cb9d6ec6be5fe75132e9f328bcddc22c
Author: Kevin Lingerfelt <kl@buoyant.io>
Date:   Wed Dec 20 10:51:53 2017 -0800

    Prepare the repo for the v0.1.1 release (#75)
    
    * Prepare the repo for the v0.1.1 release
    
    * Add changelog
    
    * Changelog updates, wrap at 100 characters

commit 1164759540447922496d8e594ddd2199652eb54a
Author: Brian Smith <brian@briansmith.org>
Date:   Tue Dec 19 11:59:26 2017 -1000

    Proxy: Map unqualified/partially-qualified names to FQDN (#59)
    
    * Proxy: Map unqualified/partially-qualified names to FQDN
    
    Previously we required the service to fully qualify all service names
    for outbound traffic. Many services are written assuming that
    Kubernetes will complete names using its DNS search path, and those
    services weren't working with Conduit.
    
    Now add an option, used by default, to fully-qualify the domain names.
    Currently only Kubernetes-like name completion for services is
    supported, but the configuration syntax is open-ended to allow for
    alternatives in the future. Also, the auto-completion can be disabled
    for applications that prefer to ensure they're always using unambiguous
    names. Once routing is implemented then it is likely that (default)
    routing rules will replace these hard-coded rules.
    
    Unit tests for the name completion logic are included.
    
    Part of the solution for #9. The changes to `conduit inject` to
    actually use this facility will be in another PR.

commit fdf9f1a81ceff954408248415bd0ff72fe1078fa
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Dec 15 12:44:25 2017 -1000

    Use `connection::Connection` for outbound connections (#51)
    
    Previously `connection::Connection` was only being used for inbound
    connections, not outbound connections. This led to some duplicate
    logic and also made it difficult to adapt that code to enable TLS.
    
    Now outbound connections use `connection::Connection` too. This will
    allow the upcoming TLS logic to guarantee that `TCP_NODELAY` is
    enabled at the right time, and the TLS logic also control access to
    the underlying plaintext socket for security reasons.

commit 1af68d3a144983eab85170a6b3573d2b0c9d9c99
Author: Brian Smith <brian@briansmith.org>
Date:   Thu Dec 14 13:19:05 2017 -1000

    Encapsulate listening port connection acceptance logic (#46)
    
    Previously every use of `BoundPort` repeated a bunch of logic.
    
    Move the repeated logic to `BoundPort` itself. Just remove the no-op
    handshaking logic; new handshaking logic will be added to `BoundPort`
    when TLS is added.

commit 95cb05d3a9047aca2c359afe3600726f4abbc8f2
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Dec 13 21:15:21 2017 -0600

    Move default private connect timeout to `Config` (#42)
    
    Previously the default value of this setting was in lib.rs instead of
    being automatically set in `Config` like all the other defaults, which
    was inconsistent and confusing.
    
    Fix this by moving the defaulting logic to `Config`.
    
    Validated by running the test suite.

commit 284fbcfb20be7da71f8b17647ddec524247d969d
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Dec 13 19:45:15 2017 -0600

    Centralize and clarify TCP port binding (#43)
    
    Previously the logic related to listening for incoming TCP connections
    was duplicated in several places.
    
    Begin centralizing this logic. Future commits will centralize it
    further.
    
    No validation was done other than running the test suite.

commit 86fb3c7e4ad998a626261f87ee3d24c0a5d6f3c6
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Dec 13 19:33:37 2017 -0600

    Proxy: Parse environment variables in one place (#26)
    
    Previously `Process` did its own environment variable parsing and did
    not benefit from the improved error handling that `config` now has.
    Additionally, future changes will need access to these same environment
    variables in other parts of the proxy.
    
    Move `Process`'s environment variable parsing to `config` to address
    both of these issues. Now there are no uses of `env::var` outside of
    `config` except for logging, which is the final desired state.
    
    I validated this manually.

commit 4ccff3f333fc3ba61c0b4b7c6b96493104475e13
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Dec 13 19:27:50 2017 -0600

    Proxy: Use production config parsing in tests (#25)
    
    * Proxy: Use production config parsing in tests
    
    Previosuly the testing code for the proxy was sensitive to the values
    of environment variables unintentionally, because `Config` looked at
    the environment variables. Also, the tests were largely avoiding
    testing the production configuration parsing code since they were
    doing their own parsing.
    
    Now the tests avoid looking at environment variables other than
    `ENV_LOG`, which makes them more resilient. Also the tests now parse
    the settings using the same code as production use uses.
    
    I validated this manually.

commit ad515bb537451ab7644a79877882a48c64d6a26a
Author: Brian Smith <brian@briansmith.org>
Date:   Wed Dec 13 18:56:14 2017 -0600

    Proxy: Parse all environment variables before aborting (#24)
    
    Previously, as soon as we would encounter one environment variable with
    an invalid value we would exit. This is frustrating behavior when
    deploying to Kubernetes and there are multiple problems because the
    edit-compile-test cycle is so slow.
    
    Fix this by parsing all the environment variables and logging error
    messages before exiting.
    
    I validated this manually.

commit 97be2dd8cdd3d72e7e983bcc1fa5645430777a23
Author: Eliza Weisman <eliza@elizas.website>
Date:   Wed Dec 13 15:07:36 2017 -0800

    Add timeout to in-flight telemetry reports (#12)
    
    This PR adds a configurable timeout duration after which in-flight telemetry reports are dropped, cancelling the corresponding RPC request to the control plane.
    
    I've also made the `Timeout` implementation used in `TimeoutConnect` generic, and reused it in multiple places, including the timeout for in-flight reports.
    
    Signed-off-by: Eliza Weisman <eliza@buoyant.io>

commit b4ace4642adee0a45e73f88e12d2377bc4ba1bb0
Author: Brian Smith <brian@briansmith.org>
Date:   Fri Dec 8 12:32:43 2017 -0600

    Proxy: Improve error reporting for invalid environment variables (#23)
    
    * Proxy: Improve error reporting for invalid environment variables
    
    Previously when an environment variable had an invalid value the
    process would exit with an error that did not mention which
    environment variable is invalid.
    
    Start fixing this by routing environment variable parsing through
    functions that always know the name of the environment variable when
    they report errors.
    
    I validated this change manually.
    
    * Proxy: Improve configuration URL parsing
    
    Previously there was a bit of duplicated logic between parsing `Addr`
    and `HostAndPort` values.
    
    Factor out the common logic. In the process, improve the error
    reporting in the cases where parsing fails.

commit 205e4d4915b591bba68430df44dcc83cd0940952
Author: Oliver Gould <ver@buoyant.io>
Date:   Mon Dec 4 19:55:56 2017 -0800

    Prepare for v0.1.0 (#1)
    
    Update versions in code.
    
    Use default docker tag of v0.1.0

commit 3f872136023c63ffeeb2263d202eaab6fee78252
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 5 00:44:16 2017 +0000

    apply rustffmt on proxy, remove rustfmt.toml for now

commit d2c54b65dea3eb79e5bd8ab9e58ea87919de9302
Author: Oliver Gould <ver@buoyant.io>
Date:   Tue Dec 5 00:17:02 2017 +0000

    Introducing Conduit, the ultralight service mesh
    
    We’ve built Conduit from the ground up to be the fastest, lightest,
    simplest, and most secure service mesh in the world. It features an
    incredibly fast and safe data plane written in Rust, a simple yet
    powerful control plane written in Go, and a design that’s focused on
    performance, security, and usability. Most importantly, Conduit
    incorporates the many lessons we’ve learned from over 18 months of
    production service mesh experience with Linkerd.
    
    This repository contains a few tightly-related components:
    - `proxy` -- an HTTP/2 proxy written in Rust;
    - `controller` -- a control plane written in Go with gRPC;
    - `web` -- a UI written in React, served by Go.
